// MIT License

// Copyright (c) 2025 Zherebtsov Nikita <nikita@crimsongold.ru>

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/crimsongoldteam/md_design

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "0.16.2";
	Идентификатор = "Накидка";
	БезопасныйРежим = Истина;
	Представление = НСтр("ru = 'Накидка'; en = 'MD_Design'");
	ПоказыватьОповещение = Ложь;
	
	Если ЭтоБСП() Тогда
		Модуль = Вычислить("ДополнительныеОтчетыИОбработки");
		МодульКлиентСервер = Вычислить("ДополнительныеОтчетыИОбработкиКлиентСервер");
		
		ПараметрыРегистрации = Модуль.СведенияОВнешнейОбработке();
		
		ПараметрыРегистрации.Вид = МодульКлиентСервер.ВидОбработкиДополнительнаяОбработка();
		ПараметрыРегистрации.Версия = Версия;
		ПараметрыРегистрации.БезопасныйРежим = БезопасныйРежим;
		
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление = Представление;
		НоваяКоманда.Идентификатор = Идентификатор;
		НоваяКоманда.Использование = МодульКлиентСервер.ТипКомандыОткрытиеФормы();
		НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	ИначеЕсли ЭтоSSL() Тогда
		Модуль = Вычислить("AdditionalReportsAndDataProcessors");
		МодульКлиентСервер = Вычислить("AdditionalReportsAndDataProcessorsClientServer");
		
		ПараметрыРегистрации = Модуль.ExternalDataProcessorInfo();
		
		ПараметрыРегистрации.Kind = МодульКлиентСервер.DataProcessorKindAdditionalDataProcessor();
		ПараметрыРегистрации.Version = Версия;
		ПараметрыРегистрации.SafeMode = БезопасныйРежим;
		ПараметрыРегистрации.Вставить("Версия", Версия);
		
		НоваяКоманда = ПараметрыРегистрации.Commands.Добавить();
		НоваяКоманда.Presentation = Представление;
		НоваяКоманда.ID = Идентификатор;
		НоваяКоманда.Use = МодульКлиентСервер.CommandTypeOpenForm();
		НоваяКоманда.ShouldShowUserNotification = ПоказыватьОповещение;
	Иначе
		ПараметрыРегистрации = Новый Структура;
		
		ПараметрыРегистрации.Вставить("Вид", "НашID");
		ПараметрыРегистрации.Вставить("Версия", Версия);
		ПараметрыРегистрации.Вставить("БезопасныйРежим", БезопасныйРежим);
	КонецЕсли;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПостроитьНаСервере(Форма, ГруппаРодитель, ДанныеГенератора) Экспорт
	ИзменитьРеквизитыФормы(Форма, ДанныеГенератора.Реквизиты);
	
	ГруппаКонтейнер = ПересоздатьГруппуКонтейнер(ГруппаРодитель, Форма);
	
	ДобавитьЭлементыФормы(Форма, ДанныеГенератора.Элементы, ГруппаКонтейнер);
	ЗаполнитьДанныеФормы(Форма, ДанныеГенератора.Данные);
КонецПроцедуры

Функция ПолучитьОписаниеТипов(СоотвОписаниеТипов) Экспорт
	КвалификаторыЧисла = ПолучитьКвалификаторыЧисла(СоотвОписаниеТипов);
	КвалификаторыДаты = ПолучитьКвалификаторыДаты(СоотвОписаниеТипов);
	КвалификаторыСтроки = ПолучитьКвалификаторыСтроки(СоотвОписаниеТипов);
	
	// Временно
	Типы = Новый Массив;
	Для Каждого ТекТип Из СоотвОписаниеТипов.Типы Цикл
		Если СтрНачинаетсяС(ТекТип, "Справочник") ИЛИ СтрНачинаетсяС(ТекТип, "Перечисление") ИЛИ СтрНачинаетсяС(ТекТип, "Документ") Тогда
			Продолжить;
		КонецЕсли;
		Типы.Добавить(ТекТип);
	КонецЦикла;
	
	Возврат Новый ОписаниеТипов(
		СтрСоединить(Типы, ","),
		КвалификаторыЧисла,
		КвалификаторыСтроки,
		КвалификаторыДаты);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКвалификаторыЧисла(СоотвОписаниеТипов)
	Если СоотвОписаниеТипов.Типы.Найти("Число") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДлинаЧисла = ?(СоотвОписаниеТипов.ДлинаЧисла = Неопределено, 0, СоотвОписаниеТипов.ДлинаЧисла);
	ТочностьЧисла = ?(СоотвОписаниеТипов.ТочностьЧисла = Неопределено, 0, СоотвОписаниеТипов.ТочностьЧисла);
	Возврат Новый КвалификаторыЧисла(ДлинаЧисла, ТочностьЧисла);
КонецФункции

Функция ПолучитьКвалификаторыДаты(СоотвОписаниеТипов)
	Если СоотвОписаниеТипов.Типы.Найти("Дата") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекЧастиДаты = ?(
			СоотвОписаниеТипов.ЧастиДаты = Неопределено,
			ЧастиДаты.ДатаВремя,
			ПолучитьЗначениеСвойства(Новый Структура("Тип,Значение", "ЧастиДаты", СоотвОписаниеТипов.ЧастиДаты)));
	
	Возврат Новый КвалификаторыДаты(ТекЧастиДаты);
КонецФункции

Функция ПолучитьКвалификаторыСтроки(СоотвОписаниеТипов)
	Если СоотвОписаниеТипов.Типы.Найти("Строка") = Неопределено
		ИЛИ СоотвОписаниеТипов.ДлинаСтроки <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДлинаСтроки = ?(СоотвОписаниеТипов.ДлинаСтроки = Неопределено, 0, СоотвОписаниеТипов.ДлинаСтроки);
	Возврат Новый КвалификаторыСтроки(ДлинаСтроки);
КонецФункции

Функция ЭтоБСП()
	
	Возврат Метаданные.ОбщиеМодули.Найти("ДополнительныеОтчетыИОбработки") <> Неопределено;
	
КонецФункции

Функция ЭтоSSL()
	
	Возврат Метаданные.ОбщиеМодули.Найти("AdditionalReportsAndDataProcessors") <> Неопределено;
	
КонецФункции

Функция ПересоздатьГруппуКонтейнер(ГруппаРодитель, Знач Форма)
	ГруппаКонтейнер = Форма.Элементы.Найти("ГруппаКонтейнер");
	Если ГруппаКонтейнер <> Неопределено Тогда
		Форма.Элементы.Удалить(ГруппаКонтейнер);
	КонецЕсли;
	
	ГруппаКонтейнер = Форма.Элементы.Добавить("ГруппаКонтейнер", Тип("ГруппаФормы"), ГруппаРодитель);
	ГруппаКонтейнер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКонтейнер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаКонтейнер.ОтображатьЗаголовок = Ложь;
	ГруппаКонтейнер.РастягиватьПоГоризонтали = Истина;
	ГруппаКонтейнер.РастягиватьПоВертикали = Истина;
	ГруппаКонтейнер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Возврат ГруппаКонтейнер;
КонецФункции

Процедура ЗаполнитьДанныеФормы(Форма, Данные)
	Для Каждого КлючЗначение Из Данные Цикл
		ИмяРеквизита = КлючЗначение.Ключ;
		ДанныеРеквизита = КлючЗначение.Значение;
		
		Если ДанныеРеквизита.Тип = "Таблица" Тогда
			Таблица = Форма[ИмяРеквизита];
			Таблица.Очистить();
			ДобавитьДеревоСтроки(Таблица, ДанныеРеквизита.Строки, Ложь);
			Продолжить;
		КонецЕсли;
		
		Если ДанныеРеквизита.Тип = "Дерево" Тогда
			ЭлементыДерева = Форма[ИмяРеквизита].ПолучитьЭлементы();
			ЭлементыДерева.Очистить();
			ДобавитьДеревоСтроки(ЭлементыДерева, ДанныеРеквизита.Строки, Истина);
			Продолжить;
		КонецЕсли;
		
		Форма[ИмяРеквизита] = ДанныеРеквизита.Значение;
	КонецЦикла;
КонецПроцедуры

Процедура ИзменитьРеквизитыФормы(Форма, ОписанияРеквизитов)
	МассивУдаляемых = Новый Массив;
	СтрокиДерева = Форма.ДеревоСуществующихРеквизитов.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		МассивУдаляемых.Добавить(СтрокаДерева.ИмяРеквизита);
	КонецЦикла;
	СтрокиДерева.Очистить();
	
	МассивРеквизитов = Новый Массив;
	ЗаполнитьМассивРеквизитов(ОписанияРеквизитов, МассивРеквизитов, СтрокиДерева);
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов, МассивУдаляемых);
КонецПроцедуры

Процедура ЗаполнитьМассивРеквизитов(ОписанияРеквизитов, МассивРеквизитов, СтрокиДерева, ИмяВладельца = Неопределено)
	Для Каждого СтрокаРеквизит Из ОписанияРеквизитов Цикл
		ОписаниеТипа = ПолучитьОписаниеТипов(СтрокаРеквизит.ОписаниеТипов);
		
		ДобавляемыйРеквизит = Новый РеквизитФормы(СтрокаРеквизит.Имя, ОписаниеТипа, ИмяВладельца);
		МассивРеквизитов.Добавить(ДобавляемыйРеквизит);
		
		НоваяСтрокаДерева = СтрокиДерева.Добавить();
		НоваяСтрокаДерева.ИмяРеквизита = СтрокаРеквизит.Имя;
		НоваяСтрокаДерева.ИмяРеквизитаБезПрефикса = СтрокаРеквизит.ИмяРеквизитаБезПрефикса;
		
		ЗаполнитьМассивРеквизитов(СтрокаРеквизит.Подчиненные, МассивРеквизитов, НоваяСтрокаДерева.ПолучитьЭлементы(), СтрокаРеквизит.Имя);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьЭлементыФормы(Форма, Элементы, Группа)
	Для Каждого Элемент Из Элементы Цикл
		ДобавитьЭлементФормы(Форма, Элемент, Группа);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьЭлементФормы(Форма, СхемаЭлемента, Родитель)
	Если СхемаЭлемента.Тип = "Форма" Тогда
		НовыйЭлементФормы = Родитель;
	Иначе
		НовыйЭлементФормы = Форма.Элементы.Добавить(СхемаЭлемента.Имя, Тип(СхемаЭлемента.Тип), Родитель);
		ДобавитьНаборСвойствЭлементаФормы(СхемаЭлемента, НовыйЭлементФормы);
	КонецЕсли;
	
	Для Каждого Подчиненный Из СхемаЭлемента.ПодчиненныеЭлементы Цикл
		ДобавитьЭлементФормы(Форма, Подчиненный, НовыйЭлементФормы);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьНаборСвойствЭлементаФормы(СхемаЭлемента, НовыйЭлементФормы)
	СвойствоВид = "Вид";
	Если СхемаЭлемента.НаборСвойств.Свойство(СвойствоВид) Тогда
		ЗначениеСвойства = ПолучитьЗначениеСвойства(СхемаЭлемента.НаборСвойств[СвойствоВид]);
		НовыйЭлементФормы[СвойствоВид] = ЗначениеСвойства;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СхемаЭлемента.НаборСвойств Цикл
		ИмяСвойства = КлючЗначение.Ключ;
		ЗначениеСвойства = ПолучитьЗначениеСвойства(КлючЗначение.Значение);
		
		ИсключаемоеСвойство = ИмяСвойства = "Тип"
			ИЛИ ИмяСвойства = СвойствоВид
			ИЛИ ИмяСвойства = "Путь"
			ИЛИ ИмяСвойства = "Имя";
		
		Если ИсключаемоеСвойство Тогда
			Продолжить;
		КонецЕсли;
		
		Если КлючЗначение.Значение.Тип = "СписокЗначений" Тогда
			Если ТипЗнч(ЗначениеСвойства) = Тип("СписокЗначений") Тогда
				СкопироватьСписокЗначений(ЗначениеСвойства, НовыйЭлементФормы[ИмяСвойства]);
			Иначе
				НовыйЭлементФормы[ИмяСвойства].ЗагрузитьЗначения(ЗначениеСвойства);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементФормы[ИмяСвойства] = ЗначениеСвойства;
	КонецЦикла;
КонецПроцедуры

Процедура СкопироватьСписокЗначений(Источник, Приемник)
	Для Каждого ЭлементСписка Из Источник Цикл
		Приемник.Добавить(
			ЭлементСписка.Значение,
			ЭлементСписка.Представление,
			ЭлементСписка.Пометка,
			ЭлементСписка.Картинка);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЗначениеСвойства(ЗначениеСвойства)
	Если ЗначениеСвойства.Тип = "СписокЗначений" Тогда
		Если ТипЗнч(ЗначениеСвойства.Значение) = Тип("СписокЗначений") Тогда
			Возврат ЗначениеСвойства.Значение;
		КонецЕсли;
		Если ТипЗнч(ЗначениеСвойства.Значение) = Тип("Массив") Тогда
			Возврат ЗначениеСвойства.Значение;
		КонецЕсли;
		
		Результат = Новый Массив;
		Результат.Добавить(ЗначениеСвойства.Значение);
		
		Возврат Результат;
	КонецЕсли;
	Если ЗначениеСвойства.Тип = "Число"
		ИЛИ ЗначениеСвойства.Тип = "Строка"
		ИЛИ ЗначениеСвойства.Тип = "Булево" Тогда
		Возврат ЗначениеСвойства.Значение;
	КонецЕсли;
	
	Возврат Вычислить(ЗначениеСвойства.Тип + "." + ЗначениеСвойства.Значение);
КонецФункции

Процедура ДобавитьДеревоСтроки(ЭлементыДерева, Строки, ЭтоДерево)
	Для Каждого Строка Из Строки Цикл
		СтрокаДерева = ЭлементыДерева.Добавить();
		
		Для Каждого КлючЗначение Из Строка.Значения Цикл
			СтрокаДерева[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЦикла;
		
		Если ЭтоДерево Тогда
			ДобавитьДеревоСтроки(СтрокаДерева.ПолучитьЭлементы(), Строка.Строки, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Иначе

ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");

#КонецЕсли