#Область ОписаниеПеременных

&НаКлиенте
Перем мПромпт;

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаКлиенте
Функция Отправить(Сообщение, Контекст, Настройки) Экспорт
	МассивСообщений = СформироватьСообщения(Сообщение, Контекст);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("messages", МассивСообщений);
	ПараметрыЗапроса.Вставить("model", Настройки.МодельИИ); 
	ПараметрыЗапроса.Вставить("stream", Ложь); 
	ТелоЗапрос = СтруктураВJSON(ПараметрыЗапроса);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Authorization", "Bearer " + Настройки.ТокенИИ);
	
	HTTPЗапрос = Новый HTTPЗапрос("/api/v1/chat/completions", ЗаголовкиHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапрос);
	
	HTTPСоединение = Новый HTTPСоединение("openrouter.ai", , , , , 240, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ТелоОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = JSONВСтруктуру(ТелоОтвет);
	
	Если ОтветJSON.Свойство("error") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветJSON.choices.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = ОтветJSON.choices[0].message.content;
	
	Результат = ОбработатьРезультат(Результат);
	Возврат Результат;	
КонецФункции

&НаКлиенте
Функция ПолучитьНастройки() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ТокенИИ");
	Результат.Вставить("МодельИИ");
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция Парсер()
	Возврат ВладелецФормы.Парсер();
КонецФункции

&НаКлиенте
Функция Форматтер()
	Возврат ВладелецФормы.Форматтер();
КонецФункции

&НаКлиенте
Функция ОбработатьРезультат(Знач Результат)
	Результат = СокрЛП(Результат);
	МаркерКода = "```";
	НачальнаяПозиция = СтрНайти(Результат, МаркерКода);
	Если НачальнаяПозиция > 0 Тогда
		Результат = Сред(Результат, НачальнаяПозиция + СтрДлина(МаркерКода));
	КонецЕсли;

	КонечнаяПозиция = СтрНайти(Результат, МаркерКода, НаправлениеПоиска.СКонца);
	Если КонечнаяПозиция > 0 Тогда
		Результат = Лев(Результат, КонечнаяПозиция - 1);
	КонецЕсли;
	
	Результат = СокрЛП(Результат);
	
	Попытка
		ФормаГруппы = Парсер().Разобрать(Результат);
		РезультатФормат = Форматтер().Форматировать(ФормаГруппы);
	Исключение
		Возврат СокрЛП(Результат);
	КонецПопытки;
	
	Возврат СокрЛП(РезультатФормат);
КонецФункции

&НаКлиенте
Функция СтруктураВJSON(Объект)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

&НаКлиенте
Функция JSONВСтруктуру(СтрокаJSON) Экспорт
	// Выделяем в строке JSON часть именно JSON	
	// Находим позицию первого открывающего фигурного скобки
	ПозицияНачала = СтрНайти(СтрокаJSON, "{");
	Если ПозицияНачала = 0 Тогда
		// Если не найдено, возвращаем Неопределено или можно вызвать ошибку
		Возврат Неопределено;
	КонецЕсли;
	
	// Находим позицию последнего закрывающего фигурного скобки, используя поиск с конца
	ПозицияКонца = СтрНайти(СтрокаJSON, "}", НаправлениеПоиска.СКонца);
	Если ПозицияКонца = 0 Тогда
		// Если закрывающая скобка не найдена, возвращаем Неопределено
		Возврат Неопределено;
	КонецЕсли;
	
	// Вычисляем длину фрагмента с JSON: от первого "{" до последнего "}" включительно
	ДлинаФрагмента = ПозицияКонца - ПозицияНачала + 1;
	
	// Извлекаем корректную часть JSON из строки
	ЧистыйJSON = Сред(СтрокаJSON, ПозицияНачала, ДлинаФрагмента);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЧистыйJSON);
	
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СформироватьСообщения(Знач Сообщение, Контекст)
	Сообщения = Новый Массив;
	
	Промпт = ПолучитьПромпт();
	Сообщения.Добавить(Новый Структура("role,content", "system", Промпт));
	
	Для Каждого ПредыдущееСообщение Из Контекст Цикл
		Сообщения.Добавить(ПолучитьСообщение(ПредыдущееСообщение.Сообщение, ПредыдущееСообщение.ЭтоВходящее));
	КонецЦикла;
	
	Сообщения.Добавить(ПолучитьСообщение(Сообщение, Ложь));
	
	Возврат Сообщения;
КонецФункции

&НаКлиенте
Функция ПолучитьСообщение(Содержание, ЭтоВходящее)
	Результат = Новый Структура;
	Результат.Вставить("role", ?(ЭтоВходящее, "assistant", "user"));
	Результат.Вставить("content", Содержание);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПромпт()
	Если ПустаяСтрока(мПромпт) Тогда
		мПромпт = ПолучитьПромптНаСервере();
	КонецЕсли;
	
	Возврат мПромпт;
КонецФункции

&НаСервере
Функция ПолучитьПромптНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет("Промпт").ПолучитьТекст();
КонецФункции

#КонецОбласти
