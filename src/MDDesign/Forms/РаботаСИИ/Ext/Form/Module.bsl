#Область ОписаниеПеременных

&НаКлиенте
Перем мПромпт;

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаКлиенте
Функция Отправить(Сообщение, Контекст, Настройки) Экспорт  
	Если НЕ ПустаяСтрока(Настройки.ПровайдерИИ)
		И НЕ ПустаяСтрока(Настройки.МодельИИ)
		И НЕ ПустаяСтрока(Настройки.ТокенИИ) Тогда
		Возврат ОтправитьИИПоНастройкам(Сообщение, Контекст, Настройки);
	КонецЕсли;
	
	Возврат ОтправитьТестовыйИИ(Сообщение, Контекст);
КонецФункции

&НаКлиенте
Функция ПолучитьНастройки() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ПровайдерИИ");
	Результат.Вставить("ТокенИИ");
	Результат.Вставить("МодельИИ");
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция СлужебныеФункции()
	Возврат ВладелецФормы.СлужебныеФункции();
КонецФункции

&НаКлиенте
Функция ОтправитьИИПоНастройкам(Сообщение, Контекст, Настройки)
	МассивСообщений = СформироватьСообщения(Сообщение, Контекст, Истина);

	СтруктураАдреса = СлужебныеФункции().РазобратьURL(Настройки.ПровайдерИИ);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("messages", МассивСообщений);
	ПараметрыЗапроса.Вставить("model", Настройки.МодельИИ); 
	ПараметрыЗапроса.Вставить("stream", Ложь); 
	ТелоЗапрос = СлужебныеФункции().СтруктураВJSON(ПараметрыЗапроса);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Authorization", "Bearer " + Настройки.ТокенИИ);
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураАдреса.Адрес, ЗаголовкиHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапрос);
	
	ЗащищенноеСоединение = Неопределено;
	Если СтруктураАдреса.Протокол = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураАдреса.Сервер, , , , , 240, ЗащищенноеСоединение);
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	ТелоОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
	ОтветJSON = СлужебныеФункции().JSONВСтруктуру(ТелоОтвет);
	
	Если ОтветJSON.Свойство("error") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветJSON.choices.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = ОтветJSON.choices[0].message.content;
	
	Результат = ОбработатьРезультат(Результат);
	Возврат Результат;	
КонецФункции

&НаКлиенте
Функция ОтправитьТестовыйИИ(Сообщение, Контекст)
	МассивСообщений = СформироватьСообщения(Сообщение, Контекст, Ложь);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("messages", МассивСообщений);
	ТелоЗапрос = СлужебныеФункции().СтруктураВJSON(ПараметрыЗапроса);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	
	HTTPЗапрос = Новый HTTPЗапрос("", ЗаголовкиHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапрос);
	
	HTTPСоединение = Новый HTTPСоединение("ai.crimsongold.ru", , , , , 240, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ТелоОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = СлужебныеФункции().JSONВСтруктуру(ТелоОтвет);
	
	Результат = Неопределено;
	Если НЕ ОтветJSON.Свойство("content", Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = ОбработатьРезультат(Результат);
	Возврат Результат;	
КонецФункции

&НаКлиенте
Функция Парсер()
	Возврат ВладелецФормы.Парсер();
КонецФункции

&НаКлиенте
Функция Форматтер()
	Возврат ВладелецФормы.Форматтер();
КонецФункции

&НаКлиенте
Функция ОбработатьРезультат(Знач Результат)
	Результат = СокрЛП(Результат);
	МаркерКода = "```";
	НачальнаяПозиция = СтрНайти(Результат, МаркерКода);
	Если НачальнаяПозиция > 0 Тогда
		Результат = Сред(Результат, НачальнаяПозиция + СтрДлина(МаркерКода));
	КонецЕсли;

	КонечнаяПозиция = СтрНайти(Результат, МаркерКода, НаправлениеПоиска.СКонца);
	Если КонечнаяПозиция > 0 Тогда
		Результат = Лев(Результат, КонечнаяПозиция - 1);
	КонецЕсли;
	
	Результат = СокрЛП(Результат);
	
	Попытка
		ФормаГруппы = Парсер().Разобрать(Результат);
		РезультатФормат = Форматтер().Форматировать(ФормаГруппы);
	Исключение
		Возврат СокрЛП(Результат);
	КонецПопытки;
	
	Возврат СокрЛП(РезультатФормат);
КонецФункции

&НаКлиенте
Функция СформироватьСообщения(Знач Сообщение, Контекст, ДобавлятьПромпт)
	Сообщения = Новый Массив;
	
	Если ДобавлятьПромпт Тогда
		Промпт = ПолучитьПромпт();
		Сообщения.Добавить(Новый Структура("role,content", "system", Промпт));
	КонецЕсли;
	
	Для Каждого ПредыдущееСообщение Из Контекст Цикл
		Сообщения.Добавить(ПолучитьСообщение(ПредыдущееСообщение.Сообщение, ПредыдущееСообщение.ЭтоВходящее));
	КонецЦикла;
	
	Сообщения.Добавить(ПолучитьСообщение(Сообщение, Ложь));
	
	Возврат Сообщения;
КонецФункции

&НаКлиенте
Функция ПолучитьСообщение(Содержание, ЭтоВходящее)
	Результат = Новый Структура;
	Результат.Вставить("role", ?(ЭтоВходящее, "assistant", "user"));
	Результат.Вставить("content", Содержание);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПромпт()
	Если ПустаяСтрока(мПромпт) Тогда
		мПромпт = ПолучитьПромптНаСервере();
	КонецЕсли;
	
	Возврат мПромпт;
КонецФункции

&НаСервере
Функция ПолучитьПромптНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет("Промпт").ПолучитьТекст();
КонецФункции

#КонецОбласти
