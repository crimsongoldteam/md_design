#Область ПрограммныйИнтерфейс

// Формирует строковое представление операции с учетом её названия и параметров.
// 
// Параметры:
//  Название        - Строка - Название операции
//  МассивПараметры - Массив - Массив параметров операции
// 
// Возвращаемое значение:
// Строка - Строковое представление операции с параметрами
&НаКлиенте
Функция ПолучитьПредставлениеОперации(Название, МассивПараметры) Экспорт

	Результат = Название;
	Если МассивПараметры.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	Возврат Результат + "(" + СтрСоединить(МассивПараметры,", ") + ")";

КонецФункции

// Функция возвращает текстовое представление типа 'Дата' на основе его описания. Если тип 'Дата' отсутствует в описании, возвращается 'Неопределено'. Также учитываются части даты и параметр 'ДляФорматтера' для формирования результата.
// 
// Параметры:
//  ОписаниеТипов         - Структура - Описание типов, содержащее информацию о типах данных, включая 'Дата'.
//  ПредставлениеНазвания - Строка    - Название типа, которое будет использоваться для формирования представления.
//  ДляФорматтера         - Булево    - Флаг, указывающий, используется ли метод для форматтера. Если 'Истина', часть даты добавляется без префикса 'ЧастиДаты.'.
// 
// Возвращаемое значение:
// Строка - Текстовое представление типа 'Дата' или 'Неопределено', если тип 'Дата' отсутствует.
&НаКлиенте
Функция ПолучитьПредставлениеТипаДаты(ОписаниеТипов, ПредставлениеНазвания, ДляФорматтера) Экспорт

	Если ОписаниеТипов.Типы.Найти("Дата") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПараметры = Новый Массив;  
	Если ОписаниеТипов.ЧастиДаты <> Неопределено
		И ОписаниеТипов.ЧастиДаты <> "ДатаВремя" Тогда  
		ТекЧастиДаты = ?(ДляФорматтера, "", "ЧастиДаты.") + ОписаниеТипов.ЧастиДаты;
		МассивПараметры.Добавить(ТекЧастиДаты);
	КонецЕсли;
	
	Если НЕ ДляФорматтера И МассивПараметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьПредставлениеОперации(ПредставлениеНазвания, МассивПараметры);

КонецФункции

// Функция возвращает представление типа строки на основе описания типов и параметров.
// 
// Параметры:
//  ОписаниеТипов         - Структура - Структура, содержащая описание типов, включая информацию о длине строки.
//  ПредставлениеНазвания - Строка    - Название типа, которое будет использоваться в представлении.
//  ДляФорматтера         - Булево    - Флаг, указывающий, используется ли представление для форматтера.
// 
// Возвращаемое значение:
// Строка - Представление типа строки или Неопределено, если тип не найден или параметры отсутствуют.
&НаКлиенте
Функция ПолучитьПредставлениеТипаСтроки(ОписаниеТипов, ПредставлениеНазвания, ДляФорматтера) Экспорт

	Если ОписаниеТипов.Типы.Найти("Строка") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПараметры = Новый Массив;  
	Если ОписаниеТипов.ДлинаСтроки <> Неопределено
		И ОписаниеТипов.ДлинаСтроки <> 0 Тогда
		МассивПараметры.Добавить(ОписаниеТипов.ДлинаСтроки);
	КонецЕсли;
	
	Если НЕ ДляФорматтера И МассивПараметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьПредставлениеОперации(ПредставлениеНазвания, МассивПараметры);

КонецФункции

// Функция возвращает текстовое представление типа числа на основе его описания, включая длину и точность числа.
// 
// Параметры:
//  ОписаниеТипов         - ОписаниеТипов - Структура, содержащая описание типов, включая информацию о числе.
//  ПредставлениеНазвания - Строка        - Название типа, которое будет использоваться для формирования представления.
//  ДляФорматтера         - Булево        - Флаг, указывающий, используется ли функция для форматтера.
// 
// Возвращаемое значение:
// Строка - Текстовое представление типа числа с указанными параметрами или Неопределено, если тип не найден.
&НаКлиенте
Функция ПолучитьПредставлениеТипаЧисла(ОписаниеТипов, ПредставлениеНазвания, ДляФорматтера) Экспорт

	Если ОписаниеТипов.Типы.Найти("Число") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПараметры = Новый Массив;  
	Если ОписаниеТипов.ДлинаЧисла <> Неопределено
		И ОписаниеТипов.ДлинаЧисла <> 0 Тогда
		МассивПараметры.Добавить(ОписаниеТипов.ДлинаЧисла);
	КонецЕсли;
	
	Если ОписаниеТипов.ТочностьЧисла <> Неопределено
		И ОписаниеТипов.ТочностьЧисла <> 0 Тогда
		МассивПараметры.Добавить(ОписаниеТипов.ТочностьЧисла);
	КонецЕсли;
	
	Если НЕ ДляФорматтера И МассивПараметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьПредставлениеОперации(ПредставлениеНазвания, МассивПараметры);

КонецФункции

&НаКлиенте
Функция ПривестиЗначениеКДопустимомуТипу(ОписаниеТипов, Значение) Экспорт
	Результат = Значение;
	Если ОписаниеТипов.Типы.Найти("Дата") <> Неопределено Тогда
		Результат = СтрокуВДату(Значение); 
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеТипов.Типы.Найти("Число") <> Неопределено Тогда
		Результат = СтрокуВЧисло(Значение); 
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

// Определяет точность числа, вычисляя количество знаков после десятичной точки.
// 
// Параметры:
//  Значение - Строка - Строковое представление числа, для которого определяется точность.
// 
// Возвращаемое значение:
// Число - Количество знаков после десятичной точки.
&НаКлиенте
Функция ПолучитьТочностьЧисла(Знач Значение) Экспорт

	Значение = СтрЗаменить(Значение, ",", ".");
	МассивЧастейЧисла = СтрРазделить(Значение, ".");
	
	Если МассивЧастейЧисла.Количество() = 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат СтрДлина(МассивЧастейЧисла[1]);

КонецФункции

// Определяет, является ли строка корректным представлением времени.
// 
// Параметры:
//  СтрокаВремя - Строка - Строка, представляющая время, которое необходимо проверить.
// 
// Возвращаемое значение:
// Булево - Истина, если строка является корректным временем, иначе Ложь.
&НаКлиенте
Функция ЭтоВремя(Знач СтрокаВремя) Экспорт

	Если ЭтоПустаяСтрокаВремя(СтрокаВремя) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если СтрДлина(СтрокаВремя) = 4 ИЛИ СтрДлина(СтрокаВремя) = 7 Тогда
		СтрокаВремя = "0" + СтрокаВремя;
	КонецЕсли;
	
	СтрокаВремя = "00010101" + СтрЗаменить(СтрокаВремя, ":", "");
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата");
	Возврат ОписаниеДаты.ПривестиЗначение(СтрокаВремя) <> '00010101';

КонецФункции

// Проверяет, является ли строка корректной датой в формате 'дд.мм.гггг' или 'дд.мм.гг'.
// 
// Параметры:
//  СтрокаДата - Строка - Строка, которая проверяется на соответствие формату даты.
// 
// Возвращаемое значение:
// Булево - Истина, если строка является корректной датой, иначе Ложь.
&НаКлиенте
Функция ЭтоДата(СтрокаДата) Экспорт
	Если ЭтоПустаяСтрокаДата(СтрокаДата) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрДлина(СтрокаДата) <> 8
		И СтрДлина(СтрокаДата) <> 10 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если Сред(СтрокаДата, 3, 1) <> "." 
		ИЛИ Сред(СтрокаДата, 6, 1) <> "." Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	День = Лев(СтрокаДата, 2);
	Месяц = Сред(СтрокаДата, 4, 2);
	Год = Сред(СтрокаДата, 7);  
	
	Если СтрДлина(Год) = 2 Тогда
		Год = "20" + Год;
	КонецЕсли;	 
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата");
	
	Возврат ОписаниеДаты.ПривестиЗначение(Год + Месяц + День) <> '00010101';

КонецФункции

// Определяет, является ли переданная строка датой, временем или датой и временем, и возвращает соответствующее значение.
// 
// Параметры:
//  СтрокаДатаВремя - Строка - Строка, которая проверяется на соответствие формату даты, времени или даты и времени.
// 
// Возвращаемое значение:
// Строка или Неопределено - Возвращает 'Дата', 'Время', 'ДатаВремя' или Неопределено в зависимости от результата проверки.
&НаКлиенте
Функция ЭтоДатаВремя(Знач СтрокаДатаВремя) Экспорт

	СтрЧастиДаты = СтрРазделить(СтрокаДатаВремя, " ");
	
	Если СтрЧастиДаты.Количество() > 2 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ЭтоДата = ЭтоДата(СтрЧастиДаты[0]); 
	
	Если ЭтоДата И СтрЧастиДаты.Количество() = 1 Тогда
		Возврат "Дата";	
	КонецЕсли;
	
	Если НЕ ЭтоДата И СтрЧастиДаты.Количество() = 2 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Если СтрЧастиДаты.Количество() = 2 Тогда		
		Если НЕ ЭтоДата ИЛИ НЕ ЭтоВремя(СтрЧастиДаты[1]) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат "ДатаВремя";
	КонецЕсли;
	
	Если ЭтоВремя(СтрЧастиДаты[0]) Тогда
		Возврат "Время";
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

// Определяет, является ли переданное значение числом
// 
// Параметры:
//  Значение - Строка - Значение, которое необходимо проверить на принадлежность к числу
// 
// Возвращаемое значение:
// Булево - Истина, если значение является числом, иначе Ложь
&НаКлиенте
Функция ЭтоЧисло(Знач Значение) Экспорт

	Значение = СокрЛП(Значение);
	
	Значение = СтрЗаменить(Значение, ",", ".");
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если СтрНачинаетсяС(Значение, "0")
		И (СтрокаБезНулей = "" ИЛИ СтрокаБезНулей = ".") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	Возврат ОписаниеЧисла.ПривестиЗначение(Значение) <> 0;

КонецФункции

&НаКлиенте
Функция СтрокуВДату(Знач Значение) Экспорт
	ТекЧастиДаты = ЭтоДатаВремя(Значение);
	
	Если ТекЧастиДаты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	СтрЧастиДаты = СтрРазделить(Значение, " ");
	
	РезультатДата = "00010101";
	РезультатВремя = "000000";
	
	Если ТекЧастиДаты <> "Время" Тогда
		РезультатДата = СтрокуВДатуГМД(СтрЧастиДаты[0]);	
	КонецЕсли;
	
	Если ТекЧастиДаты = "Время" Тогда
		РезультатВремя = СтрокуВоВремя(СтрЧастиДаты[0]);	
	КонецЕсли;

	Если ТекЧастиДаты = "ДатаВремя" Тогда
		РезультатВремя = СтрокуВоВремя(СтрЧастиДаты[1]);	
	КонецЕсли;
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата");
	Возврат ОписаниеДаты.ПривестиЗначение(РезультатДата + РезультатВремя);
КонецФункции

&НаКлиенте
Функция СтрокуВЧисло(Знач Значение) Экспорт 
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	Возврат ОписаниеЧисла.ПривестиЗначение(Значение);
КонецФункции 

&НаКлиенте
Функция РазобратьURL(Знач URL) Экспорт
	
	Протокол = "";
	Позиция = СтрНайти(URL, "://");
	Если Позиция > 0 Тогда
		Протокол = Лев(URL, Позиция - 1);
		URL = Сред(URL, Позиция + 3);
	КонецЕсли;
	
	Сервер = "";
	Позиция = СтрНайти(URL, "/");
	Если Позиция > 0 Тогда
		Сервер = Лев(URL, Позиция - 1);
		URL = Сред(URL, Позиция);
	Иначе
		Сервер = URL;
		URL = "";
	КонецЕсли;
	
	Адрес = URL;
	
	Результат = Новый Структура;
	Результат.Вставить("Сервер", Сервер);
	Результат.Вставить("Протокол", Протокол);
	Результат.Вставить("Адрес", Адрес);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СтруктураВJSON(Объект) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

&НаКлиенте
Функция JSONВСтруктуру(СтрокаJSON) Экспорт
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ЧтениеJSON.Закрыть();
	Возврат Результат;
КонецФункции


#КонецОбласти   

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЭтоПустаяСтрокаДата(СтрокаДата)
	Если СтрокаДата = "01.01.01" Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтрокаДата = "01.01.0001" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции 

&НаКлиенте
Функция ЭтоПустаяСтрокаВремя(СтрокаВремя)
	Возврат СтрокаВремя = "0:00"
		ИЛИ СтрокаВремя = "00:00" 
		ИЛИ СтрокаВремя = "0:00:00"
		ИЛИ СтрокаВремя = "00:00:00";  
КонецФункции 

&НаКлиенте
Функция СтрокуВДатуГМД(СтрокаДата)
	Если ЭтоПустаяСтрокаДата(СтрокаДата) Тогда
		Возврат "00010101";	
	КонецЕсли;
	
	День = Лев(СтрокаДата, 2);
	Месяц = Сред(СтрокаДата, 4, 2);
	Год = Сред(СтрокаДата, 7);  
	
	Если СтрДлина(Год) = 2 Тогда
		Год = "20" + Год;
	КонецЕсли;	 

	Возврат Год + Месяц + День;
КонецФункции

&НаКлиенте
Функция СтрокуВоВремя(Знач СтрокаВремя)
	Если ЭтоПустаяСтрокаВремя(СтрокаВремя) Тогда
		Возврат "000000";	
	КонецЕсли;

	СтрокаВремя = СтрЗаменить(СтрокаВремя, ":", "");
	
	Если СтрДлина(СтрокаВремя) = 3 ИЛИ СтрДлина(СтрокаВремя) = 5 Тогда
		СтрокаВремя = "0" + СтрокаВремя;
	КонецЕсли;
	
	Если СтрДлина(СтрокаВремя) = 4 Тогда
		СтрокаВремя = СтрокаВремя + "00";
	КонецЕсли;  
	
	Возврат СтрокаВремя;
КонецФункции

#КонецОбласти

