// MIT License

// Copyright (c) 2025 Zherebtsov Nikita <nikita@crimsongold.ru>

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/crimsongoldteam/md_design

#Область ОписаниеПеременных

// Структура, хранящие в себе инициализированные модули
&НаКлиенте
Перем мВсеСвойства;

// Структура, хранящие соответстие русских и английских названий элементов
&НаКлиенте
Перем мТипыЭлементов;

// Структура, хранящие в себе соответствие названий цветов их внутренним названиям (на английском)
&НаКлиенте
Перем мЦвета;

&НаКлиенте
// Структура для кэширования данных
Перем мКэш;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура Инициализировать() Экспорт
	Данные = ПолучитьДанныеНаСервере();
	мВсеСвойства = Данные.ВсеСвойства;
	мТипыЭлементов = Данные.ТипыЭлементов;
	мЦвета = Данные.Цвета;
	
	мКэш = Новый Структура;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеСвойстваДляПалитры(ТаблицаПалитра) Экспорт
	МассивИсключений = СтрРазделить("Тип,Вид,ПутьКДанным,СписокЗначений", ",");
	
	Для Каждого КЗТипЭлемента Из мВсеСвойства Цикл
		ТипЭлемента = КЗТипЭлемента.Ключ;
		
		Для Каждого КЗВидЭлемента Из КЗТипЭлемента.Значение Цикл
			ВидЭлемента = КЗВидЭлемента.Ключ;
			СвойстваПоВиду = КЗВидЭлемента.Значение;
			Для Каждого ТекСвойство Из СвойстваПоВиду.Свойства Цикл
				Если МассивИсключений.Найти(ТекСвойство) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначениеСвойства = СвойстваПоВиду.ТипыСвойств[ТекСвойство];
				
				СтрокаТаблица = ТаблицаПалитра.Добавить();
				СтрокаТаблица.ТипЭлемента = ТипЭлемента;
				СтрокаТаблица.ВидЭлемента = ВидЭлемента;
				СтрокаТаблица.ИмяПоля = ТекСвойство;
				СтрокаТаблица.ПредставлениеПоля = ЗначениеСвойства.Представление;
				СтрокаТаблица.ЗначениеПоУмолчанию = ЗначениеСвойства.ЗначениеПоУмолчанию;
				СтрокаТаблица.Основное = ЗначениеСвойства.Основное;
				СтрокаТаблица.Категория = ПолучитьКатегориюСвойства(ЗначениеСвойства.ТипЗначения);
				
				Если ЗначениеСвойства.ТипЗначения = "Цвет" Тогда
					НовыйЦвет = Новый Цвет; // BSLLS:StyleElementConstructors-off
					СтрокаТаблица.ЗначениеПоУмолчанию = НовыйЦвет;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКатегориюСвойства(ТипЗначения) Экспорт
	Если ТипЗначения = "Булево"
		ИЛИ ТипЗначения = "БулевоНеопределено" Тогда
		Возврат "Булево";
	ИначеЕсли ТипЗначения = "Цвет" Тогда
		Возврат "Цвет";
	ИначеЕсли ТипЗначения = "Число" Тогда
		Возврат "Число";
	ИначеЕсли ТипЗначения = "Строка" Тогда
		Возврат "Строка";
	ИначеЕсли ТипЗначения = "СписокЗначений" Тогда
		Возврат "СписокЗначений";
	Иначе
		Возврат "Список";
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСвойствПоТипу(ТипЭлемента, ВидЭлемента, ИмяСвойства) Экспорт
	Результат = Новый Массив;
	Если НЕ мВсеСвойства.Свойство(ТипЭлемента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваПоВиду = мВсеСвойства[ТипЭлемента];
	
	Если НЕ СвойстваПоВиду.Свойство(ВидЭлемента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрСвойство = СвойстваПоВиду[ВидЭлемента].ТипыСвойств[ИмяСвойства];
	
	Для Каждого ТекЗначение Из СтрСвойство.Значения Цикл
		Результат.Добавить(Новый Структура("Ключ,Значение", ТекЗначение, СтрСвойство.ПредставленияЗначений[ТекЗначение]));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьАнглийскоеИмяТипаЭлемента(ТипЭлемента) Экспорт
	Если НЕ мТипыЭлементов.Свойство(ТипЭлемента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат мТипыЭлементов[ТипЭлемента];
КонецФункции

&НаКлиенте
Функция ПолучитьАнглийскоеИмяСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства) Экспорт
	Если НЕ мВсеСвойства.Свойство(ТипЭлемента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваПоТипу = мВсеСвойства[ТипЭлемента];
	Если НЕ СвойстваПоТипу.Свойство(ВидЭлемента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойствоПоВиду = СвойстваПоТипу[ВидЭлемента];
	Если НЕ СвойствоПоВиду.ТипыСвойств.Свойство(ИмяСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрСвойство = СвойствоПоВиду.ТипыСвойств[ИмяСвойства];
	Возврат СтрСвойство.ИмяАнгл;
КонецФункции

&НаКлиенте
Функция ПолучитьАнглийскоеЗначениеСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства, ЗначениеСвойства) Экспорт
	Если НЕ мВсеСвойства.Свойство(ТипЭлемента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваПоТипу = мВсеСвойства[ТипЭлемента];
	Если НЕ СвойстваПоТипу.Свойство(ВидЭлемента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойствоПоВиду = СвойстваПоТипу[ВидЭлемента];
	Если НЕ СвойствоПоВиду.ТипыСвойств.Свойство(ИмяСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрСвойство = СвойствоПоВиду.ТипыСвойств[ИмяСвойства];
	
	Если НЕ СтрСвойство.ЗначенияАнгл.Свойство(ЗначениеСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрСвойство.ЗначенияАнгл[ЗначениеСвойства];
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНеизвестныеСвойства(ЭлементАСД) Экспорт
	ЗаполнитьТипыСвойств(ЭлементАСД);
	
	МассивИерархий = СтрРазделить("Элементы,Колонки,Строки", ",");
	Для Каждого Иерархия Из МассивИерархий Цикл
		Если НЕ ЭлементАСД.Свойство(Иерархия) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеЭлемента Из ЭлементАСД[Иерархия] Цикл
			ЗаполнитьНеизвестныеСвойства(ОписаниеЭлемента);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВнутреннееИмяЦвета(ИмяЦвета) Экспорт
	Если НЕ мЦвета.Свойство(ИмяЦвета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат мЦвета[ИмяЦвета];
КонецФункции

&НаКлиенте
Функция ЗаполнитьДанныеВыбораТипа(СписокВыбора) Экспорт
	СписокВыбора.Добавить("Строка", "Строка", , БиблиотекаКартинок.ВидРасчета);
	СписокВыбора.Добавить("Число", "Число", , БиблиотекаКартинок.ВидРасчета);
	СписокВыбора.Добавить("Дата", "Дата", , БиблиотекаКартинок.ВидРасчета);
	СписокВыбора.Добавить("Булево", "Булево", , БиблиотекаКартинок.ВидРасчета);
	
	ОписаниеРазделов = ПолучитьОписаниеРазделовМетаданных();
	
	Метаданные = ПолучитьМетаданныеПоРазделам();
	
	ОписаниеРазделов = ПолучитьОписаниеРазделовМетаданных();
	Для Каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
		Для Каждого ОписаниеМетаданных Из Метаданные[ОписаниеРаздела.ИмяМнож] Цикл
			ПолноеИмя = ОписаниеРаздела.Имя + "." + ОписаниеМетаданных.Имя;
			Представление = СтрШаблон("%1 (%2)", ОписаниеМетаданных.Синоним, ПолноеИмя);
			СписокВыбора.Добавить(ПолноеИмя, Представление, , ОписаниеРаздела.Картинка);
		КонецЦикла;
	КонецЦикла;
	Возврат СписокВыбора;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеРазделовМетаданных() Экспорт
	Если мКэш.Свойство("ОписаниеРазделовМетаданных") Тогда
		Возврат мКэш.ОписаниеРазделовМетаданных;
	КонецЕсли;
	
	Результат = Новый Массив;
	мКэш.Вставить("ОписаниеРазделовМетаданных", Результат);
	
	ПараметрыМетаданных = ПолучитьПараметрыРазделаМетаданных();
	ПараметрыМетаданных.Имя = "Справочник";
	ПараметрыМетаданных.ИмяМнож = "Справочники";
	ПараметрыМетаданных.Представление = НСтр("ru = 'Справочники'");
	ПараметрыМетаданных.ОсновнаяФорма = "ФормаЭлемента";
	ПараметрыМетаданных.ВнутреннееИмя = "Catalog";
	ПараметрыМетаданных.ВнутреннееИмяМнож = "Catalogs";
	ПараметрыМетаданных.Картинка = БиблиотекаКартинок.Справочник;
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("Код", "Code");
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("Наименование", "Description");
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("Владелец", "Owner");
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("ПометкаУдаления", "DeletionMark");
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("Ссылка", "Ref");
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("Предопределенный", "Predefined");
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("Родитель", "Parent");
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("ЭтоГруппа", "IsFolder");
	Результат.Добавить(ПараметрыМетаданных);
	
	ПараметрыМетаданных = ПолучитьПараметрыРазделаМетаданных();
	ПараметрыМетаданных.Имя = "Документ";
	ПараметрыМетаданных.ИмяМнож = "Документы";
	ПараметрыМетаданных.Представление = НСтр("ru = 'Документы'");
	ПараметрыМетаданных.ОсновнаяФорма = "ФормаДокумента";
	ПараметрыМетаданных.ВнутреннееИмя = "Document";
	ПараметрыМетаданных.ВнутреннееИмяМнож = "Documents";
	ПараметрыМетаданных.Картинка = БиблиотекаКартинок.Документ;
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("Дата", "Date");
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("Номер", "Number");
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("ПометкаУдаления", "DeletionMark");
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("Проведен", "Posted");
	ПараметрыМетаданных.СтандартныеРеквизиты.Вставить("Ссылка", "Ref");
	Результат.Добавить(ПараметрыМетаданных);
	
	ПараметрыМетаданных = ПолучитьПараметрыРазделаМетаданных();
	ПараметрыМетаданных.Имя = "Перечисление";
	ПараметрыМетаданных.ИмяМнож = "Перечисления";
	ПараметрыМетаданных.Представление = НСтр("ru = 'Перечисления'");
	ПараметрыМетаданных.ОсновнаяФорма = "Форма";
	ПараметрыМетаданных.ВнутреннееИмя = "Enum";
	ПараметрыМетаданных.ВнутреннееИмяМнож = "Enums";
	ПараметрыМетаданных.Картинка = БиблиотекаКартинок.Перечисление;
	Результат.Добавить(ПараметрыМетаданных);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьРазделМетаданныхПоИмени(Имя) Экспорт
	ОписаниеРазделов = ПолучитьОписаниеРазделовМетаданных();
	Для Каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
		Если ОписаниеРаздела.Имя = Имя Тогда
			Возврат ОписаниеРаздела;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПолучитьМетаданныеПоРазделам() Экспорт
	Если мКэш.Свойство("Метаданные") Тогда
		Возврат мКэш.Метаданные;
	КонецЕсли;
	
	МассивРазделов = Новый Массив;
	ОписаниеРазделов = ПолучитьОписаниеРазделовМетаданных();
	Для Каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
		МассивРазделов.Добавить(ОписаниеРаздела.ИмяМнож);
	КонецЦикла;
	
	Результат = ПолучитьМетаданныеНаСервере(МассивРазделов);
	мКэш.Вставить("Метаданные", Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтандартныеКартинки() Экспорт
	Если мКэш.Свойство("Картинки") Тогда
		Возврат мКэш.Картинки;
	КонецЕсли;
	
	Результат = ПолучитьСтандартныеКартинкиНаСервере();
	мКэш.Вставить("Картинки", Результат);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьСтандартныеКартинкиНаСервере()
	Результат = Новый Структура;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТабличныйДокумент = ОбработкаОбъект.ПолучитьМакет("БиблиотекаКартинок");
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());
	
	ТаблицаЗначений = Построитель.Результат.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Результат.Вставить(СокрЛП(СтрокаТаблицы.Имя), СокрЛП(СтрокаТаблицы.ИмяВнутреннее));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМетаданныеНаСервере(Знач МассивРазделов)
	Результат = Новый Структура;
	Для Каждого Раздел Из МассивРазделов Цикл
		МассивОбъектов = Новый Массив;
		Результат.Вставить(Раздел, МассивОбъектов);
		Для Каждого ОбъектМетаданных Из Метаданные[Раздел] Цикл
			Структура = Новый Структура("Имя,Синоним,ЭтоПрисоединенныеФайлы,ЭтоНедействительный");
			Структура.Имя = ОбъектМетаданных.Имя;
			Структура.Синоним = ОбъектМетаданных.Представление();
			Структура.ЭтоПрисоединенныеФайлы = СтрЗаканчиваетсяНа(НРег(Структура.Имя), "присоединенныефайлы");
			Структура.ЭтоНедействительный = СтрНачинаетсяС(НРег(Структура.Имя), "удалить");
			
			МассивОбъектов.Добавить(Структура);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыРазделаМетаданных()
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("ИмяМнож");
	Результат.Вставить("Представление");
	Результат.Вставить("ОсновнаяФорма");
	Результат.Вставить("ВнутреннееИмя");
	Результат.Вставить("ВнутреннееИмяМнож");
	Результат.Вставить("Картинка");
	Результат.Вставить("СтандартныеРеквизиты", Новый Структура);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТипыСвойств(ЭлементАСД)
	Если НЕ ЭлементАСД.Свойство("НаборСвойств") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ЭлементАСД.ТипЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьСвойствоПоТипу = мВсеСвойства.Свойство(ЭлементАСД.ТипЭлемента);
	Если ЕстьСвойствоПоТипу Тогда
		ВсеСвойстваПоТипу = мВсеСвойства[ЭлементАСД.ТипЭлемента];
	КонецЕсли;
	
	ЕстьСвойствоПоВиду = ВсеСвойстваПоТипу.Свойство(ЭлементАСД.ВидЭлемента);
	Если ЕстьСвойствоПоВиду Тогда
		ВсеСвойстваПоВиду = ВсеСвойстваПоТипу[ЭлементАСД.ВидЭлемента];
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ЭлементАСД.НаборСвойств Цикл
		ИмяСвойства = КлючЗначение.Ключ;
		ЗначениеСвойства = КлючЗначение.Значение;
		Если НЕ ЕстьСвойствоПоТипу Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЕстьСвойствоПоВиду Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВсеСвойстваПоВиду.Свойства.Найти(ИмяСвойства) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеСвойства = ВсеСвойстваПоВиду.ТипыСвойств[ИмяСвойства];
		
		Если НЕ ЭтоКорректноеЗначение(ЗначениеСвойства, ОписаниеСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементАСД.ТипыСвойств.Вставить(ИмяСвойства, ОписаниеСвойства.ТипЗначения);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЭтоКорректноеЗначение(Значение, ОписаниеСвойства)
	Если ОписаниеСвойства.ТипЗначения = "СписокЗначений" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОписаниеСвойства.ТипЗначения = "Картинка" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОписаниеСвойства.ТипЗначения = "Строка" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОписаниеСвойства.ТипЗначения = "Цвет" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОписаниеСвойства.ТипЗначения = "Число" Тогда
		Возврат ЭтоЧисло(Значение);
	КонецЕсли;
	
	Если ОписаниеСвойства.ТипЗначения = "Булево" ИЛИ ОписаниеСвойства.ТипЗначения = "БулевоНеопределено" Тогда
		Возврат ЭтоБулево(Значение);
	КонецЕсли;
	
	Возврат ОписаниеСвойства.ЗначенияАнгл.Свойство(Значение);
КонецФункции

&НаКлиенте
Функция ЭтоЧисло(Знач Значение)
	Если Значение = "0" Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	
	Возврат ОписаниеЧисла.ПривестиЗначение(Значение) <> 0;
КонецФункции

&НаКлиенте
Функция ЭтоБулево(Знач Значение)
	ДопустимыеЗначения = СтрРазделить("да,нет,0,1,истина,ложь", ",");
	
	Возврат ДопустимыеЗначения.Найти(НРег(Значение)) <> Неопределено;
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементПоУИД(ОписаниеЭлементов, УИД) Экспорт
	Если ОписаниеЭлементов.УИД = УИД Тогда
		Возврат ОписаниеЭлементов;
	КонецЕсли;
	
	Если ОписаниеЭлементов.Свойство("Элементы") Тогда
		Для Каждого ОписаниеЭлемента Из ОписаниеЭлементов.Элементы Цикл
			ТекЭлемент = ПолучитьЭлементПоУИД(ОписаниеЭлемента, УИД);
			Если ТекЭлемент <> Неопределено Тогда
				Возврат ТекЭлемент;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОписаниеЭлементов.Свойство("Колонки") Тогда
		Для Каждого ОписаниеЭлемента Из ОписаниеЭлементов.Колонки Цикл
			ТекЭлемент = ПолучитьЭлементПоУИД(ОписаниеЭлемента, УИД);
			Если ТекЭлемент <> Неопределено Тогда
				Возврат ТекЭлемент;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьДанныеНаСервере()
	Результат = Новый Структура;
	Результат.Вставить("ВсеСвойства", ПолучитьСвойстваНаСервере());
	Результат.Вставить("ТипыЭлементов", ПолучитьТипыЭлементовНаСервере());
	Результат.Вставить("Цвета", ПолучитьЦветаНаСервере());
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьСвойстваНаСервере()
	МаксимальноеКоличествоЗначений = 6;
	
	Результат = Новый Структура;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТабличныйДокумент = ОбработкаОбъект.ПолучитьМакет("Свойства");
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());
	
	ТаблицаЗначений = Построитель.Результат.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если Результат.Свойство(СтрокаТаблицы.Тип) Тогда
			СвойстваПоТипуЭлемента = Результат[СтрокаТаблицы.Тип];
		Иначе
			СвойстваПоТипуЭлемента = Новый Структура;
			Результат.Вставить(СтрокаТаблицы.Тип, СвойстваПоТипуЭлемента);
		КонецЕсли;
		
		Если СвойстваПоТипуЭлемента.Свойство(СтрокаТаблицы.Вид) Тогда
			СвойстваПоВидуЭлемента = СвойстваПоТипуЭлемента[СтрокаТаблицы.Вид];
		Иначе
			СвойстваПоВидуЭлемента = Новый Структура("Свойства,ТипыСвойств", Новый Массив, Новый Структура);
			СвойстваПоТипуЭлемента.Вставить(СтрокаТаблицы.Вид, СвойстваПоВидуЭлемента);
		КонецЕсли;
		
		ОписаниеСвойства = ПолучитьСтруктуруСвойства();
		
		ЗаполнитьЗначенияСвойств(ОписаниеСвойства, СтрокаТаблицы, "Представление,ТипЗначения,ИмяАнгл,ЗначениеПоУмолчанию");
		ОписаниеСвойства.Основное = НЕ ПустаяСтрока(СтрокаТаблицы.Основное);
		
		Если ОписаниеСвойства.ТипЗначения = "Булево" Тогда
			Если ПустаяСтрока(ОписаниеСвойства.ЗначениеПоУмолчанию) Тогда
				ОписаниеСвойства.ЗначениеПоУмолчанию = Ложь;
			Иначе
				ОписаниеСвойства.ЗначениеПоУмолчанию = Булево(ОписаниеСвойства.ЗначениеПоУмолчанию);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОписаниеСвойства.ТипЗначения = "БулевоНеопределено" Тогда
			ОписаниеСвойства.ТипЗначения = "Булево";
		КонецЕсли;
		
		Для Сч = 1 По МаксимальноеКоличествоЗначений Цикл
			ТекущееЗначение = СтрокаТаблицы["Значение" + Строка(Сч)];
			Если ПустаяСтрока(ТекущееЗначение) Тогда
				Прервать;
			КонецЕсли;
			ОписаниеСвойства.Значения.Добавить(ТекущееЗначение);
			ОписаниеСвойства.ЗначенияАнгл.Вставить(ТекущееЗначение, СтрокаТаблицы["ЗначениеАнгл" + Строка(Сч)]);
			
			ОписаниеСвойства.ПредставленияЗначений.Вставить(ТекущееЗначение, СтрокаТаблицы["ПредставлениеЗначения" + Строка(Сч)]);
		КонецЦикла;
		
		Если НЕ ЭтоДопустимыйТипСвойства(ОписаниеСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваПоВидуЭлемента.Свойства.Добавить(СтрокаТаблицы.Имя);
		СвойстваПоВидуЭлемента.ТипыСвойств.Вставить(СтрокаТаблицы.Имя, ОписаниеСвойства);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСвойства()
	Результат = Новый Структура();
	Результат.Вставить("Представление", "");
	Результат.Вставить("ТипЗначения", "");
	Результат.Вставить("Значения", Новый Массив);
	Результат.Вставить("ПредставленияЗначений", Новый Структура);
	Результат.Вставить("ИмяАнгл", "");
	Результат.Вставить("ЗначениеПоУмолчанию", Неопределено);
	Результат.Вставить("ЗначенияАнгл", Новый Структура);
	Результат.Вставить("Основное", Ложь);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьТипыЭлементовНаСервере()
	Результат = Новый Структура;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТабличныйДокумент = ОбработкаОбъект.ПолучитьМакет("ТипыЭлементов");
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());
	
	ТаблицаЗначений = Построитель.Результат.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Результат.Вставить(СокрЛП(СтрокаТаблицы.Название), СокрЛП(СтрокаТаблицы.НазваниеАнгл));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьЦветаНаСервере()
	Результат = Новый Структура;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТабличныйДокумент = ОбработкаОбъект.ПолучитьМакет("Цвета");
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());
	
	ТаблицаЗначений = Построитель.Результат.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Результат.Вставить(СокрЛП(СтрокаТаблицы.Цвет), СокрЛП(СтрокаТаблицы.ЦветВнутр));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ЭтоДопустимыйТипСвойства(ОписаниеСвойства)
	ДопустимыеТипы = Новый Массив;
	ДопустимыеТипы.Добавить("Цвет");
	ДопустимыеТипы.Добавить("Строка");
	ДопустимыеТипы.Добавить("Булево");
	ДопустимыеТипы.Добавить("Число");
	ДопустимыеТипы.Добавить("СписокЗначений");
	ДопустимыеТипы.Добавить("БулевоНеопределено");
	ДопустимыеТипы.Добавить("Картинка");
	
	Возврат ДопустимыеТипы.Найти(ОписаниеСвойства.ТипЗначения) <> Неопределено
	ИЛИ ОписаниеСвойства.Значения.Количество() > 0;
КонецФункции

#КонецОбласти