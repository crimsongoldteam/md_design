// MIT License

// Copyright (c) 2025 Zherebtsov Nikita <nikita@crimsongold.ru>

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/crimsongoldteam/md_design

#Область ОписаниеПеременных

// Структура, хранящие в себе инициализированные модули
&НаКлиенте
Перем мМодули;

// Абстрактное синтаксическое дерево
&НаКлиенте
Перем мСемантическоеДерево;

// Текущий элемент для палитры свойств
&НаКлиенте
Перем мТекущийЭлемент;

// Индексы родителей текущего элемента
&НаКлиенте
Перем мТекущийЭлементПоложениеВАСД;

// Текущая строка таблицы группы
&НаКлиенте
Перем мТекущаяСтрокаГруппы;

// Контекст редактора
&НаКлиенте
Перем мКонтекстОкнаРедактораHTML;

&НаКлиенте
Перем ЭтоLinux;

&НаКлиенте
Перем мТекущееИмяФайла;

&НаКлиенте
Перем мПутьКФайлу;

&НаКлиенте
Перем мНачалоСтроки;

&НаКлиенте
Перем мНачалоКолонки;

&НаКлиенте
Перем мОтключитьОбработчикОбновленияПозицииРедактора;

&НаКлиенте
Перем мДеревоМетаданных;

&НаКлиенте
Перем мПрефикс;

&НаКлиенте
Перем мАктивныеЭлементыСД;


&НаКлиенте
Перем мВариантыТипов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СведенияОВнешнейОбработке = ОбработкаОбъект.СведенияОВнешнейОбработке();	
	
	Версия = СведенияОВнешнейОбработке.Версия;
	ЭтотОбъект.ТекущаяВерсия = Версия;
	
	Элементы.ДекорацияОднострочнаяГруппа.Заголовок = Элементы.ДекорацияОднострочнаяГруппа.Заголовок + Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"); 
	
	ЭтаФорма.ИдентификаторОбработки = ОбработкаОбъект.Метаданные().ПолноеИмя();
	
	Элементы.ПалитраСвойств.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Отбор", Истина));
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мАктивныеЭлементыСД = Новый Массив;
	
	мМодули = Новый Структура;
	
	мВариантыТипов = Новый Соответствие;
	
	ИнициализироватьМодули(
		"Синтаксис
		|УправлениеСвойствами
		|ПостроительСхемФормы
		|СлужебныеФункции
		|БиблиотекаJS");

	Если НЕ НеПроверятьОбновления Тогда
		Таймаут = 0.1;
		ПодключитьОбработчикОжидания("ПроверитьАктуальнуюВерсию", Таймаут, Истина);
	КонецЕсли;
	
	ЭтотОбъект.ПоказыватьСправку = Истина;
	
	УстановитьВидимостьДоступностьЭлементов();    

	УправлениеСвойствами().ЗаполнитьВсеСвойстваДляПалитры(ПалитраСвойств);
	
	мОтключитьОбработчикОбновленияПозицииРедактора = Ложь;
	
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//Если РежимРедактораГрупп Тогда   
	//	Попытка
	//		СинхронизироватьТаблицуГруппСГруппами();
	//		СтрокаФормат = Форматтер().Форматировать(мАСД);
	//		УстановитьТекстРедактора(СтрокаФормат, Ложь);
	//	Исключение
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = СтрШаблон("Ошибка при сохранении содержимого редактора: %1", ОписаниеОшибки());
	//		Сообщение.Сообщить();
	//	КонецПопытки;
	//КонецЕсли;
	//Если Модифицированность И Не ЗавершениеРаботы Тогда
	//
	//	Ответ = Ждать ВопросАсинх(НСтр("ru = 'Ваша форма не сохранена, сохранить?'"), РежимДиалогаВопрос.ДаНет);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//		ВыполнитьСохранениеФайла();
	//		Возврат;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ГруппаКнопки

&НаКлиенте
Процедура ПоказатьСкрытьПроект(Команда)
	Если ПоказыватьГруппуЛево = "Проект" Тогда
		ПоказыватьГруппуЛево = "";
	Иначе 
		ПоказыватьГруппуЛево = "Проект";
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьЧатИИ(Команда)
	Если ПоказыватьГруппуЛево = "ЧатИИ" Тогда
		ПоказыватьГруппуЛево = "";
	Иначе 
		ПоказыватьГруппуЛево = "ЧатИИ";
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПодменюЭкспорт(Команда)  
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("ГенераторXML", "Выгрузить в конфигурацию");
	СписокВыбора.Добавить("ГенераторКода", "Программное создание реквизитов");
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПодменюЭкспортЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СписокВыбора,  Элементы.ПодменюЭкспорт);
КонецПроцедуры    

&НаКлиенте
Процедура ПодменюЭкспортЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ГенераторКода" Тогда
		 ОткрытьГенераторКода();
		 Возврат;
	 КонецЕсли;
	 
	Если ВыбранныйЭлемент.Значение = "ГенераторXML" Тогда
		 ОткрытьГенераторXML();
		 Возврат;
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	Настройки = Новый Структура;
	
	ПоляНастроек = "НеПроверятьОбновления,ТокенИИ,МодельИИ,ПровайдерИИ";
	МассивНастроек = СтрРазделить(ПоляНастроек, ",");
	Для Каждого ИмяНастройки Из МассивНастроек Цикл
		Настройки.Вставить(ИмяНастройки, ЭтаФорма[ИмяНастройки]);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Настройки", Настройки);
	ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаНастройка", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из РезультатЗакрытия Цикл
		ЭтаФорма[КлючЗначение.Ключ] = КлючЗначение.Значение;
	КонецЦикла; 
КонецПроцедуры

#КонецОбласти

#Область КоманднаяПанельРедактора

&НаКлиенте
Процедура ПостроитьФорму(Команда)   
	ДанныеГенератора = ПолучитьДанныеДляГенерацииФормы(мПрефикс);
	Если ДанныеГенератора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Построить(ДанныеГенератора);
	
	ЗаголовокФормы = ДанныеГенератора.ЗаголовокФормы;
	Если ПустаяСтрока(ЗаголовокФормы) Тогда
		ЗаголовокФормы = "<Без заголовка>";
	КонецЕсли;
	
	ЭтотОбъект.ПоказыватьСправку = Ложь;
	
	УстановитьВидимостьДоступностьЭлементов();
	
	ЭтотОбъект.ЗаголовокФормы = ЗаголовокФормы;      
	
	Попытка
		ДеревоЭлементов.ПолучитьЭлементы().Очистить();     
		ЗаполнитьДеревоЭлементов(мСемантическоеДерево.Элементы, ДеревоЭлементов.ПолучитьЭлементы());
	Исключение
	КонецПопытки;
	
КонецПроцедуры   

&НаКлиенте
Процедура ПостроитьФормуВОтдельномОкне(Команда)    
	ДанныеГенератора = ПолучитьДанныеДляГенерацииФормы();
	Если ДанныеГенератора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПросмотр = ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаПросмотр", , ЭтаФорма);
	ФормаПросмотр.Построить(ДанныеГенератора);
КонецПроцедуры

// Решение взято из https://infostart.ru/1c/articles/22461/#message369426
&НаКлиенте
Function РасстояниеЛевенштейна(s, t)

    // Step 1

    n = StrLen(s);
    m = StrLen(t);

    If n = 0 Then
        Return m;
    EndIf;

    If m = 0 Then
        Return n;
    EndIf;

    d= New Array(n + 1, m + 1);

    // Step 2

    For i = 0 To n Do
        d[i][0] = i;
    EndDo;

    For j = 0 To m Do
        d[0][j] = j;
    EndDo;

    // Step 3

    For i = 1 To n Do

        s_i = Mid(s, i, 1);

        // Step 4

        For j = 1 To m Do

            t_j = Mid(t, j, 1);

            // Step 5

            If s_i = t_j Then
                cost = 0;
            Else
                cost = 1;
            EndIf;

            // Step 6

            d[i][j] = Min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

        EndDo;

    EndDo;

    // Step 7

    Return d[n][m];

EndFunction

&НаКлиенте
Процедура Форматировать(Команда)  
	АПИ_Форматировать();

	ЭтотОбъект.ТекущийЭлемент = Элементы.ПолеHTMLРедактора;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинку(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКартинкиЗавершение", ЭтотОбъект);
						 
	ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаВыбораКартинки", , ЭтаФорма, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВставитьТекстВРедакторВТекущейПозиции("@" + РезультатЗакрытия);
	ОбновитьТекстВТекущейГруппе(ЭтотОбъект.Редактор);	
КонецПроцедуры

&НаКлиенте
Процедура РедакторТаблицы(Команда) 
	ТекРодитель = мСемантическоеДерево;

	ПарамерыДобавления = ПолучитьПарамерыДобавленияЭлемента(ТекРодитель, "Таблица,Дерево");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОписаниеТаблицы", ПарамерыДобавления.Вместо);
	
	ДополнительныеПараметры = Новый Структура("Родитель,Перед,Вместо,Форма", 
		ПарамерыДобавления.Родитель, 
		ПарамерыДобавления.Перед, 
		ПарамерыДобавления.Вместо,
		ПарамерыДобавления.Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеТаблицыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаРедактированияТаблицы", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеТаблицыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодительЭлемента = ДополнительныеПараметры.Родитель;
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Вместо) Тогда 
		Вместо = ДополнительныеПараметры.Вместо;
		ИндексЭлемента =  РодительЭлемента.Элементы.Найти(Вместо);
		РодительЭлемента.Элементы[ИндексЭлемента] = РезультатЗакрытия;	
	Иначе
		ДобавитьВставитьЭлемент(ДополнительныеПараметры, РезультатЗакрытия);
	КонецЕсли;

	//СтрокаФормат = Форматтер().Форматировать(ДополнительныеПараметры.Форма); 
	//УстановитьТекстРедактора(СтрокаФормат);
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)  
	ДанныеЗаполнения = ПолучитьЗначенияРеквизитовФормыНаСервере();
	
	ДанныеЗаполненияСтрока = СлужебныеФункции().СтруктураВJSON(ДанныеЗаполнения);
	АПИ_ЗаполнитьЗначения(ДанныеЗаполненияСтрока);
	
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область КонтекстноеМенюРедактора

&НаКлиенте
Процедура ДобавитьПрямыеСкобки(Команда)
	ОбернутьВыделенныйТекст("[]", "");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФигурныеСкобки(Команда)
	ОбернутьВыделенныйТекст("{", "}");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУгловыеСкобки(Команда)
	ОбернутьВыделенныйТекст("<", ">");
КонецПроцедуры

#КонецОбласти

#Область ЧатИИ

&НаКлиенте
Процедура ОтправитьИИ(Команда)
	Если ПустаяСтрока(ЗапросИИ) Тогда
		Возврат;
	КонецЕсли;
	
	ОжиданиеОтветаИИ = Истина;
	
	Элементы.ГруппаЗапросИИ.Доступность = НЕ ОжиданиеОтветаИИ;

	ПодключитьОбработчикОжидания("ОтправитьИИЗавершение", 1, Истина);
КонецПроцедуры      

&НаКлиенте
Процедура ОтправитьИИЗавершение()
	ОжиданиеОтветаИИ = Ложь;

	Элементы.ГруппаЗапросИИ.Доступность = НЕ ОжиданиеОтветаИИ;
	
	Контекст = Новый Массив;
	Для Каждого Строка Из ЧатИИ Цикл
		Контекст.Добавить(Новый Структура("ЭтоВходящее,Сообщение", Строка.Входящее, Строка.Сообщение));
	КонецЦикла;
	
	Настройки = РаботаСИИ().ПолучитьНастройки();
	Настройки.ПровайдерИИ = ПровайдерИИ;
	Настройки.МодельИИ = МодельИИ;
	Настройки.ТокенИИ = ТокенИИ;
	
	Ответ = РаботаСИИ().Отправить(ЗапросИИ, Контекст, Настройки);
	
	Если Ответ = Неопределено Тогда
		ВызватьИсключение "Не удалось получить ответ!";
	КонецЕсли;

	СтрокаЧата = ЧатИИ.Добавить();
	СтрокаЧата.Сообщение = ЗапросИИ;
	ЗапросИИ = "";   
	
	СтрокаЧата = ЧатИИ.Добавить();
	СтрокаЧата.Сообщение = Ответ;
	СтрокаЧата.Входящее = Истина;
	
	Элементы.ЧатИИ.ТекущаяСтрока = СтрокаЧата.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИИ(Команда)
	ЧатИИ.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьИИ(Команда)
	ТекущаяСтрока = Элементы.ЧатИИ.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяСтрока.Входящее Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Сообщение = Редактор;
КонецПроцедуры

#КонецОбласти 

#Область Подвал

&НаКлиенте
Процедура ПоказатьСкрытьПодвал(Команда)   
	ПоказыватьПодвал = НЕ ПоказыватьПодвал;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьВсеСвойства(Команда)
	ЭтотОбъект.ПоказыватьВсеСвойства = Не ЭтотОбъект.ПоказыватьВсеСвойства;
	ОбновитьОтборПалитрыСвойств();	
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область Обозреватель

&НаКлиенте
Процедура СохранитьФайл(Команда)

	ВыполнитьСохранениеФайла();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура НовыйФайл(Команда)            
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Ответ = Ждать ВопросАсинх(
			НСтр("ru = 'Файл не сохранен, сохранить?'"), 
			Режим, 
			30, 
			КодВозвратаДиалога.Да, 
			"Сохранение файла", 
			КодВозвратаДиалога.Отмена);
			
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыполнитьСохранениеФайла();
		КонецЕсли;  
	КонецЕсли;
	
	Модифицированность = Ложь;    
	УстановитьТекстРедактора("",, Ложь);
	УстановитьТекущийФайл(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область Просмотр

&НаКлиенте
Процедура ПоказатьСправку(Команда)
	ЭтотОбъект.ПоказыватьСправку = Истина;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументацию(Команда)
	ПерейтиПоНавигационнойСсылке("https://crimsongoldteam.github.io/md_design");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТелеграмКанал(Команда)
	ПерейтиПоНавигационнойСсылке("https://t.me/overlay1c");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомандаЗаглушка(Команда)
	// Ничего не делаем
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НоваяВерсияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке("https://github.com/crimsongoldteam/md_design/releases");
КонецПроцедуры

&НаКлиенте
Процедура РедакторПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Событие = ДанныеСобытия.Event.eventData1C;
	
	Если Событие = Неопределено Или ТипЗнч(Событие) = Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	Если Событие.event = "EVENT_CHANGE_CONTENT" Тогда
		УстановитьМодфицированность = НЕ мОтключитьОбработчикОбновленияПозицииРедактора И Редактор <> Событие.params.text;
		Редактор = Событие.params.text;        
		
		СД = Событие.params.semanticsTree;  
		мСемантическоеДерево = СлужебныеФункции().JSONВСтруктуру(СД);
		
		ИерархияВыделения = СлужебныеФункции().JSONВСтруктуру(Событие.params.selectionHierarchy); 
		//Если ИерархияВыделения.Количество() = 0 Тогда
		//	мАктивныеЭлементыСД = Новый Массив;
		//Иначе
		//	мАктивныеЭлементыСД = Новый Массив(ИерархияВыделения.Количество());
		//	Парсер().ЗаполнитьЭлементыПоУИД(мСемантическоеДерево, ИерархияВыделения, мАктивныеЭлементыСД);
		//КонецЕсли;
		
		Если мТекущаяСтрокаГруппы <> Неопределено Тогда
			мТекущаяСтрокаГруппы.Текст = Редактор;		
		КонецЕсли;  
		
		Если мОтключитьОбработчикОбновленияПозицииРедактора Тогда
			мОтключитьОбработчикОбновленияПозицииРедактора = Ложь;
			Возврат;
		КонецЕсли;

		Если УстановитьМодфицированность Тогда
			УстановитьМодифицированность();
		КонецЕсли;                     
	КонецЕсли;

	Если Событие.event = "EVENT_CHANGE_CURSOR_SELECTION" Тогда
		
		мНачалоСтроки = Событие.params.line;
		мНачалоКолонки = Событие.params.column;
		
		ИерархияВыделения = СлужебныеФункции().JSONВСтруктуру(Событие.params.selectionHierarchy);
		//Если ИерархияВыделения.Количество() = 0 Тогда
		//	мАктивныеЭлементыСД = Новый Массив;
		//Иначе
		//	мАктивныеЭлементыСД = Новый Массив(ИерархияВыделения.Количество());
		//	Парсер().ЗаполнитьЭлементыПоУИД(мСемантическоеДерево, ИерархияВыделения, мАктивныеЭлементыСД);
		//КонецЕсли;
		
		ОтключитьОбработчикОжидания("ИзменениеПозицииКурсораЗавершение");

		Таймаут = 0.1;
		ПодключитьОбработчикОжидания("ИзменениеПозицииКурсораЗавершение", Таймаут, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПозицииКурсораЗавершение()
	//Если РежимРедактораГрупп Тогда
	//	СинхронизироватьТаблицуГруппСГруппами(); 
	//	Если мТекущаяСтрокаГруппы = Неопределено Тогда
	//		Возврат;
	//	КонецЕсли;
	//	ТекРодитель = мТекущаяГруппа.Элементы[мТекущаяСтрокаГруппы.Порядок - 1];
	//Иначе
	//	//мАСД = Парсер().Разобрать(Редактор);
	//	ТекРодитель = мАСД;
	//КонецЕсли;	
	//
	//ИерархияЭлементов = Новый Массив;
	//ИерархияЭлементовИндексы = Новый Массив;
	////ПолучитьИерархиюЭлементовПоКоординатам(ИерархияЭлементов, ИерархияЭлементовИндексы, ТекРодитель, мНачалоСтроки, мНачалоКолонки, 0);
	//УстановитьТекущийЭлементАСД(ИерархияЭлементов, ИерархияЭлементовИндексы);
	//
	//ОбновитьОтборПалитрыСвойств();

	//Если мТекущийЭлемент = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Для Каждого СтрокаТаблица Из ПалитраСвойств Цикл
	//	Если НЕ СтрокаТаблица.Отбор Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если мТекущийЭлемент.НаборСвойств.Свойство(СтрокаТаблица.ИмяПоля) Тогда 
	//		Если СтрокаТаблица.Категория = "Цвет" Тогда
	//			СтрокаТаблица["Значение" + СтрокаТаблица.Категория] = WebЦвета[мТекущийЭлемент.НаборСвойств[СтрокаТаблица.ИмяПоля]];
	//		ИначеЕсли СтрокаТаблица.Категория = "СписокЗначений" Тогда
	//			СтрокаТаблица["Значение" + СтрокаТаблица.Категория].ЗагрузитьЗначения(мТекущийЭлемент.НаборСвойств[СтрокаТаблица.ИмяПоля]);
	//		Иначе
	//			СтрокаТаблица["Значение" + СтрокаТаблица.Категория] = мТекущийЭлемент.НаборСвойств[СтрокаТаблица.ИмяПоля];
	//		КонецЕсли;
	//		
	//		СтрокаТаблица.Изменено = Истина;  
	//		
	//	ИначеЕсли СтрокаТаблица.ИмяПоля = "Тип" И мТекущийЭлемент.Тип = "ПолеВвода" Тогда
	//		ПредставлениеТипа = Форматтер().ФорматироватьОписаниеТипов(мТекущийЭлемент.ОписаниеТипов);
	//		СтрокаТаблица["Значение" + СтрокаТаблица.Категория] = ПредставлениеТипа;
	//	Иначе
	//		СтрокаТаблица["Значение" + СтрокаТаблица.Категория] = СтрокаТаблица.ЗначениеПоУмолчанию;
	//		СтрокаТаблица.Изменено = Ложь;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РедакторДокументСформирован(Элемент)
	КонтекстДокументаHTML = Элемент.Документ;
	
	мКонтекстОкнаРедактораHTML = КонтекстДокументаHTML.parentWindow;
	Если мКонтекстОкнаРедактораHTML = Неопределено Тогда
		мКонтекстОкнаРедактораHTML = КонтекстДокументаHTML.defaultView;	
	КонецЕсли;	
	
	УстановитьТекстРедактора(Редактор);  
	Элементы.ПолеHTMLРедактора.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПримерНажатие(Элемент)
	МассивСтрок = Новый Массив;
	Если НЕ ПустаяСтрока(Редактор) Тогда
		МассивСтрок.Добавить(Редактор);	
	КонецЕсли;
	МассивСтрок.Добавить(Элемент.Заголовок);
	
	УстановитьТекстРедактора(СтрСоединить(МассивСтрок, Символы.ПС + Символы.ПС));
КонецПроцедуры

&НаКлиенте
Процедура СтраницыЛевоПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЭтотОбъект.ПоказыватьГруппуЛево = Сред(ТекущаяСтраница.Имя, СтрДлина("Страница") + 1);
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКПапкеСФайламиПриИзменении(Элемент)
	ОбновитьДеревоФайлов();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПутьКПапкеСФайламиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = ПутьКПапкеСФайлами;
	ВыбранныеФайлы = Ждать ДиалогОткрытияФайла.ВыбратьАсинх();
	Если Не ВыбранныеФайлы = Неопределено Тогда
		ПутьКПапкеСФайлами = ВыбранныеФайлы[0];
		ОбновитьДеревоФайлов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайла(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоФайлов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЧатИИ

&НаКлиенте
Процедура ЧатИИВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.ЧатИИ.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяСтрока.Входящее Тогда
		Возврат;
	КонецЕсли;
	
	Текст = ТекущаяСтрока.Сообщение;
	УстановитьТекстРедактора(Текст);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаГруппы

&НаКлиенте
Процедура ТаблицаГруппыПриАктивизацииСтроки(Элемент)
	мТекущаяСтрокаГруппы = Элементы.ТаблицаГруппы.ТекущиеДанные;

	УстановитьТекстРедактора(мТекущаяСтрокаГруппы.Текст, Ложь, Ложь);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыПалитраСвойств

&НаКлиенте
Процедура ПалитраСвойствПриАктивизацииСтроки(Элемент)
	Если мТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ПалитраСвойств.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Категория = "СписокЗначений" Тогда
    	ТекущаяСтрока.ЗначениеСписокЗначений.ТипЗначения = Новый ОписаниеТипов("Строка");
		Возврат;
	КонецЕсли;
	
	Элементы.ПалитраСвойствЗначениеСтрока.КнопкаВыпадающегоСписка = Неопределено;
	Если ТекущаяСтрока.ИмяПоля = "Тип" Тогда
		Элементы.ПалитраСвойствЗначениеСтрока.КнопкаВыпадающегоСписка = Истина;
		Возврат;
	КонецЕсли;
	
	СписокСвойств = УправлениеСвойствами().ПолучитьСписокСвойствПоТипу(
		мТекущийЭлемент.ТипЭлемента, 
		мТекущийЭлемент.ВидЭлемента, 
		ТекущаяСтрока.ИмяПоля);

	Элементы.ПалитраСвойствЗначениеСписок.СписокВыбора.Очистить();
	Для Каждого КлючЗначение Из СписокСвойств Цикл
		Элементы.ПалитраСвойствЗначениеСписок.СписокВыбора.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если НЕ мТекущийЭлемент.НаборСвойств.Свойство("Заголовок") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ПалитраСвойств.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.ИмяПоля <> "Тип" Тогда
		Возврат;
	КонецЕсли;
	
	Варианты = ПолучитьВарианты(мТекущийЭлемент.НаборСвойств.Заголовок);
	ДанныеВыбора = Новый СписокЗначений;  
	
	Сч = 0;
	Для Каждого Вариант Из Варианты.Существующие Цикл
		Картинка = ?(СтрНачинаетсяС(Вариант, "Справочник"), БиблиотекаКартинок.Справочник, БиблиотекаКартинок.Перечисление);
		
		ДанныеВыбора.Добавить(Вариант, , , Картинка);
		Сч = Сч + 1;
		Если Сч > 5 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Сч = 0;
	Для Каждого Вариант Из Варианты.Новые Цикл
		ТекВариант = Вариант;   
		
		Если мТекущийЭлемент.НаборСвойств.Свойство("СписокВыбора") Тогда
			ТекВариант = "ПеречислениеСсылка." + Вариант;   
		Иначе
			ТекВариант = "СправочникСсылка." + Вариант;   
		КонецЕсли;
		
		ДанныеВыбора.Добавить(ТекВариант,,, БиблиотекаКартинок.СоздатьЭлементСписка);
		Сч = Сч + 1;
		Если Сч > 3 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеСписокПриИзменении(Элемент)
	ИзменитьЗначениеСвойстваПалитры();
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеБулевоПриИзменении(Элемент)
	ИзменитьЗначениеСвойстваПалитры();
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеЧислоПриИзменении(Элемент)
	ИзменитьЗначениеСвойстваПалитры();
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеСтрокаПриИзменении(Элемент)
	ИзменитьЗначениеСвойстваПалитры();
КонецПроцедуры

//&НаКлиенте
//Процедура ПалитраСвойствЗначениеСписокЗначенийАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//КонецПроцедуры

//&НаКлиенте
//Процедура ПалитраСвойствЗначениеСписокЗначенийНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеСписокЗначенийПриИзменении(Элемент)
	ИзменитьЗначениеСвойстваПалитры();
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.ПалитраСвойств.ТекущиеДанные;
	
	Если ТекущаяСтрока.Категория = "Булево" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока.ЗначениеБулево = НЕ ТекущаяСтрока.ЗначениеБулево;
		ИзменитьЗначениеСвойстваПалитры();
		Возврат;
	КонецЕсли;  
	
	Если ТекущаяСтрока.Категория = "Цвет" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбораЦвета();
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеЦветНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;                                       
	
	ОткрытьФормуВыбораЦвета();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДеревоФайлов

&НаКлиенте
Асинх Процедура ДеревоФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)  
	СтандартнаяОбработка = Ложь;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = ДеревоФайлов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущаяСтрока.ЭтоПапка Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Ждать ВопросАсинх(НСтр("ru = 'Файл не сохранен, сохранить?'"), Режим, , КодВозвратаДиалога.Да, "Сохранение файла");
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыполнитьСохранениеФайла();
		КонецЕсли;  
	КонецЕсли;                                      
	
	Модифицированность = Ложь;

	УстановитьТекущийФайл(ТекущаяСтрока.ПолныйПуть);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Ждать ТекстовыйДокумент.ПрочитатьАсинх(мПутьКФайлу, "UTF-8");
	УстановитьТекстРедактора(ТекстовыйДокумент.ПолучитьТекст(), , Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

#Область Модули

&НаКлиенте
Функция Лексемы() Экспорт
	Возврат ПолучитьМодуль("Синтаксис").Лексемы();
КонецФункции

&НаКлиенте
Функция Синтаксис() Экспорт
	Возврат ПолучитьМодуль("Синтаксис");
КонецФункции

&НаКлиенте
Функция ПостроительСхемФормы() Экспорт
	Возврат ПолучитьМодуль("ПостроительСхемФормы");
КонецФункции     

&НаКлиенте
Функция ГенераторКода() Экспорт
	Возврат ПолучитьМодуль("ГенераторКода");
КонецФункции     

&НаКлиенте
Функция РаботаСИИ() Экспорт
	Возврат ПолучитьМодуль("РаботаСИИ");
КонецФункции  

&НаКлиенте
Функция ПолучитьМодуль(ИмяМодуля)
	ФормаМодуля = Неопределено;
	
	Если НЕ мМодули.Свойство(ИмяМодуля, ФормаМодуля) Тогда
		ФормаМодуля = ИнициализироватьМодуль(ИмяМодуля); 
		мМодули.Вставить(ИмяМодуля, ФормаМодуля);
	КонецЕсли;
	Возврат ФормаМодуля;
КонецФункции

&НаКлиенте
Функция УправлениеСвойствами() Экспорт
	Возврат ПолучитьМодуль("УправлениеСвойствами");
КонецФункции   

&НаКлиенте
Функция Лексема(ИмяПараметра) Экспорт
	Возврат Синтаксис().Лексема(ИмяПараметра);
КонецФункции

&НаКлиенте
Функция СлужебныеФункции() Экспорт
	Возврат ПолучитьМодуль("СлужебныеФункции");
КонецФункции

//&НаКлиенте
//Функция Парсер() Экспорт
//	Возврат ПолучитьМодуль("Парсер");
//КонецФункции

&НаКлиенте
Процедура ИнициализироватьМодули(ИменаМодулей)
	
	МассивМодулей = СтрРазделить(ИменаМодулей, Символы.ПС);
	Для Каждого Модуль Из МассивМодулей Цикл
		ИнициализироватьМодуль(Модуль);
	КонецЦикла;  
		
	мМодули.Синтаксис.Инициализировать();
	мМодули.УправлениеСвойствами.Инициализировать();
	мМодули.БиблиотекаJS.Инициализировать(ЭтотОбъект, "ПолеHTMLРедактора", ТекущаяВерсия);
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьМодуль(ИмяМодуля)
	ТекИмя = СтрШаблон("%1.Форма.%2", ИдентификаторОбработки, ИмяМодуля);
	
	// BSLLS:GetFormMethod-off 
	Результат = ПолучитьФорму(ТекИмя, , ЭтотОбъект);
	// BSLLS:GetFormMethod-on
	мМодули.Вставить(ИмяМодуля, Результат);
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ПалитраСвойств

&НаКлиенте
Процедура ОбновитьОтборПалитрыСвойств()
	Для Каждого СтрокаТаблица Из ПалитраСвойств Цикл
		СтрокаТаблица.Отбор = 
			мТекущийЭлемент <> Неопределено И
			(мТекущийЭлемент.ТипЭлемента = СтрокаТаблица.ТипЭлемента) И 
			(мТекущийЭлемент.ВидЭлемента = СтрокаТаблица.ВидЭлемента) И 
			(ЭтотОбъект.ПоказыватьВсеСвойства ИЛИ СтрокаТаблица.Основное);
	КонецЦикла;
	
	Элементы.ПалитраСвойств.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Отбор", Истина));
КонецПроцедуры

#КонецОбласти
 
#Область Редактор

&НаКлиенте
Функция ПолучитьТекстРедактора() Экспорт
	Возврат мКонтекстОкнаРедактораHTML.getEditorText();
КонецФункции

&НаКлиенте
Процедура УстановитьТекстРедактора(Знач Значение, ОбновлятьГруппу = Истина, УстанавливатьМодифицированность = Истина) Экспорт    
	КодСимволаАбзац = Символ(182);
	Значение = СтрЗаменить(Значение, КодСимволаАбзац, Символы.ПС); 
	Если НЕ УстанавливатьМодифицированность Тогда
		мОтключитьОбработчикОбновленияПозицииРедактора = Истина;
	КонецЕсли;
	
	
	АПИ_УстановитьТекст(Значение);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПозицияРедактора(Строка, Колонка)   
	мНачалоКолонки = Колонка;
	мНачалоСтроки = Строка;
	
	мКонтекстОкнаРедактораHTML.setEditorPosition(Строка, Колонка);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстВРедакторВТекущейПозиции(Текст) 
	АПИ_ВставитьТекстВПозицию(Текст);
	Модифицированность = Истина;
КонецПроцедуры
 
#КонецОбласти

#Область ОбозревательФайлов

&НаКлиенте
Асинх Процедура ВыполнитьСохранениеФайла()

	Если Не ПустаяСтрока(мПутьКФайлу) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(Редактор);
		ТекстовыйДокумент.НачатьЗапись(, мПутьКФайлу, "UTF-8");
	Иначе
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогСохраненияФайла.Фильтр = "Файл Накидки (*.txt)|*.txt";
		ДиалогСохраненияФайла.Расширение = РасширениеФайлаНакидка();
		ВыбранныеФайлы = Ждать ДиалогСохраненияФайла.ВыбратьАсинх();
		Если Не ВыбранныеФайлы = Неопределено Тогда
			ПослеЗаписиФайла = Новый ОписаниеОповещения("ПослеЗаписиФайла", ЭтотОбъект);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(Редактор);
			ТекстовыйДокумент.НачатьЗапись(ПослеЗаписиФайла, ВыбранныеФайлы[0], "UTF-8");
			УстановитьТекущийФайл(ВыбранныеФайлы[0]);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ЭтотОбъект.Модифицированность = Ложь;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьГенераторКода()
	УправлениеСвойствами().ЗаполнитьНеизвестныеСвойства(мСемантическоеДерево);
	
	ПараметрыВыполнения = ПостроительСхемФормы().СоздатьПараметрыВыполнения();
	ДанныеГенератора = ПостроительСхемФормы().Получить(мСемантическоеДерево, ПараметрыВыполнения);

	ФормаПросмотр = ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаКода", , ЭтаФорма);
	
	ФормаПросмотр.Результат = ГенераторКода().Получить(ДанныеГенератора);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГенераторXML()
	УправлениеСвойствами().ЗаполнитьНеизвестныеСвойства(мСемантическоеДерево);

	ПараметрыВыполнения = ПостроительСхемФормы().СоздатьПараметрыВыполнения();
    ПараметрыВыполнения.ДеревоМетаданных = ПолучитьДеревоКонфигурацииНаСервере();
	
	ДанныеГенератора = ПостроительСхемФормы().Получить(мСемантическоеДерево, ПараметрыВыполнения);

	СхемыФормы = Новый Структура("СхемаЭлементы, СхемаРеквизиты, СхемаМетаданные", ДанныеГенератора.Элементы[0], ДанныеГенератора.Реквизиты, ДанныеГенератора.Метаданные);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("СхемыФормы", СхемыФормы);
	
	СлужебныеФункции().СтруктураВJSON(ПараметрыОткрытия);
	
	ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаГенераторXML", ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеСвойстваПалитры()
	//Если РежимРедактораГрупп Тогда
	//	ТекРодитель = мТекущаяГруппа.Элементы[мТекущаяСтрокаГруппы.Порядок - 1];
	//Иначе
	//	ТекРодитель = мАСД;
	//КонецЕсли;	
	//
	//ТекущаяСтрока = Элементы.ПалитраСвойств.ТекущиеДанные;

	//ТекущееЗначение = ТекущаяСтрока["Значение" + ТекущаяСтрока.Категория];
	//
	//
	//Если ТекущаяСтрока.Категория = "СписокЗначений" Тогда
	//	ТекущаяСтрока.Изменено = Истина;     
	//	МассивЗначений = ТекущаяСтрока.ЗначениеСписокЗначений.ВыгрузитьЗначения();
	//	Если МассивЗначений.Количество() > 0 Тогда
	//		мТекущийЭлемент.НаборСвойств.Вставить(ТекущаяСтрока.ИмяПоля, МассивЗначений);
	//	Иначе
	//		мТекущийЭлемент.НаборСвойств.Удалить(ТекущаяСтрока.ИмяПоля);
	//		ТекущаяСтрока.Изменено = Ложь;     
	//	КонецЕсли;
	//	
	//ИначеЕсли ТекущееЗначение <> ТекущаяСтрока.ЗначениеПоУмолчанию Тогда
	//	ТекущаяСтрока.Изменено = Истина;     
	//	Если ТекущаяСтрока.Категория = "Строка" И ТекущаяСтрока.ИмяПоля = "Тип" Тогда
	//		ОписаниеТипов = Парсер().ПолучитьОписаниеТипов();
	// 		Парсер().ПарсингНабораСвойств(Новый Структура, Парсер().НовыйТекст("{Тип = " + ТекущаяСтрока.ЗначениеСтрока + "}", 0, 0), ОписаниеТипов);
	//		мТекущийЭлемент.ОписаниеТипов = ОписаниеТипов;
	//	ИначеЕсли ТекущаяСтрока.Категория = "Цвет" Тогда
	//		мТекущийЭлемент.НаборСвойств.Вставить(ТекущаяСтрока.ИмяПоля, ТекущаяСтрока.ЗначениеСтрока);
	//	Иначе
	//		мТекущийЭлемент.НаборСвойств.Вставить(ТекущаяСтрока.ИмяПоля, ТекущееЗначение);
	//	КонецЕсли;
	//	
	//Иначе
	//	ТекущаяСтрока.Изменено = Ложь;
	//	мТекущийЭлемент.НаборСвойств.Удалить(ТекущаяСтрока.ИмяПоля);
	//КонецЕсли;
	//
	//СтрокаФормат = Форматтер().Форматировать(ТекРодитель);
	//УстановитьТекстРедактора(СтрокаФормат);	
	
	//ОбновитьТекущийЭлементАСДПоИндексам(ТекРодитель); 
	
	//мНачалоСтроки = Неопределено;
	//Для Каждого КЗ Из мТекущийЭлемент.Координаты Цикл
	//	Если мНачалоСтроки = Неопределено Тогда
	//		мНачалоСтроки = КЗ.Ключ;
	//	Иначе
	//		мНачалоСтроки = Мин(мНачалоСтроки, КЗ.Ключ);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//мНачалоКолонки = мТекущийЭлемент.Координаты.Получить(мНачалоСтроки)[0].Лево;
	//УстановитьПозицияРедактора(мНачалоСтроки, мНачалоКолонки);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеДляГенерацииФормы(Префикс = "")
	УправлениеСвойствами().ЗаполнитьНеизвестныеСвойства(мСемантическоеДерево);
	
	ПараметрыВыполнения = ПостроительСхемФормы().СоздатьПараметрыВыполнения();
	ПараметрыВыполнения.Префикс = Префикс;
	ДанныеГенератора = ПостроительСхемФормы().Получить(мСемантическоеДерево, ПараметрыВыполнения);
	Возврат ДанныеГенератора;
КонецФункции

&НаКлиенте
Процедура ДобавитьВставитьЭлемент(ПараметрыДобавления, НовыйЭлемент) 
	РодительЭлементы = ПараметрыДобавления.Родитель.Элементы;
	
	Если ЗначениеЗаполнено(ПараметрыДобавления.Перед) Тогда
		ИндексЭлемента =  РодительЭлементы.Найти(ПараметрыДобавления.Перед);
		РодительЭлементы.Вставить(ИндексЭлемента, НовыйЭлемент);
		Возврат;
	КонецЕсли;
	
	РодительЭлементы.Добавить(НовыйЭлемент);	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПарамерыДобавленияЭлемента(ФормаГруппы, СтрокаОжидаемыеТипы)     
	Результат = Новый Структура("Родитель,Вместо,Перед,Форма");

	ОжидаемыеТипы = СтрРазделить(СтрокаОжидаемыеТипы, ",");

	ПозицияКурсора = ПолучитьБлижайшуюПозициюКурсора(мНачалоСтроки, мНачалоКолонки);

	Результат.Форма = ФормаГруппы;
	Если ПозицияКурсора.Пустая Тогда
		Результат.Родитель = ФормаГруппы;
		Возврат Результат;
	КонецЕсли;
	
	ИерархияЭлементов = Новый Массив;
	ИерархияЭлементовИндексы = Новый Массив;
	//ПолучитьИерархиюЭлементовПоКоординатам(ИерархияЭлементов, ИерархияЭлементовИндексы, ФормаГруппы, ПозицияКурсора.НомерСтроки, ПозицияКурсора.НомерКолонки, 0);
	
	ТекущееОписаниеИндекс = ПолучитьТекущийЭлементИерархии(ИерархияЭлементов, ОжидаемыеТипы);
	
	Если ТекущееОписаниеИндекс <> Неопределено Тогда  
		Результат.Вместо = ИерархияЭлементов[ТекущееОписаниеИндекс];  
		Если ТекущееОписаниеИндекс = 0 Тогда
			Результат.Родитель = ФормаГруппы;
		Иначе
			Результат.Родитель = ИерархияЭлементов[ТекущееОписаниеИндекс - 1];
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;	
	
	КоличествоЭлементов = ИерархияЭлементов.Количество();
	Если КоличествоЭлементов > 0 Тогда
		ТекущийПеред = ИерархияЭлементов[КоличествоЭлементов - 1];
		Результат.Перед = ТекущийПеред; 
		
		Если КоличествоЭлементов > 1 Тогда
			Результат.Родитель = ИерархияЭлементов[КоличествоЭлементов - 2]; 
		Иначе
			Результат.Родитель = ФормаГруппы;
		КонецЕсли;
	
		Возврат Результат;
	КонецЕсли;

	Результат.Родитель = ФормаГруппы;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьТекущийЭлементИерархии(ИерархияЭлементов, ОжидаемыеТипы)
	Если ИерархияЭлементов.Количество() = 0 Тогда
		ИерархияЭлементов.Добавить(мСемантическоеДерево);
	КонецЕсли;
	
	Сч = ИерархияЭлементов.ВГраница();
	Пока Сч >= 0 Цикл
		ТекущееОписание = ИерархияЭлементов[Сч];
		Если ОжидаемыеТипы.Количество() = 0 ИЛИ ОжидаемыеТипы.Найти(ТекущееОписание.Тип) <> Неопределено Тогда
			Возврат Сч;
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ОбновитьТекстВТекущейГруппе(Значение)
	Если мТекущаяСтрокаГруппы = Неопределено Тогда 
		Возврат;
	КонецЕсли; 
	
	мТекущаяСтрокаГруппы.Текст = Значение;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСоответствиеЯчеекПоКолонкам(Ячейки)
	ЯчейкиПоКолонкам = Новый Соответствие;
	Для Каждого Ячейка Из Ячейки Цикл
		ЯчейкиПоКолонкам.Вставить(Ячейка.УИДКолонки, Ячейка);
	КонецЦикла;
	Возврат ЯчейкиПоКолонкам;
КонецФункции
                                                                                                  
&НаКлиенте
Функция ЕстьРеквизитФормы(ИмяРеквизита, ТипРеквизита)
	СтрокиСуществующийРеквизит = ТаблицаСуществующихРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если СтрокиСуществующийРеквизит.Количество() = 0  Тогда
		Возврат Ложь; 
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПолучитьБлижайшуюПозициюКурсора(Знач НомерСтроки, Знач НомерКолонки) 
	Если НомерСтроки = Неопределено Тогда
		НомерСтроки = 1;
	КонецЕсли;
	Если НомерКолонки = Неопределено Тогда
		НомерКолонки = 1;
	КонецЕсли;
	
	Результат = Новый Структура("НомерСтроки,НомерКолонки,Пустая", НомерСтроки, НомерКолонки, Ложь);
	
	СтрокиРедактора = СтрРазделить(Редактор, Символы.ПС);
	
	ИндексСтроки = Мин(СтрокиРедактора.ВГраница(), НомерСтроки - 1);
	Если ИндексСтроки < 0 Тогда
		Результат.НомерСтроки = 1;
		Результат.НомерКолонки = 1;
		Результат.Пустая = Истина;		
		Возврат Результат;
	КонецЕсли;
	
	Пока Истина Цикл   
		Если ИндексСтроки > СтрокиРедактора.ВГраница() Тогда
			Результат.НомерСтроки = 1;
			Результат.НомерКолонки = СтрокиРедактора.ВГраница() + 1; 
			Результат.Пустая = Истина;
			Возврат Результат;
		КонецЕсли;
		
		ТекущаяСтрока = СтрокиРедактора[ИндексСтроки];
		Если НЕ ПустаяСтрока(ТекущаяСтрока) Тогда
			Прервать;
		КонецЕсли;	
		
		ИндексСтроки = ИндексСтроки + 1;
		НомерКолонки = 1;  
		Результат.Пустая = Истина;		
		
		Продолжить;
	КонецЦикла;
	
	ДлинаСтроки = СтрДлина(СокрП(ТекущаяСтрока));
	Если НомерКолонки > ДлинаСтроки Тогда
		НомерКолонки = ДлинаСтроки;
	КонецЕсли;
	
	Результат.НомерСтроки = ИндексСтроки + 1;
	Результат.НомерКолонки = НомерКолонки;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВыполнитьВнешнийПарсинг(Знач Текст) Экспорт
	Результат = мКонтекстОкнаРедактораHTML.parseInputInner(Текст); 
	
	Если СтрНачинаетсяС(Результат, "Ошибка:") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат;
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Неизвестная ошибка парсинга!";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатСтруктура = СлужебныеФункции().JSONВСтруктуру(Результат);
	Возврат РезультатСтруктура;
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторОбработки() Экспорт
	Возврат ИдентификаторОбработки;
КонецФункции

&НаКлиенте
Функция ЗначениеВМассиве(Знач Значение)
	Результат = Новый Массив;
	Результат.Добавить(Значение);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Построить(ДанныеГенератора) Экспорт
	ПостроитьНаСервере(ДанныеГенератора);
КонецПроцедуры

&НаСервере
Процедура ПостроитьНаСервере(Знач ДанныеГенератора) Экспорт
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПостроитьНаСервере(
		ЭтотОбъект, 
		Элементы.ГруппаПросмотр, 
		ДанныеГенератора);
КонецПроцедуры

&НаКлиенте
Процедура ОбернутьВыделенныйТекст(СимволДо, СимволПосле)
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	
	Элементы.ПолеHTMLРедактора.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	Элементы.ПолеHTMLРедактора.ВыделенныйТекст = СимволДо + Элементы.ПолеHTMLРедактора.ВыделенныйТекст + СимволПосле;
	Элементы.ПолеHTMLРедактора.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки + СтрДлина(СимволДо), КонецСтроки, КонецКолонки + СтрДлина(СимволДо));
	
	ОбновитьТекстВТекущейГруппе(ЭтотОбъект.Редактор);
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.ПолеHTMLРедактора;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальнуюВерсию()
	АктуальнаяВерсия = ПолучитьАктуальнуюВерсию(); 
	
	Если АктуальнаяВерсия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СравнитьВерсии(АктуальнаяВерсия, ТекущаяВерсия) Тогда
		Возврат;
	КонецЕсли;

	ЭтотОбъект.НоваяВерсия = СтрШаблон("Доступна новая версия: %1", АктуальнаяВерсия);
КонецПроцедуры

&НаКлиенте
Функция СравнитьВерсии(АктуальнаяВерсия, ТекущаяВерсия)
	МассивАктуальнаяВерсия = СтрРазделить(АктуальнаяВерсия, ".");
	МассивТекущаяВерсия = СтрРазделить(ТекущаяВерсия, ".");
	Индекс = 0;
	Пока Индекс <= 2 Цикл
		НомерАктуальная = Число(МассивАктуальнаяВерсия[Индекс]);
		НомерТекущая = Число(МассивТекущаяВерсия[Индекс]);
		Если НомерТекущая > НомерАктуальная Тогда
			Возврат Ложь;
		КонецЕсли;
		Если НомерТекущая < НомерАктуальная Тогда
			Возврат Истина;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ПолучитьАктуальнуюВерсию()
	URL = "repos/crimsongoldteam/md_design/releases";
	
	Попытка
	    Запрос = Новый HTTPЗапрос(URL);
		Таймаут = 30;
		КодВозвратаУспех = 200;
		Соединение = Новый HTTPСоединение("api.github.com", , , , , Таймаут, Новый ЗащищенноеСоединениеOpenSSL);
		Результат = Соединение.Получить(Запрос);     
		
		Если Результат.КодСостояния <> КодВозвратаУспех Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Тело = Результат.ПолучитьТелоКакСтроку();
		Результат = СлужебныеФункции().JSONВСоответствие(Тело);
		Если Результат.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		Версия = Сред(Результат[0]["tag_name"], 2);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	Возврат Версия;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()

	УстановитьВидимостьДоступностьПодвала();
	 УстановитьВидимостьГруппыЛево();
	
	Элементы.ГруппаСправка.Видимость = ПоказыватьСправку;
	Элементы.ГруппаПросмотр.Видимость = НЕ ПоказыватьСправку;
	Элементы.ПоказатьСправку.Видимость = НЕ ПоказыватьСправку;
	Элементы.Заполнить.Видимость = НЕ ПоказыватьСправку;
	Элементы.ЗаголовокФормы.Видимость = НЕ ПоказыватьСправку;  

	Элементы.ПоказатьСкрытьВсеСвойства.Пометка = ПоказыватьВсеСвойства;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьПодвала()
	Элементы.ПоказатьСкрытьПодвал.Пометка = ПоказыватьПодвал;
	Элементы.ПалитраСвойств.Видимость = ПоказыватьПодвал;
	Элементы.ПоказатьСкрытьВсеСвойства.Видимость = ПоказыватьПодвал;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыЛево()
	Элементы.ПоказатьСкрытьПроект.Пометка = ПоказыватьГруппуЛево = "Проект";
	Элементы.ПоказатьСкрытьЧатИИ.Пометка = ПоказыватьГруппуЛево = "ЧатИИ";
	
	Элементы.ГруппаЛево.Видимость = ПоказыватьГруппуЛево <> ""; 
	
	Если ПоказыватьГруппуЛево <> "" Тогда
		Элементы.СтраницыЛево.ТекущаяСтраница = Элементы["Страница" + ПоказыватьГруппуЛево];
	КонецЕсли;
	
	Элементы.ПостроитьФорму.КнопкаПоУмолчанию = ПоказыватьГруппуЛево <> "ЧатИИ";
	Элементы.ОтправитьИИ.КнопкаПоУмолчанию = ПоказыватьГруппуЛево = "ЧатИИ";
КонецПроцедуры

&НаКлиенте
Функция ЛевоеИмяГруппыККнопке()

	Результат = Новый Соответствие();
	Результат.Вставить("ГруппаИИ", "РедакторИИ");
	Результат.Вставить("ГруппаДеревоФайлов", "ПоказатьДеревоФайлов");
	Результат.Вставить("ГруппаДеревоЭлементов", "ПоказатьДеревоЭлементов");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДеревоФайлов()
	
	ДеревоФайлов.ПолучитьЭлементы().Очистить();
	
	ПутьКПапкеСФайлами = СокрЛП(ПутьКПапкеСФайлами);
	Если ЭтоLinux Тогда
		ПутьКПапкеСФайлами = СтрЗаменить(ПутьКПапкеСФайлами, "\", "/");
	Иначе	
		ПутьКПапкеСФайлами = СтрЗаменить(ПутьКПапкеСФайлами, "/", "\");
	КонецЕсли;
	
	ПервыеДваСимвола = Лев(ПутьКПапкеСФайлами, 2);
	ВтораяЧасть = Сред(ПутьКПапкеСФайлами, 3);
	Пока СтрНайти(ВтораяЧасть, "\\") > 0 Цикл
		ВтораяЧасть = СтрЗаменить(ВтораяЧасть, "\\", "\");
	КонецЦикла;	 
	Пока СтрНайти(ВтораяЧасть, "//") > 0 Цикл
		ВтораяЧасть = СтрЗаменить(ВтораяЧасть, "//", "/");
	КонецЦикла;	 
	
	ПутьКПапкеСФайлами = ПервыеДваСимвола + ВтораяЧасть;
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДеревоФайловОбработчикНачатьПоискФайлов", 
		ЭтаФорма, ДополнительныеПараметры);
	НачатьПоискФайлов(ОписаниеОповещения, ПутьКПапкеСФайлами, СтрШаблон("*.%1", РасширениеФайлаНакидка()), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоФайловОбработчикНачатьПоискФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	СтруктураКартинок = СтруктураКартинокДляДереваФайлов();
	Каталоги = Новый Соответствие;
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов = Новый СписокЗначений;
	БазовыйПуть = УниверсальноеПолноеИмяФайла(ДополнитьСлешВПуть(ПутьКПапкеСФайлами));
	Для Каждого ТекФайл Из НайденныеФайлы Цикл
		СписокФайлов.Добавить(ТекФайл, ТекФайл.ПолноеИмя);
		Путь = УниверсальноеПолноеИмяФайла(ТекФайл.Путь);
		Поз = СтрНайти(Путь, БазовыйПуть);
		ОтносительныйПуть = Сред(Путь, Поз + СтрДлина(БазовыйПуть));
		Если Прав(ОтносительныйПуть, 1) = "/" Тогда
			ОтносительныйПуть = Лев(ОтносительныйПуть, СтрДлина(ОтносительныйПуть) - 1);
		КонецЕсли;
		
		Если СтрНайти(ОтносительныйПуть, "/") > 0 Тогда
			МассивСтрок = СтрРазделить(ОтносительныйПуть, "/");
			Стр = "";
			Для Каждого Элем Из МассивСтрок Цикл
				Если НЕ ПустаяСтрока(Стр) Тогда
					Стр = Стр + "/";
				КонецЕсли;
				Стр = Стр + Элем; 
				
				Если НЕ ПустаяСтрока(Стр) Тогда
					Каталоги.Вставить(Стр, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОтносительныйПуть) Тогда
			Каталоги.Вставить(ОтносительныйПуть, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элем Из Каталоги Цикл
		СписокКаталогов.Добавить(Элем.Ключ);
	КонецЦикла;
	
	СписокФайлов.СортироватьПоПредставлению();
	СписокКаталогов.СортироватьПоЗначению();
	
	СозданныеКаталоги = Новый Соответствие;
	Для Каждого Элем Из СписокКаталогов Цикл
		МассивСтрок = СтрРазделить(Элем.Значение, "/");
		ЭлРодителя = ДеревоФайлов;
		ЭтоПапка = Истина;
		ПолныйПуть = ПутьКПапкеСФайлами;
		Для Каждого СтрКаталога Из МассивСтрок Цикл
			ПолныйПуть = ДополнитьСлешВПуть(ДополнитьСлешВПуть(ПолныйПуть) + СтрКаталога);
			ЭлементДерева = СозданныеКаталоги[ПолныйПуть];
			
			Если ЭлементДерева = Неопределено Тогда
				ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
				СтрокаДереваКаталог = ОснЭлементы.Добавить();
				СтрокаДереваКаталог.Имя = СтрКаталога;
				СтрокаДереваКаталог.ПолныйПуть = ПолныйПуть;
				СтрокаДереваКаталог.Картинка = ?(ЭтоПапка, СтруктураКартинок.Папка, СтруктураКартинок.Файл);
				СтрокаДереваКаталог.ЭтоПапка = ЭтоПапка;
				
				СозданныеКаталоги.Вставить(ПолныйПуть, СтрокаДереваКаталог);
				ЭлРодителя = СтрокаДереваКаталог;
			Иначе
				ЭлРодителя = ЭлементДерева;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Элем Из СписокФайлов Цикл
		
		Файл = Элем.Значение;
		ЭлРодителя = СозданныеКаталоги[Файл.Путь];
		
		Если ЭлРодителя = Неопределено Тогда
			ЭлРодителя = ДеревоФайлов;
		КонецЕсли;	 
		
		ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
		Нов = ОснЭлементы.Добавить();
		Нов.Имя = Файл.Имя;
		Нов.ПолныйПуть = Файл.ПолноеИмя;
		Нов.Картинка = СтруктураКартинок.Файл;
		Нов.ЭтоПапка = Ложь;

	КонецЦикла;
	
	СозданныеКаталоги.Очистить();
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальноеПолноеИмяФайла(Знач ПолноеИмяФайлаИлиФайл, Знач ВНРегистр = Ложь)
	
	Если ТипЗнч(ПолноеИмяФайлаИлиФайл) = Тип("Файл") Тогда
		УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайлаИлиФайл.ПолноеИмя, "\", "/");
	Иначе
		УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайлаИлиФайл, "\", "/");
	КонецЕсли;

	Если ВНРегистр Тогда
		УниверсальноеПолноеИмя = НРег(УниверсальноеПолноеИмя);
	КонецЕсли;

	Возврат УниверсальноеПолноеИмя;
	
КонецФункции

&НаКлиенте
Функция СтруктураКартинокДляДереваФайлов()
	
	СтруктураКартинок = Новый Структура;
	
	БинДата = Base64Значение("PHN2ZyB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIHZpZXdCb3g9IjAgMCAxNiAxNiIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTEgNEwzIDJIN0w5IDRIMTRDMTQuNTUyMyA0IDE1IDQuNDQ3NzIgMTUgNVYxM0MxNSAxMy41NTIzIDE0LjU1MjMgMTQgMTQgMTRIMkMxLjQ0NzcgMTQgMSAxMy41NTIzIDEgMTNWNFoiIGZpbGw9IiNCQjg3NDQiLz4KPHBhdGggZD0iTTE0IDdIMlYxM0gxNFY3WiIgZmlsbD0iI0Y3REE3RCIvPgo8cGF0aCBkPSJNMTQgNUgyVjZIMTRWNVoiIGZpbGw9IiNGRkUwNjkiLz4KPHBhdGggZD0iTTQgM0wyIDVIOEw2IDNINFoiIGZpbGw9IiNGRkUwNjkiLz4KPC9zdmc+Cg==");
	КартинкаПапки = Новый Картинка(БинДата);
	СтруктураКартинок.Вставить("Папка", КартинкаПапки); 
	
	БинДата = Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABS2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxMzggNzkuMTU5ODI0LCAyMDE2LzA5LzE0LTAxOjA5OjAxICAgICAgICAiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIi8+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgo8P3hwYWNrZXQgZW5kPSJyIj8+IEmuOgAAAGhJREFUOI1jYKAQMDIwMDD4ZNUXMDAw+JOgb+OWaY0T4DyfrPr9/0kAPln1+2F6mSj1AsUGsKALLFy3nUFLRQGrYlM9TcIGxAd5UtcF2GylrwuQwcCEAc1dQLWEtNE3u4EUfRsptRgOALn3R2pxdRrxAAAAAElFTkSuQmCC");
	КартинкаФайла = Новый Картинка(БинДата);
	СтруктураКартинок.Вставить("Файл", КартинкаФайла); 
	
	Возврат СтруктураКартинок;
	
КонецФункции

&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог) Экспорт
	
	Разделитель = "\";
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	Если ЭтоLinux Тогда
		Разделитель = "/";
		Каталог = СтрЗаменить(Каталог, "\", "/");
	КонецЕсли;
		
	Если Прав(Каталог, 1) <> Разделитель Тогда
		Каталог = Каталог + Разделитель;
	КонецЕсли;
	Возврат Каталог;
	
КонецФункции

&НаКлиенте
Функция РасширениеФайлаНакидка()

	Возврат "txt";

КонецФункции

&НаКлиенте
Процедура УстановитьМодифицированность()
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементАСД(ИерархияЭлементов, ИерархияЭлементовИндексы)
	мТекущийЭлемент = Неопределено;
	Если мАктивныеЭлементыСД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мТекущийЭлемент = мАктивныеЭлементыСД[мАктивныеЭлементыСД.ВГраница()];
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЦвета()
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗначениеЦветНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаВыбораЦвета", , ЭтаФорма, , , , ОписаниеОповещения);
КонецПроцедуры   

&НаКлиенте
Процедура ЗначениеЦветНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = Элементы.ПалитраСвойств.ТекущиеДанные;
	
	ТекущаяСтрока.ЗначениеЦвет = РезультатЗакрытия.Цвет;   
	ТекущаяСтрока.ЗначениеСтрока = РезультатЗакрытия.ИмяЦвета;   
	ИзменитьЗначениеСвойстваПалитры();	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	Шаблон = "Накидка. v%1. %2";   
	ИмяФайла = ?(ПустаяСтрока(мТекущееИмяФайла), "Новый", мТекущееИмяФайла);
	ЭтаФорма.Заголовок = СтрШаблон(Шаблон, ЭтотОбъект.ТекущаяВерсия, ИмяФайла);	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийФайл(ПутьКФайлу)
	Если ПутьКФайлу = Неопределено Тогда
		мПутьКФайлу = "";
		мТекущееИмяФайла = "";
	Иначе
		мПутьКФайлу = ПутьКФайлу;   
		СтруктураИмени = СлужебныеФункции().РазложитьПолноеИмяФайла(ПутьКФайлу); 
		мТекущееИмяФайла = СтруктураИмени.ИмяБезРасширения;
	КонецЕсли;
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаСервере
Функция ПолучитьДеревоКонфигурацииНаСервере()
	Результат = Новый Структура;
	МассивРазделовМетаданных = СтрРазделить("Справочники,Документы,Перечисления", ",");
	
	Для Каждого Раздел Из МассивРазделовМетаданных Цикл 
		МассивОбъектов = Новый Массив;
		Результат.Вставить(Раздел, МассивОбъектов);
		Для Каждого ОбъектМетаданных Из Метаданные[Раздел] Цикл
			Структура = Новый Структура("Имя,Синоним,ЭтоПрисоединенныеФайлы,ЭтоНедействительный");
			Структура.Имя = ОбъектМетаданных.Имя;
			Структура.Синоним = ОбъектМетаданных.Представление();
			Структура.ЭтоПрисоединенныеФайлы = СтрЗаканчиваетсяНа(НРег(Структура.Имя), "присоединенныефайлы");
			Структура.ЭтоНедействительный = СтрНачинаетсяС(НРег(Структура.Имя), "удалить");
			
			МассивОбъектов.Добавить(Структура);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьВарианты(Заголовок)  
	Результат = мВариантыТипов.Получить(Заголовок);
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	мДеревоМетаданных = ПолучитьДеревоКонфигурацииНаСервере();
	
	ЗапросИИ = Заголовок;
	
	НовыеВарианты = Новый Массив;
	
	Настройки = РаботаСИИ().ПолучитьНастройки();
	Настройки.ПровайдерИИ = ПровайдерИИ;
	Настройки.МодельИИ = МодельИИ;
	Настройки.ТокенИИ = ТокенИИ;
	
	Ответ = РаботаСИИ().ПолучитьВозможныеТипы(ЗапросИИ, Настройки);
	
	Если Ответ = Неопределено Тогда
		ВызватьИсключение "Не удалось получить ответ!";
	КонецЕсли;
	
	ПозицияНачала = СтрНайти(Ответ, "[");
	Ответ = Сред(Ответ, ПозицияНачала);
	
	ОтветМассив = СлужебныеФункции().JSONВСтруктуру(Ответ);
	
	МассивЕдинственноеЧисло = Новый Массив;
	МассивМножественноеЧисло = Новый Массив;
	
	Для Каждого СтрОтвет Из ОтветМассив Цикл
		ЕдинственноеЧисло = НРег(СтрОтвет.ЕдинственноеЧисло);
		МножественноеЧисло = НРег(СтрОтвет.МножественноеЧисло);
		
		Если ЕдинственноеЧисло = "номенклатура" Тогда
			МножественноеЧисло = "номенклатура";
		КонецЕсли;
		
		МассивЕдинственноеЧисло.Добавить(ЕдинственноеЧисло);                 
		МассивМножественноеЧисло.Добавить(МножественноеЧисло);
	КонецЦикла;

	Варианты = Новый СписокЗначений;     
	МассивВарианты = Новый Массив;     

	
	Индекс = 0;
	Для Каждого МножественноеЧисло Из МассивМножественноеЧисло Цикл
		ВариантДобавлен = Ложь;
		Для Каждого ЭлементМетаданных Из мДеревоМетаданных.Справочники Цикл     
			ПолноеИмя = "СправочникСсылка." + ЭлементМетаданных.Имя;
			Если МассивВарианты.Найти(ПолноеИмя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементМетаданных.ЭтоПрисоединенныеФайлы Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементМетаданных.ЭтоНедействительный Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(НРег(ЭлементМетаданных.Имя), МножественноеЧисло) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Расстояние = РасстояниеЛевенштейна(НРег(ЭлементМетаданных.Имя), МножественноеЧисло);
			Варианты.Добавить(Расстояние, ПолноеИмя);
			МассивВарианты.Добавить(ПолноеИмя);
			Если Расстояние = 0 Тогда
				ВариантДобавлен = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементМетаданных Из мДеревоМетаданных.Перечисления Цикл
			ПолноеИмя = "ПеречислениеСсылка." + ЭлементМетаданных.Имя;
			Если МассивВарианты.Найти(ПолноеИмя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементМетаданных.ЭтоПрисоединенныеФайлы Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементМетаданных.ЭтоНедействительный Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(НРег(ЭлементМетаданных.Имя), МножественноеЧисло) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Расстояние = РасстояниеЛевенштейна(НРег(ЭлементМетаданных.Имя), МножественноеЧисло);
			Варианты.Добавить(Расстояние, ПолноеИмя);
			МассивВарианты.Добавить(ПолноеИмя); 
			Если Расстояние = 0 Тогда
				ВариантДобавлен = Истина;
			КонецЕсли;
		КонецЦикла;		
		
		Если НЕ ВариантДобавлен Тогда
			НовыеВарианты.Добавить(ОтветМассив[Индекс].МножественноеЧисло);
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Варианты.СортироватьПоЗначению();
	МассивРезультат = Новый Массив;
	Для Каждого Вариант Из Варианты Цикл
		МассивРезультат.Добавить(Вариант.Представление);
	КонецЦикла;
	
	Результат = Новый Структура("Существующие,Новые", МассивРезультат, НовыеВарианты);
	мВариантыТипов.Вставить(Заголовок, Результат);
	
	Возврат Результат;
КонецФункции

#КонецОбласти   


&НаКлиенте
Процедура ЗаполнитьДеревоЭлементов(ЭлементыАСД, ЭлементыДерева)
	Для Каждого ЭлементАСД Из ЭлементыАСД Цикл
		НовыйЭлементДерева = ЭлементыДерева.Добавить();      
		
		Если ЭлементАСД.НаборСвойств.Свойство("Заголовок") Тогда
			НовыйЭлементДерева.Представление = ЭлементАСД.НаборСвойств.Заголовок;
		Иначе
			НовыйЭлементДерева.Представление = ЭлементАСД.Тип;
		КонецЕсли;
		
		Если НЕ ЭлементАСД.Свойство("Элементы") Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьДеревоЭлементов(ЭлементАСД.Элементы, НовыйЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры


#Область ЗаполнениеПоФорме 

&НаСервере
Функция ПолучитьЗначенияРеквизитовФормыНаСервере()
	Результат = Новый Структура;
	
	Для Каждого СтрокаРеквизит Из ТаблицаСуществующихРеквизитов Цикл
		ЗначениеРеквизита = ЭтотОбъект[СтрокаРеквизит.ИмяРеквизита];
		Если ТипЗнч(ЗначениеРеквизита) = Тип("ДанныеФормыКоллекция") ИЛИ ТипЗнч(ЗначениеРеквизита) =  Тип("ДанныеФормыДерево") Тогда           
			ОписаниеТаблицы = ПолучитьОписаниеТаблицы();
			Результат.Вставить(СтрокаРеквизит.ИмяРеквизитаБезПрефикса, ОписаниеТаблицы);
			ЗаполнитьЗначениеТабличногоЭлемента(СтрокаРеквизит.ИмяРеквизита, ОписаниеТаблицы);
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(СтрокаРеквизит.ИмяРеквизитаБезПрефикса, ЗначениеРеквизита);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции   

&НаСервере
Функция ПолучитьОписаниеТаблицы()
	Возврат Новый Структура("data,items", Новый Структура, Новый Массив)
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначениеТабличногоЭлемента(ИмяТаблицы, ОписаниеТаблицы)
	Таблица = РеквизитФормыВЗначение(ИмяТаблицы);
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		ЗаполнитьОписанияПоСтрокамТаблицы(ОписаниеТаблицы, Таблица);
		Возврат;
	КонецЕсли;       
	ЗаполнитьОписанияПоСтрокамДерева(ОписаниеТаблицы, Таблица.Колонки, Таблица);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписанияПоСтрокамДерева(ОписаниеСтрокиРодитель, Колонки, Родитель)
	Строки = Родитель.Строки;
	
	Для Каждого Строка Из Строки Цикл
		ОписаниеСтроки = ЗаполнитьОписанияПоСтрокеТаблицы(Колонки, Строка);
		ОписаниеСтрокиРодитель.items.Добавить(ОписаниеСтроки);
		
		ЗаполнитьОписанияПоСтрокамДерева(ОписаниеСтроки, Колонки, Строка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписанияПоСтрокамТаблицы(ОписаниеСтрокиРодитель, Таблица)
	Для Каждого Строка Из Таблица Цикл
		ОписаниеСтроки = ЗаполнитьОписанияПоСтрокеТаблицы(Таблица.Колонки, Строка);  
		ОписаниеСтрокиРодитель.items.Добавить(ОписаниеСтроки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОписанияПоСтрокеТаблицы(Колонки, Строка) 
	Результат = ПолучитьОписаниеТаблицы();
	Для Каждого Колонка Из Колонки Цикл
		Результат.data.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
	КонецЦикла;   
	
	Возврат Результат;
КонецФункции


#КонецОбласти   

#Область АПИ

&НаКлиенте
Процедура АПИ_Форматировать()
	мКонтекстОкнаРедактораHTML.formatText();	
КонецПроцедуры

&НаКлиенте
Процедура АПИ_УстановитьТекст(Текст)
	мКонтекстОкнаРедактораHTML.setText(Текст);	
КонецПроцедуры

&НаКлиенте
Процедура АПИ_ВставитьТекстВПозицию(Текст)
	мКонтекстОкнаРедактораHTML.insertText(Текст);	
КонецПроцедуры

&НаКлиенте
Процедура АПИ_ЗаполнитьЗначения(Текст)
	мКонтекстОкнаРедактораHTML.setValues(Текст);	
КонецПроцедуры


#КонецОбласти   

#Область ИнициализацияДанных

ЭтоLinux = Ложь;
СистемнаяИнформация = Новый СистемнаяИнформация;

Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
	ЭтоLinux = Истина;
КонецЕсли;

мПрефикс = "__";

#КонецОбласти
