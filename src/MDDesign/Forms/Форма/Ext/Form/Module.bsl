#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СведенияОВнешнейОбработке = ОбработкаОбъект.СведенияОВнешнейОбработке();	
	
	Версия = СведенияОВнешнейОбработке.Версия;
	
	ЭтаФорма.Заголовок = СтрШаблон("MDDesign. Версия %1", Версия);
	
	ЭтаФорма.__ИдентификаторОбработки = ОбработкаОбъект.Метаданные().ПолноеИмя();	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура __ПостроитьФорму(Команда)
	ФормаГруппы = Парсинг();
	
	ВыполнитьПостроениеНаСервере(ФормаГруппы);
КонецПроцедуры

&НаКлиенте
Процедура __Форматировать(Команда)
	ФормаГруппы = Парсинг();
	
	ПараметрыВыполнения = НовыеПараметрыФорматирования(Истина, 0);
	ВыполнитьФорматирование(ПараметрыВыполнения, ФормаГруппы);
	
	ФормаГруппы.Формат.Результат.Очистить();
	
	ПараметрыВыполнения = НовыеПараметрыФорматирования(Ложь, 0);
	ВыполнитьФорматирование(ПараметрыВыполнения, ФормаГруппы);
	
	Результат = Новый Массив;
	Для Каждого Строка Из ФормаГруппы.Формат.Результат Цикл
		Результат.Добавить(СокрП(Строка)); 	
	КонецЦикла;
	
	ЭтаФорма.__Редактор = СтрСоединить(Результат, Символы.ПС);
КонецПроцедуры

&НаКлиенте
Процедура __ДобавитьКартинку(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКартинкиЗавершение", ЭтотОбъект);
						 
	ОткрытьФорму(__ИдентификаторОбработки + ".Форма.ФормаВыбораКартинки", , ЭтаФорма, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.__Редактор.ВыделенныйТекст = "@" + РезультатЗакрытия;
КонецПроцедуры
 
&НаКлиенте
Процедура __КомандаЗаглушка(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура СообщитьОбОшибкеПарсинга(Строка, Столбец, Сообщение, Отказ)
	Отказ = Истина;
	ТекстСообщения = СтрШаблон("%1 [%2, %3]", Сообщение, Строка, Столбец);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();  
	
	Элементы.__Редактор.УстановитьГраницыВыделения(Строка, Столбец, Строка, Столбец + 1);
КонецПроцедуры

&НаКлиенте
Функция ЗначениеВМассиве(Знач Значение)
	Результат = Новый Массив;
	Результат.Добавить(Значение);
	Возврат Результат;
КонецФункции

#Область РаботаСТекстом

&НаКлиенте
Функция НовыйТекст(Значение, Верх, Лево)
	Результат = НовыйПустойТекст();
	Результат.Значение = Значение;
	
	Результат.Координаты.Добавить(НовыеКоординаты(Верх, Лево));
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция НовыйПустойТекст()
	Результат = Новый Структура("Значение,Координаты", "", Новый массив);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция НовыеКоординаты(Верх, Лево)
	Возврат Новый Структура("Верх,Лево", Верх, Лево);
КонецФункции

&НаКлиенте
Функция ТекстЛев(Текст, ЧислоСимволов)  
	СтрДоПосле = ТекстРазделитьПоИндексу(Текст, ЧислоСимволов + 1);
	
	Возврат СтрДоПосле.До;
КонецФункции

&НаКлиенте
Функция ТекстНачинаетсяС(Текст, СтрокаПоиска)
	Возврат СтрНачинаетсяС(СокрЛ(Текст.Значение), СтрокаПоиска);
КонецФункции

&НаКлиенте
Функция ТекстЗаканчиваетсяНа(Текст, СтрокаПоиска)
	Возврат СтрЗаканчиваетсяНа(СокрП(Текст.Значение), СтрокаПоиска);
КонецФункции

&НаКлиенте
Функция ТекстСред(Текст, НачальныйНомер, ЧислоСимволов = Неопределено)
	СтрДоПосле = ТекстРазделитьПоИндексу(Текст, НачальныйНомер);
	
	Если ЧислоСимволов = Неопределено Тогда
		Возврат СтрДоПосле.После;
	КонецЕсли;
	
	СтрДоПосле = ТекстРазделитьПоИндексу(СтрДоПосле.После, ЧислоСимволов + 1);

	Возврат СтрДоПосле.До;
КонецФункции  

&НаКлиенте
Функция ТекстРазделитьПоИндексу(Текст, Знач Индекс)
	ТекстДо = НовыйПустойТекст();
	ТекстПосле = НовыйПустойТекст();
	
	ТекстДоДобавлен = Ложь;
	МассивТекст = ТекстРазделить(Текст);
	Для Каждого ТекТекст Из МассивТекст Цикл
		Если ТекстДоДобавлен Тогда
			ТекстДобавить(ТекстПосле, ТекТекст);
			Продолжить;
		КонецЕсли;
		
		Длина = ТекстДлина(ТекТекст);
		Если Индекс > Длина Тогда
			Индекс = Индекс - Длина;
			ТекстДобавить(ТекстДо, ТекТекст);
			Продолжить;
		КонецЕсли;
		
		Если Индекс > 1 Тогда
			СтрокаДо = Лев(ТекТекст.Значение, Индекс - 1); 
			НовыйТекстДо = НовыйТекст(СтрокаДо, ТекТекст.Координаты[0].Верх, ТекТекст.Координаты[0].Лево);
			ТекстДобавить(ТекстДо, НовыйТекстДо);
		КонецЕсли;

		СтрокаПосле = Сред(ТекТекст.Значение, Индекс); 
		НовыйТекстПосле = НовыйТекст(СтрокаПосле, ТекТекст.Координаты[0].Верх, ТекТекст.Координаты[0].Лево + Индекс - 1);
		ТекстДобавить(ТекстПосле, НовыйТекстПосле);
		
		ТекстДоДобавлен = Истина;
	КонецЦикла;

	
	Возврат Новый Структура("До,После", ТекстДо, ТекстПосле);
КонецФункции

&НаКлиенте
Функция ТекстДлина(Текст)
	Возврат СтрДлина(Текст.Значение);
КонецФункции

&НаКлиенте
Процедура ТекстДобавить(Текст, ДобавляемыйТекст)
	Если Текст.Координаты.Количество() > 0 Тогда
		Текст.Значение = Текст.Значение + Символы.ПС;
	КонецЕсли;
	
	Текст.Значение = Текст.Значение + ДобавляемыйТекст.Значение;
	
	Для Каждого Координата Из ДобавляемыйТекст.Координаты Цикл
		Текст.Координаты.Добавить(Координата);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ТекстРазделить(Текст)
	Результат = Новый Массив;
	Значения = СтрРазделить(Текст.Значение, Символы.ПС);
	
	Для Сч = 0 По Значения.ВГраница() Цикл
		Значение = Значения[Сч];
		Координата = Текст.Координаты[Сч];  
		НовыйТекст = НовыйТекст(Значение, Координата.Верх, Координата.Лево);
		Результат.Добавить(НовыйТекст);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СтрНайтиСЭкранированием(Знач Строка, ПодстрокаПоиска, Направление = "СНачала")
	Строка = СтрЗаменить(Строка, Символы.ПС, "");
	НомерВхождения = 1;
	Пока Истина Цикл
		Позиция = СтрНайти(Строка, ПодстрокаПоиска, НаправлениеПоиска[Направление], , НомерВхождения);	
		НомерВхождения = НомерВхождения + 1;
		
		Если Направление = "СНачала" Тогда
			Подстрока = Лев(Строка, Позиция);
		Иначе
			Подстрока = Сред(Строка, Позиция);
		КонецЕсли;

		Если Позиция = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		Если СтрЧислоВхождений(Подстрока, """") % 2 <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(Подстрока, "'") % 2 <> 0 Тогда
			Продолжить;
		КонецЕсли;   
		
		Возврат Позиция;
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ПолучитьКлючЗначениеТекста(Знач Текст, Разделитель, Направление = "СНачала")
	Результат = Новый Структура("Значение,Ключ,Найден", Текст, "", Ложь);
	
	Позиция = СтрНайтиСЭкранированием(Текст.Значение, Разделитель, Направление);
	
	Если Позиция = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Результат.Найден = Истина;
	Результат.Ключ =  ТекстЛев(Текст, Позиция - 1);
	Результат.Значение = ТекстСред(Текст, Позиция + СтрДлина(Разделитель));
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПодгруппыСтроки(Знач Строка, Разделитель)
	Результат = Новый Массив;
	
	Пока Истина Цикл
		СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Строка, Разделитель);
		Если НЕ СтрКлючЗначение.Найден Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СтрКлючЗначение.Ключ);
		
		Строка = СтрКлючЗначение.Значение;
	КонецЦикла;

	Результат.Добавить(Строка);
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Функция ВыделитьНачальныйКонечныйСимволы(Текст, НачальныеСимволы = Неопределено, КонечныеСимволы = Неопределено)
	Результат = Новый Структура("Текст,ЕстьНачальный,ЕстьКонечный", Текст, Ложь, Ложь);
	
	ТекТекст = Текст;
	
	Если НачальныеСимволы <> Неопределено И ТекстНачинаетсяС(ТекТекст, НачальныеСимволы) Тогда  
		ГруппаСтроки = ПолучитьГруппуСтроки(ТекТекст, Неопределено, НачальныеСимволы, "СНачала");
		
		Если ГруппаСтроки.Найден Тогда
			Результат.ЕстьНачальный = Истина;
			ТекТекст = ГруппаСтроки.Текст;
		КонецЕсли;
	КонецЕсли;   
	
	Если КонечныеСимволы <> Неопределено И ТекстЗаканчиваетсяНа(ТекТекст, КонечныеСимволы) Тогда   
		ГруппаСтроки = ПолучитьГруппуСтроки(ТекТекст, КонечныеСимволы, Неопределено, "СКонца");
		
		Если ГруппаСтроки.Найден Тогда
			Результат.ЕстьКонечный = Истина;
			ТекТекст = ГруппаСтроки.Текст;			
		КонецЕсли;
	КонецЕсли;

	Результат.Текст = ТекТекст;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьГруппуСтроки(Текст, Открывающая, Закрывающая = Неопределено, Направление = "СНачала")
	Результат = Новый Структура("Текст,Группа,Найден", Текст, "", Ложь);

	Если Открывающая <> Неопределено И Направление = "СНачала" И НЕ ТекстНачинаетсяС(Текст, Открывающая) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Если Закрывающая <> Неопределено И Направление = "СКонца" И НЕ ТекстЗаканчиваетсяНа(Текст, Закрывающая) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Если Направление = "СНачала" Тогда    
		Если Открывающая <> Неопределено Тогда
			КЗСтроки = ПолучитьКлючЗначениеТекста(Результат.Текст, Открывающая, Направление);
			Результат.Текст = КЗСтроки.Значение;
		КонецЕсли;
		
		Разделитель = Закрывающая;

		ПолеГруппа = "Ключ";
		ПолеСтрока = "Значение";
	Иначе
		Если Закрывающая <> Неопределено Тогда
			КЗСтроки = ПолучитьКлючЗначениеТекста(Результат.Текст, Закрывающая, Направление);
			Результат.Текст = КЗСтроки.Ключ;
		КонецЕсли;
		
		Разделитель = Открывающая;
		
		ПолеГруппа = "Значение";
		ПолеСтрока = "Ключ";
	КонецЕсли;
	
	СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Результат.Текст, Разделитель, Направление);
	Если НЕ СтрКлючЗначение.Найден Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Найден = Истина;
	Результат.Текст = СтрКлючЗначение[ПолеСтрока];
	Результат.Группа = СтрКлючЗначение[ПолеГруппа];
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти   

#Область Парсинг

&НаКлиенте
Функция Парсинг()
	МассивСтрок = СтрРазделить(__Редактор, Символы.ПС);
	
	__ТаблицаРеквизитов.Очистить();
	
	ДанныеГрупп = ПарсингСтруктуры(МассивСтрок);

	ПарсингВертикальнойГруппы(ДанныеГрупп); 
	
	ПарсингОчистка(ДанныеГрупп);

	Для Каждого Строка Из __ТаблицаРеквизитов Цикл
		ЗаполнитьПолучитьИмяРеквизита(__ТаблицаРеквизитов, Строка);
	КонецЦикла;
	
	Возврат ДанныеГрупп;
КонецФункции

#Область ПарсингГрупп

&НаКлиенте
Функция ПарсингСтруктуры(МассивСтрок)  
	ГруппаФормы = ПолучитьОписаниеВертикальнойГруппы(Неопределено);
	
	ПараметрыВыполнения = Новый Структура("Форма,Группы", ГруппаФормы, Новый Массив);
	ПараметрыВыполнения.Группы.Добавить(ГруппаФормы);
	
	НомерСтроки = 1;
	Для Каждого Строка Из МассивСтрок Цикл
		Текст = НовыйТекст(Строка, НомерСтроки, 1);
		ПарсингГруппПоСтроке(ПараметрыВыполнения, Текст);

		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат ПараметрыВыполнения.Форма;
КонецФункции

&НаКлиенте
Процедура ПарсингГруппПоСтроке(ПараметрыВыполнения, Текст)
	ТекущиеГруппы = Новый Массив;
	
	Разделитель = ПостоянныйПараметр("РазделительГруппа");
	ТекстВертикальныеГруппы = ПолучитьПодгруппыСтроки(Текст, Разделитель);        

	Сч = 0;
	Для Сч = 0 По ТекстВертикальныеГруппы.ВГраница() Цикл
		ТекстВертикальнаяГруппа = ТекстВертикальныеГруппы[Сч];
		ПрошлаяГруппаОписание = ПараметрыВыполнения.Группы[Сч];
		ПарсингДобавляемыхГрупп(ТекущиеГруппы, ТекстВертикальнаяГруппа, ПрошлаяГруппаОписание);
	КонецЦикла;
	
	ПараметрыВыполнения.Группы = ТекущиеГруппы;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингДобавляемыхГрупп(ТекущиеГруппы, ТекстГруппа, ПрошлаяГруппа) 
	
	Если ТекстНачинаетсяС(ТекстГруппа, "/") Тогда 
		Если ПрошлаяГруппа.Тип = "Страница" Тогда
			Страницы = ПрошлаяГруппа.Родитель;
		Иначе
			Страницы = ПолучитьОписаниеСтраниц(ПрошлаяГруппа);

			СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
			СтрокаРеквизит.УИД = Страницы.УИД;
			СтрокаРеквизит.ТипРеквизита = "Страницы";  
			СтрокаРеквизит.РабочееИмяЭлемента = "Страницы";
		КонецЕсли;     
		
		Содержимое = ВыделитьНачальныйКонечныйСимволы(ТекстГруппа, "/");
		Текст = Содержимое.Текст;
		
		НоваяСтраница = ПолучитьОписаниеСтраницы(Страницы); 
		НоваяСтраница.НаборСвойств.Заголовок = СокрЛП(Текст.Значение);     
		
		СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
		СтрокаРеквизит.УИД = НоваяСтраница.УИД;
		СтрокаРеквизит.ТипРеквизита = "Страница";  
		Если НЕ ПустаяСтрока(НоваяСтраница.НаборСвойств.Заголовок) Тогда
			СтрокаРеквизит.РабочееИмяЭлемента = НоваяСтраница.НаборСвойств.Заголовок;
		Иначе
			СтрокаРеквизит.РабочееИмяЭлемента = "Страница";
		КонецЕсли;
		
		ТекущиеГруппы.Добавить(НоваяСтраница);
		
		Возврат;
	КонецЕсли;

	РазделительОднострочнаяГруппа = ПостоянныйПараметр("РазделительГруппаОднострочная");
	
	ДобавляемыеГруппы = ПолучитьПодгруппыСтроки(ТекстГруппа, РазделительОднострочнаяГруппа);
	
	Если ДобавляемыеГруппы.Количество() > 1 Тогда        
		ОднострочнаяГруппа = ПолучитьОписаниеОднострочнойГруппы(ПрошлаяГруппа);
		
		СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
		СтрокаРеквизит.УИД = ОднострочнаяГруппа.УИД;
		СтрокаРеквизит.ТипРеквизита = "Группа";
		СтрокаРеквизит.РабочееИмяРеквизита = "Группа";
		
		Для Каждого ДобавляемаяГруппа Из ДобавляемыеГруппы Цикл
			СтрочныйЭлемент = ПолучитьОписаниеСтрочногоЭлемента(ОднострочнаяГруппа);
			СтрочныйЭлемент.Текст =  ДобавляемаяГруппа;
		КонецЦикла;
		
		ТекущиеГруппы.Добавить(ПрошлаяГруппа);
		
		Возврат;
	КонецЕсли;

	Разделитель = ПостоянныйПараметр("РазделительГруппаДобавить");
	
	ДобавляемыеГруппы = ПолучитьПодгруппыСтроки(ТекстГруппа, Разделитель);
	
	// Не добавляются новые группы
	Если ДобавляемыеГруппы.Количество() <= 1 Тогда   
		СтрочныйЭлемент = ПолучитьОписаниеСтрочногоЭлемента(ПрошлаяГруппа);
		СтрочныйЭлемент.Текст =  ТекстГруппа;
		
		ТекущиеГруппы.Добавить(ПрошлаяГруппа);
		Возврат;
	КонецЕсли;
	
	ГоризонтальнаяГруппа = ПолучитьОписаниеГоризонтальнойГруппы(ПрошлаяГруппа);
	
	СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
	СтрокаРеквизит.УИД = ГоризонтальнаяГруппа.УИД;
	СтрокаРеквизит.ТипРеквизита = "Группа";
	СтрокаРеквизит.РабочееИмяРеквизита = "Группа";
	
	// Первый элемент пропускаем
	Для Сч = 1 По ДобавляемыеГруппы.ВГраница() Цикл
		ДобавляемаяГруппа = ДобавляемыеГруппы[Сч];

		НоваяВертикальнаяГруппа = ПолучитьОписаниеВертикальнойГруппы(ГоризонтальнаяГруппа);
		
		СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
		СтрокаРеквизит.УИД = НоваяВертикальнаяГруппа.УИД;
		СтрокаРеквизит.ТипРеквизита = "Группа";
		СтрокаРеквизит.РабочееИмяРеквизита = "Группа";
		
		ЗаголовокЭлемента = СокрЛП(ДобавляемаяГруппа.Значение);
		НоваяВертикальнаяГруппа.НаборСвойств.Заголовок = ЗаголовокЭлемента;
		НоваяВертикальнаяГруппа.НаборСвойств.ОтображатьЗаголовок = НЕ ПустаяСтрока(ЗаголовокЭлемента);
		
		ТекущиеГруппы.Добавить(НоваяВертикальнаяГруппа);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеВертикальнойГруппы(ГоризонтальнаяГруппа = Неопределено)
	Результат = ПолучитьОписаниеЭлемента("ВертикальнаяГруппа", ГоризонтальнаяГруппа);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.НаборСвойств.Вставить("ОтображатьЗаголовок", Ложь);
	Результат.Вставить("Элементы", Новый Массив);
	Результат.Вставить("ЭлементыПарсинг", Новый Массив);
	
	Результат.Вставить("Текст", НовыйПустойТекст());
	
	Если ГоризонтальнаяГруппа <> Неопределено Тогда
		ГоризонтальнаяГруппа.Элементы.Добавить(Результат);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции  

&НаКлиенте
Функция ПолучитьОписаниеОднострочнойГруппы(ВертикальнаяГруппа)
	Результат = ПолучитьОписаниеЭлемента("ОднострочнаяГруппа", ВертикальнаяГруппа);
	
	Результат.Вставить("Элементы", Новый Массив);
	Результат.Вставить("ЭлементыПарсинг", Новый Массив);
	
	ВертикальнаяГруппа.ЭлементыПарсинг.Добавить(Результат);
	
	Возврат Результат;
КонецФункции  

&НаКлиенте
Функция ПолучитьОписаниеГоризонтальнойГруппы(ВертикальнаяГруппа)
	Результат = ПолучитьОписаниеЭлемента("ГоризонтальнаяГруппа", ВертикальнаяГруппа);
	Результат.Вставить("Элементы", Новый Массив);
	
	ВертикальнаяГруппа.ЭлементыПарсинг.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПарсингОчистка(Элемент)
	Если Элемент.Свойство("Родитель") Тогда
		Элемент.Удалить("Родитель");
	КонецЕсли;	
	
	Если Элемент.Свойство("ЭлементыПарсинг") Тогда
		Элемент.Удалить("ЭлементыПарсинг");
	КонецЕсли;	

	ОчищаемыеЭлементы = Новый Массив;
	ОчищаемыеЭлементы.Добавить("Элементы");
	ОчищаемыеЭлементы.Добавить("Строки");
	ОчищаемыеЭлементы.Добавить("Колонки");
	ОчищаемыеЭлементы.Добавить("Ячейки");

	Для Каждого ОчищаемыйЭлемент Из ОчищаемыеЭлементы Цикл
		Если НЕ Элемент.Свойство(ОчищаемыйЭлемент) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Подэлемент Из Элемент[ОчищаемыйЭлемент] Цикл
			ПарсингОчистка(Подэлемент);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПарсингСтрочныхЭлементов

&НаКлиенте
Функция ПарсингНабораСвойств(НаборСвойств, Текст) 
    Результат = Текст;
	
	СтрСвойства = ПолучитьГруппуСтроки(Текст, "{", "}", "СКонца");
	
	Если НЕ СтрСвойства.Найден Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = СтрСвойства.Текст;
	
	МассивСвойства = ПолучитьПодгруппыСтроки(СтрСвойства.Группа, ";");        

	Для Каждого Свойство Из МассивСвойства Цикл
		СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Свойство, "=");
		ИмяСвойства = СокрЛП(СтрКлючЗначение.Ключ.Значение);
		ЗначениеСвойства = СокрЛП(СтрКлючЗначение.Значение.Значение);
		НаборСвойств.Вставить(ИмяСвойства, ЗначениеСвойства);
	КонецЦикла;  
	
	Возврат Результат;
КонецФункции    

&НаКлиенте
Процедура ЗаполнитьНаборСвойств(ПараметрыВыполнения, Элемент)
	Для Каждого КлючЗначение Из ПараметрыВыполнения.НаборСвойств Цикл
		Элемент.НаборСвойств.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;	
	
	ПараметрыВыполнения.НаборСвойств = Новый Структура;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеЭлемента(Тип, Родитель)  
	Результат = Новый Структура;
	Результат.Вставить("Тип", Тип); 
	Результат.Вставить("УИД", Новый УникальныйИдентификатор);
	Результат.Вставить("Родитель", Родитель); 
	
	Результат.Вставить("НаборСвойств", Новый Структура);
	Результат.Вставить("Координаты", Новый Массив);
	Результат.Вставить("Формат", Новый Структура("Результат,Длина", Новый Массив, 0));
	Результат.Вставить("ИмяРеквизита", "");
	Результат.Вставить("ИмяЭлемента", "");
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьТекстСКартинкой(Текст)
	Результат = Новый Структура("Текст,Картинка,ПоложениеКартинки", СокрЛП(Текст.Значение), Неопределено, "Лево");
	
	Если ТекстНачинаетсяС(Текст, "@")  Тогда
		Результат.ПоложениеКартинки = "Лево";
		
		ГруппаКартинка = ПолучитьГруппуСтроки(Текст, "@", " ");
		Если ГруппаКартинка.Найден Тогда
			Результат.Текст = СокрЛП(ГруппаКартинка.Текст.Значение);
			Результат.Картинка = СокрЛП(ГруппаКартинка.Группа.Значение);
		Иначе
		//Вся строка - картинка
			Результат.Текст = "";
			Результат.Картинка = СокрЛП(ГруппаКартинка.Текст.Значение);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	ГруппаКартинка = ПолучитьГруппуСтроки(Текст, "@", , "СКонца");
	Если НЕ ГруппаКартинка.Найден Тогда
		Возврат Результат;
	КонецЕсли;
	Результат.Текст = СокрЛП(ГруппаКартинка.Текст.Значение);
	Результат.Картинка = СокрЛП(ГруппаКартинка.Группа.Значение);
	Результат.ПоложениеКартинки = "Право";
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЭтоКонечныйЭлемент(Знач Значение)
	Значение = СокрЛП(Значение);
	Возврат Значение <> "" И СтрЗаменить(Значение, "-","") = "";
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыВыполненияСтрочныхЭлементов(Родитель, Элементы)
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Родитель", Родитель);

	ПараметрыВыполнения.Вставить("МассивЭлементов", Элементы);
	ПараметрыВыполнения.Вставить("Индекс", 0);
	
	ПараметрыВыполнения.Вставить("НаборСвойств", Новый Структура);

	ПараметрыВыполнения.Вставить("Таблица", Неопределено);
	ПараметрыВыполнения.Вставить("ТаблицаЗаголовокЗаполнен", Ложь);
	ПараметрыВыполнения.Вставить("ТаблицаИерархия", Новый Массив);
	ПараметрыВыполнения.Вставить("ТаблицаПолныйФормат", Ложь);

	ПараметрыВыполнения.Вставить("ПолеВвода", Неопределено);

	ПараметрыВыполнения.Вставить("КоманднаяПанельСМеню", Неопределено);
	ПараметрыВыполнения.Вставить("КоманднаяПанельИерархия", Новый Массив);
	
	Возврат ПараметрыВыполнения;
КонецФункции

&НаКлиенте
Процедура ПарсингСтрочныхЭлементов(ПараметрыВыполнения)
	Пока Истина Цикл
		ПарсингСтрочногоЭлемента(ПараметрыВыполнения); 
		
		Если НЕ ПерейтиНаСледующийЭлемент(ПараметрыВыполнения) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингСтрочногоЭлемента(ПараметрыВыполнения)

	Если ПарсингГоризонтальнойГруппы(ПараметрыВыполнения) Тогда
		Возврат;
	КонецЕсли;

	Если ПарсингОднострочнойГруппы(ПараметрыВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПарсингСтраниц(ПараметрыВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПарсингКоманднойПанели(ПараметрыВыполнения) Тогда
		ПараметрыВыполнения.ПолеВвода = Неопределено;
		ПараметрыВыполнения.Таблица = Неопределено;    
		ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен = Ложь;    
		ПараметрыВыполнения.ТаблицаИерархия = Новый Массив;    
			
		Возврат;
	КонецЕсли;
	
	Если ПарсингТаблицы(ПараметрыВыполнения) Тогда
		ПараметрыВыполнения.ПолеВвода = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	ТекЭлемент = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	Текст = ТекЭлемент.Текст;
	
	ТекстБезСвойств = ПарсингСвойствСтрочногоЭлемента(Текст, ПараметрыВыполнения.НаборСвойств);
	
	Если ПарсингПоляВвода(ПараметрыВыполнения, ТекстБезСвойств) Тогда
		ПараметрыВыполнения.Таблица = Неопределено;    
		ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен = Ложь;    
		ПараметрыВыполнения.ТаблицаИерархия = Новый Массив;    
		
		Возврат;
	КонецЕсли;

	Если ПарсингФлажкаЛевый(ПараметрыВыполнения, ТекстБезСвойств) Тогда
		ПараметрыВыполнения.ПолеВвода = Неопределено;
		ПараметрыВыполнения.Таблица = Неопределено;    
		ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен = Ложь;    
		ПараметрыВыполнения.ТаблицаИерархия = Новый Массив;    
		
		Возврат;
	КонецЕсли;
	
	Если ПарсингФлажкаПравый(ПараметрыВыполнения, ТекстБезСвойств) Тогда
		ПараметрыВыполнения.ПолеВвода = Неопределено;
		ПараметрыВыполнения.Таблица = Неопределено;    
		ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен = Ложь;    
		ПараметрыВыполнения.ТаблицаИерархия = Новый Массив;    
		
		Возврат;
	КонецЕсли;

	Если ПарсингМногострочногоПоляВвода(ПараметрыВыполнения, ТекстБезСвойств) Тогда
		ПараметрыВыполнения.Таблица = Неопределено;    
		ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен = Ложь;    
		ПараметрыВыполнения.ТаблицаИерархия = Новый Массив;    
		
		Возврат;
	КонецЕсли;

	Если ПарсингНадписи(ПараметрыВыполнения, ТекстБезСвойств) Тогда
		ПараметрыВыполнения.ПолеВвода = Неопределено;
		ПараметрыВыполнения.Таблица = Неопределено;    
		ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен = Ложь;    
		ПараметрыВыполнения.ТаблицаИерархия = Новый Массив;    
		
		Возврат;
	КонецЕсли;

КонецПроцедуры    

&НаКлиенте
Функция ПарсингСвойствСтрочногоЭлемента(Текст, НаборСвойств)
	СтрРасположение = ВыделитьНачальныйКонечныйСимволы(Текст, "->", "<-");
	Текст = СтрРасположение.Текст;
	Если СтрРасположение.ЕстьНачальный И СтрРасположение.ЕстьКонечный Тогда
		НаборСвойств.Вставить("ГоризонтальноеПоложение", "Центр");
	ИначеЕсли СтрРасположение.ЕстьНачальный Тогда
		НаборСвойств.Вставить("ГоризонтальноеПоложение", "Право");
	КонецЕсли;
	
	Возврат ПарсингНабораСвойств(НаборСвойств, Текст);
КонецФункции

#Область ПарсингСтраниц

&НаКлиенте
Функция ПолучитьОписаниеСтраниц(ВертикальнаяГруппа)  
	Результат = ПолучитьОписаниеЭлемента("Страницы", ВертикальнаяГруппа);  
	Результат.Вставить("Элементы", Новый Массив);
	Результат.Вставить("Родитель", ВертикальнаяГруппа);
	
	ВертикальнаяГруппа.ЭлементыПарсинг.Добавить(Результат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеСтрочногоЭлемента(Родитель)  
	Результат = ПолучитьОписаниеЭлемента("СтрочныйЭлемент", Родитель);  
	Результат.Вставить("Родитель", Родитель);
	Результат.Вставить("Текст", Неопределено);
	
	Родитель.ЭлементыПарсинг.Добавить(Результат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеСтраницы(Страницы)  
	Результат = ПолучитьОписаниеЭлемента("Страница", Страницы);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.Вставить("Родитель", Страницы);
	Результат.Вставить("Элементы", Новый Массив);
	Результат.Вставить("ЭлементыПарсинг", Новый Массив);
	Результат.Вставить("Текст", НовыйПустойТекст());
	
	Страницы.Элементы.Добавить(Результат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПарсингСтраниц(ПараметрыВыполнения) 
	Страницы = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	
	Если НЕ Страницы.Тип = "Страницы" Тогда
		 Возврат Ложь;
	КонецЕсли;
	
	Родитель = Страницы.Родитель;
	
	Родитель.Элементы.Добавить(Страницы);
	
	Для Каждого Страница Из Страницы.Элементы Цикл
		ПарсингСтраницы(Страница);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПарсингСтраницы(Страница) 
	ПараметрыВыполнения = ПолучитьПараметрыВыполненияСтрочныхЭлементов(Страница, Страница.ЭлементыПарсинг);
	ПарсингСтрочныхЭлементов(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Функция ПарсингВертикальнойГруппы(ВертикальнаяГруппа)    
	Если НЕ ВертикальнаяГруппа.Тип = "ВертикальнаяГруппа" Тогда
		 Возврат Ложь;
	КонецЕсли;

	ПараметрыВыполнения = ПолучитьПараметрыВыполненияСтрочныхЭлементов(ВертикальнаяГруппа, ВертикальнаяГруппа.ЭлементыПарсинг);
	ПарсингСтрочныхЭлементов(ПараметрыВыполнения);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПарсингОднострочнойГруппы(ПараметрыВыполнения)
	ОднострочнаяГруппа = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	Если НЕ ОднострочнаяГруппа.Тип = "ОднострочнаяГруппа" Тогда
		 Возврат Ложь;
	КонецЕсли;

	ВертикальнаяГруппа = ОднострочнаяГруппа.Родитель;
	ВертикальнаяГруппа.Элементы.Добавить(ОднострочнаяГруппа);
	
	ПараметрыВыполнения = ПолучитьПараметрыВыполненияСтрочныхЭлементов(ОднострочнаяГруппа, ОднострочнаяГруппа.ЭлементыПарсинг);
	ПарсингСтрочныхЭлементов(ПараметрыВыполнения);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПарсингГоризонтальнойГруппы(ПараметрыВыполнения)         
	ГоризонтальнаяГруппа = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	Если НЕ ГоризонтальнаяГруппа.Тип = "ГоризонтальнаяГруппа" Тогда
		 Возврат Ложь;
	КонецЕсли;
	
	ВертикальнаяГруппа = ГоризонтальнаяГруппа.Родитель;
	ВертикальнаяГруппа.Элементы.Добавить(ГоризонтальнаяГруппа);
	
	Для Каждого ВертикальнаяГруппа Из ГоризонтальнаяГруппа.Элементы Цикл
		ПарсингВертикальнойГруппы(ВертикальнаяГруппа);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти 

#Область ПарсингКоманднойПанели

&НаКлиенте
Функция ПолучитьОписаниеКнопки(КоманднаяПанель)  
	Результат = ПолучитьОписаниеЭлемента("Кнопка", КоманднаяПанель);
	Результат.Вставить("Картинка", Неопределено);
	Результат.Вставить("КлючПоиска", "");
	Результат.Вставить("Элементы", Новый Массив);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.НаборСвойств.Вставить("ПоложениеКартинки", "Лево");     
	КоманднаяПанель.Элементы.Добавить(Результат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеГруппыКнопок()  
	Результат = ПолучитьОписаниеЭлемента("ГруппаКнопок", Неопределено);
	Результат.Вставить("Элементы", Новый Массив);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеКоманднойПанели(Родитель)  
	Результат = ПолучитьОписаниеЭлемента("КоманднаяПанель", Родитель); 
	Результат.НаборСвойств.Вставить("ГоризонтальноеПоложение", "Лево");
	Результат.Вставить("Элементы", Новый Массив);
	
	Родитель.Элементы.Добавить(Результат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПарсингКоманднойПанели(ПараметрыВыполнения)  
	ТекЭлемент = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	Текст = ТекЭлемент.Текст;
	
	ПозицияНачало = СтрНайтиСЭкранированием(Текст.Значение, ПостоянныйПараметр("КоманднаяПанельНачало"), "СНачала");
	
	Если ПозицияНачало = 0 Тогда
		 Возврат Ложь;
	КонецЕсли; 
	 
	ТекстПоиск = ТекстСред(Текст, ПозицияНачало);
	
	Буфер = НовыйПустойТекст();	

	Пока Истина Цикл   
		ТекстДобавить(Буфер, Текст);
		
		Если СтрНайтиСЭкранированием(ТекстПоиск.Значение, ПостоянныйПараметр("КоманднаяПанельКонец"), "СКонца") <> 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ ПерейтиНаСледующийЭлемент(ПараметрыВыполнения) Тогда
			Прервать;
		КонецЕсли;
		
		ТекЭлемент = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
		Текст = ТекЭлемент.Текст;
		ТекстПоиск = Текст;
	КонецЦикла;
	
	ПарсингКоманднойПанелиИзТекста(ПараметрыВыполнения, Буфер);    
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПерейтиНаСледующийЭлемент(ПараметрыВыполнения)
	ПараметрыВыполнения.Индекс = ПараметрыВыполнения.Индекс + 1;
	Возврат ПараметрыВыполнения.Индекс <= ПараметрыВыполнения.МассивЭлементов.ВГраница();
КонецФункции

&НаКлиенте
Функция ПолучитьТекущийЭлемент(ПараметрыВыполнения)
	Возврат ПараметрыВыполнения.МассивЭлементов[ПараметрыВыполнения.Индекс];
КонецФункции

&НаКлиенте
Процедура ПарсингКоманднойПанелиИзТекста(ПараметрыВыполнения, Знач Текст)
	Текст = ПарсингСвойствСтрочногоЭлемента(Текст, ПараметрыВыполнения.НаборСвойств);
	
	Содержимое = ВыделитьНачальныйКонечныйСимволы(
		Текст, 
		ПостоянныйПараметр("КоманднаяПанельНачало"), 
		ПостоянныйПараметр("КоманднаяПанельКонец"));

	Текст = Содержимое.Текст;   

	НоваяКоманднаяПанель = ПолучитьОписаниеКоманднойПанели(ПараметрыВыполнения.Родитель);
	ЗаполнитьНаборСвойств(ПараметрыВыполнения, НоваяКоманднаяПанель);
	
	СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
	СтрокаРеквизит.УИД = НоваяКоманднаяПанель.УИД;
	СтрокаРеквизит.ТипРеквизита = "КоманднаяПанель";  
	СтрокаРеквизит.РабочееИмяЭлемента = "КоманднаяПанель";  

	КоманднаяПанельИерархия = Новый Массив;
	
	МассивТекст = ТекстРазделить(Текст);
	Для Индекс = 0 По МассивТекст.ВГраница() Цикл
		ТекТекст = МассивТекст[Индекс];
		
		Если Индекс = 0 Тогда
			ПарсингКоманднойПанелиПерваяСтрока(ПараметрыВыполнения, НоваяКоманднаяПанель, ТекТекст);
			Продолжить;
		КонецЕсли;
		
		ПарсингМеню(
			ПараметрыВыполнения,
			НоваяКоманднаяПанель,
			КоманднаяПанельИерархия,
			ТекТекст);
	КонецЦикла;   
	ПарсингКоманднойПанелиДобавитьГруппыКнопок(НоваяКоманднаяПанель, НоваяКоманднаяПанель);
КонецПроцедуры

&НаКлиенте
Процедура ПарсингКоманднойПанелиПерваяСтрока(ПараметрыВыполнения, НоваяКоманднаяПанель, Текст)
	Кнопки = ПолучитьПодгруппыСтроки(Текст, ПостоянныйПараметр("КоманднаяПанельРазделительКнопок"));
	Для Каждого ОписаниеКнопки Из Кнопки Цикл   
		ПарсингКнопкиКоманднойПанели(ПараметрыВыполнения, НоваяКоманднаяПанель, НоваяКоманднаяПанель, ОписаниеКнопки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингКоманднойПанелиДобавитьГруппыКнопок(НоваяКоманднаяПанель, Родитель)
	ТекНаборЭлементов = Новый Массив;  
	НовыеЭлементы = Новый Массив;
	
	ГруппыКнопок = Новый Массив;
	БылиРазделители =  Ложь;
	
	Для Каждого Элемент Из Родитель.Элементы Цикл  
		Если Элемент.Тип = "Меню" Тогда
			ТекНаборЭлементов.Добавить(Элемент); 
			
			ПарсингКоманднойПанелиДобавитьГруппыКнопок(НоваяКоманднаяПанель, Элемент);
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(Элемент.НаборСвойств.Заголовок) = ПостоянныйПараметр("КоманднаяПанельРазделительМеню") Тогда
			ЭлементГруппаКнопок = ПарсингГруппыКнопок(НоваяКоманднаяПанель, ТекНаборЭлементов);
			ГруппыКнопок.Добавить(ЭлементГруппаКнопок);
			
			НовыеЭлементы.Добавить(ЭлементГруппаКнопок);
			ТекНаборЭлементов.Очистить();
			
			БылиРазделители = Истина;
			
			Продолжить;
		КонецЕсли;
		ТекНаборЭлементов.Добавить(Элемент); 
	КонецЦикла;	 
	
	Если БылиРазделители И ТекНаборЭлементов.Количество() > 0 Тогда
		ЭлементГруппаКнопок = ПарсингГруппыКнопок(НоваяКоманднаяПанель, ТекНаборЭлементов);
		ГруппыКнопок.Добавить(ЭлементГруппаКнопок);
		
		НовыеЭлементы.Добавить(ЭлементГруппаКнопок);
	Иначе
		Для Каждого ТекЭлемент Из ТекНаборЭлементов Цикл
			НовыеЭлементы.Добавить(ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Родитель.Элементы = НовыеЭлементы;
	
	Для Каждого ГруппаКнопок Из ГруппыКнопок Цикл
		ГруппаКнопок.Родитель = Родитель;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПарсингГруппыКнопок(НоваяКоманднаяПанель, МассивЭлементов)
	ЭлементГруппаКнопок = ПолучитьОписаниеГруппыКнопок();
	
	СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
	СтрокаРеквизит.УИД = ЭлементГруппаКнопок.УИД;
	СтрокаРеквизит.УИДВладельца = НоваяКоманднаяПанель.УИД;
	СтрокаРеквизит.ТипРеквизита = ЭлементГруппаКнопок.Тип;  
	СтрокаРеквизит.РабочееИмяЭлемента = ЭлементГруппаКнопок.Тип; 
	
	Для Каждого ТекЭлемент Из МассивЭлементов Цикл
		ЭлементГруппаКнопок.Элементы.Добавить(ТекЭлемент);
		ТекЭлемент.Родитель = ЭлементГруппаКнопок;
	КонецЦикла;
	
	Возврат ЭлементГруппаКнопок;
КонецФункции

&НаКлиенте
Процедура ПарсингМеню(ПараметрыВыполнения, КоманднаяПанельСМеню, Иерархия, Знач Текст) 
	СтрУровень = ВыделитьУровеньИзИерархическогоЭлемента(Текст);  

	Если СтрУровень.Уровень = 0 Тогда
		ТекЭлементМеню = ПолучитьКнопкуМеню(СтрУровень.Текст, КоманднаяПанельСМеню);
	Иначе
		ТекРодитель = Иерархия[СтрУровень.Уровень - 1];  
		
		Если ТекРодитель.Тип = "Кнопка" Тогда
			ТекРодитель.Тип = "Меню";
		КонецЕсли;
		
		ТекЭлементМеню = ПарсингКнопкиКоманднойПанели(
			ПараметрыВыполнения, 
			КоманднаяПанельСМеню, 
			ТекРодитель, 
			СтрУровень.Текст); 
			
		// Пустой текст в названии кнопки
		Если ТекЭлементМеню = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекИерархия = Новый Массив;
	
	Для СчРодители = 0 По СтрУровень.Уровень - 1 Цикл
		ТекИерархия.Добавить(Иерархия[СчРодители]);
	КонецЦикла;
	ТекИерархия.Добавить(ТекЭлементМеню);
	Иерархия = ТекИерархия;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуМеню(Меню, КоманднаяПанель)
	ТекстСКартинкой = ПолучитьТекстСКартинкой(Меню);
    КлючПоиска = ПолучитьКлючПоискаКнопки(ТекстСКартинкой);
	
	Возврат НайтиКнопкуКоманднойПанелиПоКлючу(КоманднаяПанель, КлючПоиска);
КонецФункции

&НаКлиенте
Функция ПолучитьКлючПоискаКнопки(ТекстСКартинкой)
	Если ПустаяСтрока(ТекстСКартинкой.Текст) Тогда
		Возврат "@"+ НРег(СокрЛП(ТекстСКартинкой.Картинка));
	КонецЕсли;
	
	Возврат НРег(СокрЛП(ТекстСКартинкой.Текст));
КонецФункции

&НаКлиенте
Функция ПарсингКнопкиКоманднойПанели(ПараметрыВыполнения, ТекущаяКоманднаяПанель, Родитель, Знач Текст) 
	
	Если ПустаяСтрока(Текст.Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяКнопка = ПолучитьОписаниеКнопки(Родитель); 
	
    Текст = ПарсингНабораСвойств(НоваяКнопка.НаборСвойств, Текст); 

	
	ТекстСКартинкой = ПолучитьТекстСКартинкой(Текст);
	
	НоваяКнопка.НаборСвойств.Заголовок = ТекстСКартинкой.Текст;
	НоваяКнопка.НаборСвойств.ПоложениеКартинки = ТекстСКартинкой.ПоложениеКартинки;
	НоваяКнопка.Картинка = ТекстСКартинкой.Картинка; 
    НоваяКнопка.КлючПоиска = ПолучитьКлючПоискаКнопки(ТекстСКартинкой);
	
	СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
	СтрокаРеквизит.УИД = НоваяКнопка.УИД;
	СтрокаРеквизит.УИДВладельца = ТекущаяКоманднаяПанель.УИД;
	СтрокаРеквизит.ТипРеквизита = НоваяКнопка.Тип;  
	Если НЕ ПустаяСтрока(НоваяКнопка.НаборСвойств.Заголовок) Тогда
		СтрокаРеквизит.РабочееИмяЭлемента = НоваяКнопка.НаборСвойств.Заголовок;  
	ИначеЕсли НЕ ПустаяСтрока(НоваяКнопка.Картинка) Тогда
		СтрокаРеквизит.РабочееИмяЭлемента = НоваяКнопка.Картинка;  
	Иначе
		СтрокаРеквизит.РабочееИмяЭлемента = НоваяКнопка.Тип;  
	КонецЕсли;
	
	Возврат НоваяКнопка;
КонецФункции

&НаКлиенте
Функция НайтиКнопкуКоманднойПанелиПоКлючу(Родитель, КлючПоиска)
	Для Каждого Элемент Из Родитель.Элементы Цикл
		Если Элемент.Тип <> "ГруппаКнопок" 
			И Элемент.КлючПоиска = КлючПоиска Тогда
			Возврат Элемент;
		КонецЕсли;    
		
		РезультатПоиска = НайтиКнопкуКоманднойПанелиПоКлючу(Элемент, КлючПоиска);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЦикла;    
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти 

#Область ПарсингФлажка

&НаКлиенте
Функция ПолучитьОписаниеФлажка(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("Флажок", Родитель);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.НаборСвойств.Вставить("ПоложениеЗаголовка", "Право");
	Результат.НаборСвойств.Вставить("ГоризонтальноеПоложение", "Лево");
	Результат.Вставить("Значение", Ложь);
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
	
КонецФункции 
 
&НаКлиенте
Функция ПарсингФлажкаЛевый(ПараметрыВыполнения, Знач Текст) 
	Если НЕ ТекстНачинаетсяС(Текст, "[") Тогда
		 Возврат Ложь;
	КонецЕсли;

	РезультатПарсинга = ПолучитьГруппуСтроки(Текст, "[", "]", "СНачала");
	ПараметрыПарсинга = ПараметрыПарсингаФлажка(РезультатПарсинга, "Право");
	
	ПарсингФлажкаОбщий(ПараметрыВыполнения, ПараметрыПарсинга); 
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПарсингФлажкаПравый(ПараметрыВыполнения, Знач Текст) 
	Если НЕ ТекстЗаканчиваетсяНа(Текст, "]") Тогда
		 Возврат Ложь;
	КонецЕсли;

	РезультатПарсинга = ПолучитьГруппуСтроки(Текст, "[", "]", "СКонца");
	ПараметрыПарсинга = ПараметрыПарсингаФлажка(РезультатПарсинга, "Лево");
	
	ПарсингФлажкаОбщий(ПараметрыВыполнения, ПараметрыПарсинга); 
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПараметрыПарсингаФлажка(РезультатПарсинга, ПоложениеЗаголовка) 
	Результат = Новый Структура("ПоложениеЗаголовка,Заголовок,Значение");
	Результат.ПоложениеЗаголовка = ПоложениеЗаголовка;
	Результат.Заголовок = РезультатПарсинга.Текст;
	Результат.Значение = НЕ ПустаяСтрока(РезультатПарсинга.Группа.Значение);
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Процедура ПарсингФлажкаОбщий(ПараметрыВыполнения, ПараметрыПарсинга)
	Родитель = ПараметрыВыполнения.Родитель;

	НовыйЭлемент = ПолучитьОписаниеФлажка(Родитель);
	НовыйЭлемент.НаборСвойств.ПоложениеЗаголовка = ПараметрыПарсинга.ПоложениеЗаголовка;
	НовыйЭлемент.НаборСвойств.Заголовок = СокрЛП(ПараметрыПарсинга.Заголовок.Значение);
	НовыйЭлемент.Значение = ПараметрыПарсинга.Значение;
	ЗаполнитьНаборСвойств(ПараметрыВыполнения, НовыйЭлемент);
	
	СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
	СтрокаРеквизит.УИД = НовыйЭлемент.УИД;
	СтрокаРеквизит.ТипРеквизита = "Флажок";
	СтрокаРеквизит.РабочееИмяРеквизита = СокрЛП(ПараметрыПарсинга.Заголовок.Значение);
КонецПроцедуры

#КонецОбласти

 #Область ПарсингТаблицы
 
&НаКлиенте
Функция ПолучитьОписаниеТаблицы(Родитель)  
	Результат = ПолучитьОписаниеЭлемента("Таблица", Родитель); 
	Результат.Вставить("Колонки", Новый Массив);
	Результат.Вставить("Строки", Новый Массив);
	
	Родитель.Элементы.Добавить(Результат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеКолонкиТаблицы(Родитель)   
	Результат = ПолучитьОписаниеЭлемента("КолонкаТаблицы", Родитель); 
	Результат.Вставить("ЕстьКартинка", Ложь);
	Результат.Вставить("ЕстьФлажок", Ложь);
	Результат.Вставить("ЕстьЗначение", Ложь);	
	Результат.Вставить("УИДФлажок", Новый УникальныйИдентификатор);	
	
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.НаборСвойств.Вставить("ГоризонтальноеПоложение", "Лево");
	
	Родитель.Колонки.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеСтрокиТаблицы(Родитель)
	Результат = ПолучитьОписаниеЭлемента("СтрокаТаблицы", Родитель); 
	Результат.Вставить("Ячейки", Новый Массив);
	Результат.Вставить("Строки", Новый Массив);
	Родитель.Строки.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеЯчейкиТаблицы(СтрокаТаблицы)
	Результат = ПолучитьОписаниеЭлемента("ЯчейкаТаблицы", СтрокаТаблицы); 
	Результат.Вставить("Значение", "");
	Результат.Вставить("ЕстьФлажок", Ложь);
	Результат.Вставить("ЕстьКартинка", Ложь);
	Результат.Вставить("ЗначениеФлажка", Ложь);
	Результат.Вставить("Картинка", Неопределено);
	
	СтрокаТаблицы.Ячейки.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

 &НаКлиенте
Функция ПарсингТаблицы(ПараметрыВыполнения) 
	ТекЭлемент = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	Текст = ТекЭлемент.Текст;
	 
	Колонки = ПолучитьПодгруппыСтроки(Текст, "|");
	
	Если Колонки.Количество() <= 1 Тогда
		Возврат Ложь;;
	КонецЕсли;       
	
	Родитель = ПараметрыВыполнения.Родитель;
	
	Таблица = ПараметрыВыполнения.Таблица;
	Если Таблица = Неопределено Тогда
		Таблица = ПолучитьОписаниеТаблицы(Родитель);
		ПараметрыВыполнения.Таблица = Таблица;
		
		ЗаполнитьНаборСвойств(ПараметрыВыполнения, Таблица);
	
		СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
		СтрокаРеквизит.УИД = Таблица.УИД;
		СтрокаРеквизит.ТипРеквизита = "Таблица";  
		Если Таблица.НаборСвойств.Свойство("Имя") Тогда
			СтрокаРеквизит.РабочееИмяРеквизита = Таблица.НаборСвойств.Имя;  
		Иначе
			СтрокаРеквизит.РабочееИмяРеквизита = СтрокаРеквизит.ТипРеквизита;  
		КонецЕсли;
	КонецЕсли;
	
	Если ПарсингРазделителяЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки) Тогда
		Возврат Истина;
	КонецЕсли;    

	Если ПарсингЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки) Тогда
		Возврат Истина;
	КонецЕсли;          
	
	Если ПарсингСтрокиТаблицы(ПараметрыВыполнения, Таблица, Колонки) Тогда
		Возврат Истина;
	КонецЕсли;  	
 
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ПарсингЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки) 
	
	Если ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементКолонка = Колонки[0];
	ПараметрыВыполнения.ТаблицаПолныйФормат = ПустаяСтрока(ЭлементКолонка.Значение);
	
	Для Сч = 0 По Колонки.ВГраница() Цикл 
		ЭлементКолонка = Колонки[Сч];
		Если ПараметрыВыполнения.ТаблицаПолныйФормат И (Сч = 0 ИЛИ Сч = Колонки.ВГраница()) Тогда
			Продолжить;	
		КонецЕсли;
		
		НовыйЭлемент = ПолучитьОписаниеКолонкиТаблицы(Таблица);
    	Текст = ПарсингНабораСвойств(НовыйЭлемент.НаборСвойств, ЭлементКолонка);
		НовыйЭлемент.НаборСвойств.Заголовок = СокрЛП(Текст.Значение);  
		
		СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
		СтрокаРеквизит.УИД = НовыйЭлемент.УИД;
		СтрокаРеквизит.УИДВладельца = Таблица.УИД;
		СтрокаРеквизит.ТипРеквизита = "Колонка"; 
		Если ПустаяСтрока(НовыйЭлемент.НаборСвойств.Заголовок) Тогда
			СтрокаРеквизит.РабочееИмяРеквизита = "Колонка";
		Иначе
			СтрокаРеквизит.РабочееИмяРеквизита = НовыйЭлемент.НаборСвойств.Заголовок;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ЭтоКонечныйЭлементТаблицы(Знач Значение)
	Значение = СокрЛП(Значение);
	
	Если СтрНачинаетсяС(Значение, ":") Тогда
		Значение = Сред(Значение, 2);
	КонецЕсли;

	Если СтрЗаканчиваетсяНа(Значение, ":") Тогда
		Значение = Сред(Значение, 1, СтрДлина(Значение) - 1);
	КонецЕсли;
	
	Возврат ЭтоКонечныйЭлемент(Значение);
КонецФункции

&НаКлиенте
Функция ПарсингРазделителяЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки) 
	Если ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен Тогда
		Возврат Ложь;
	КонецЕсли;      
	
	МассивГоризонтальноеПоложение = Новый Массив;
	Для Сч = 0 По Колонки.ВГраница() Цикл 
		ЭлементКолонка = Колонки[Сч];
		Если ПараметрыВыполнения.ТаблицаПолныйФормат И (Сч = 0 ИЛИ Сч = Колонки.ВГраница()) Тогда
			Продолжить;	
		КонецЕсли;
		Содержимое = ВыделитьНачальныйКонечныйСимволы(ЭлементКолонка, ":", ":");
		Текст = Содержимое.Текст;
		
		Если НЕ ЭтоКонечныйЭлемент(Текст.Значение) Тогда
			Возврат Ложь;
		КонецЕсли;                               
		
		Если Содержимое.ЕстьНачальный И Содержимое.ЕстьКонечный Тогда
			МассивГоризонтальноеПоложение.Добавить("Центр");
		ИначеЕсли Содержимое.ЕстьКонечный Тогда
			МассивГоризонтальноеПоложение.Добавить("Право");
		Иначе
			МассивГоризонтальноеПоложение.Добавить("Лево");
		КонецЕсли;
	КонецЦикла;

	Сч = 0;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Если Сч > МассивГоризонтальноеПоложение.ВГраница()  Тогда
			Прервать;
		КонецЕсли;
		Колонка.НаборСвойств.Вставить("ГоризонтальноеПоложение", МассивГоризонтальноеПоложение[Сч]);
		Сч = Сч + 1;
	КонецЦикла;   
	
	ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен = Истина;
	
	Возврат Истина;
КонецФункции
 
&НаКлиенте
Функция ВыделитьУровеньИзИерархическогоЭлемента(Знач Текст)
	Результат = Новый Структура("Текст,Уровень", Текст, 0);
	
	Пока Истина Цикл
		СтрУровень = ВыделитьНачальныйКонечныйСимволы(Результат.Текст, ".", Неопределено);
		Если НЕ СтрУровень.ЕстьНачальный Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Уровень = Результат.Уровень + 1;
		Результат.Текст = СтрУровень.Текст;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуТаблицы(ПараметрыВыполнения, Знач Текст) 
	Результат = Новый Структура("СтрокаТаблицы,Уровень,Текст");
	
	СтрУровень = ВыделитьУровеньИзИерархическогоЭлемента(Текст);  
	
	Результат.Текст = СтрУровень.Текст;
	Результат.Уровень = СтрУровень.Уровень;
	
	Таблица = ПараметрыВыполнения.Таблица;

	Если СтрУровень.Уровень = 0 Тогда
		Результат.СтрокаТаблицы = ПолучитьОписаниеСтрокиТаблицы(Таблица);
	Иначе
		ТекРодитель = ПараметрыВыполнения.ТаблицаИерархия[СтрУровень.Уровень - 1];
		Результат.СтрокаТаблицы = ПолучитьОписаниеСтрокиТаблицы(ТекРодитель);
	КонецЕсли;             
	
	Иерархия = Новый Массив;
	
	Для СчРодители = 0 По СтрУровень.Уровень - 1 Цикл
		Иерархия.Добавить(ПараметрыВыполнения.ТаблицаИерархия[СчРодители]);
	КонецЦикла;
	Иерархия.Добавить(Результат.СтрокаТаблицы);
	ПараметрыВыполнения.ТаблицаИерархия = Иерархия;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПарсингЯчейкиТаблицы(ПараметрыВыполнения, КолонкаТаблицы, СтрокаТаблицы, Текст)
	
	НоваяЯчейка = ПолучитьОписаниеЯчейкиТаблицы(СтрокаТаблицы);
	
	Текст = ПарсингНабораСвойств(НоваяЯчейка.НаборСвойств, Текст);
	
	Если ТекстНачинаетсяС(Текст, "[") Тогда
		РезультатПарсинга = ПолучитьГруппуСтроки(Текст, "[", "]", "СНачала");
		ПараметрыПарсинга = ПараметрыПарсингаФлажка(РезультатПарсинга, "Право");
		
		СтроковоеЗначение = СокрЛП(ПараметрыПарсинга.Заголовок.Значение);
		НоваяЯчейка.Значение = СтроковоеЗначение;
		НоваяЯчейка.ЕстьФлажок = Истина;
		НоваяЯчейка.ЗначениеФлажка = ПараметрыПарсинга.Значение;  	
		
		Если НЕ ПустаяСтрока(СтроковоеЗначение) Тогда
			КолонкаТаблицы.ЕстьЗначение = Истина;
		КонецЕсли;

		Если НЕ КолонкаТаблицы.ЕстьФлажок Тогда
			СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
			СтрокаРеквизит.УИД = КолонкаТаблицы.УИДФлажок;
			СтрокаРеквизит.УИДВладельца = ПараметрыВыполнения.Таблица.УИД;
			СтрокаРеквизит.ТипРеквизита = "КолонкаФлажок";
			СтрокаРеквизит.РабочееИмяРеквизита = КолонкаТаблицы.НаборСвойств.Заголовок + "Флажок";
		КонецЕсли;
		КолонкаТаблицы.ЕстьФлажок = Истина;

		Возврат;
	КонецЕсли;

	СтроковоеЗначение = СокрЛП(Текст.Значение);
	
	НоваяЯчейка.Значение = СтроковоеЗначение;  	
	
	Если НЕ ПустаяСтрока(СтроковоеЗначение) Тогда
		КолонкаТаблицы.ЕстьЗначение = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПарсингСтрокиТаблицы(ПараметрыВыполнения, Таблица, Колонки) 
	Если НЕ ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен Тогда
		Возврат Ложь;
	КонецЕсли;   

	СтрокаТаблицы = Неопределено;
	
	ПерваяКолонка = Истина;

	Для Сч = 0 По Колонки.ВГраница() Цикл 
		ЭлементКолонка = Колонки[Сч];
		Если ПараметрыВыполнения.ТаблицаПолныйФормат И (Сч = 0 ИЛИ Сч = Колонки.ВГраница()) Тогда
			Продолжить;	
		КонецЕсли;
		
		ИндексКолонки = Сч - ?(ПараметрыВыполнения.ТаблицаПолныйФормат, 1, 0);
		КолонкаТаблицы = Таблица.Колонки[ИндексКолонки]; 
		Текст = ЭлементКолонка;
		Если ПерваяКолонка Тогда
			ДанныеСтрокаТаблицы = ПолучитьСтрокуТаблицы(ПараметрыВыполнения, Текст);
			СтрокаТаблицы = ДанныеСтрокаТаблицы.СтрокаТаблицы;
			
			Если ДанныеСтрокаТаблицы.Уровень > 0 Тогда
				Таблица.Тип = "Дерево";
				СтрокаВладелец = ПолучитьСтрокуТаблицыРеквизитов(Таблица.УИД);
				СтрокаВладелец.ТипРеквизита = "Дерево"; 
				Если СтрокаВладелец.РабочееИмяРеквизита = "Таблица" Тогда
					СтрокаВладелец.РабочееИмяРеквизита = "Дерево";
				КонецЕсли;
			КонецЕсли;
			
			Текст = ДанныеСтрокаТаблицы.Текст;
			
			ПерваяКолонка = Ложь;
		КонецЕсли;
		
		ПарсингЯчейкиТаблицы(ПараметрыВыполнения, КолонкаТаблицы, СтрокаТаблицы, Текст);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

 #КонецОбласти

#Область ПарсингПоляВвода

&НаКлиенте
Функция ПолучитьОписаниеПоляВвода(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("ПолеВвода", Родитель);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.НаборСвойств.Вставить("ПоложениеЗаголовка", "Лево");
	Результат.НаборСвойств.Вставить("ГоризонтальноеПоложение", "Лево");
	
	Результат.Вставить("Значение", "");
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
КонецФункции 
 
&НаКлиенте
Функция ПарсингПоляВвода(ПараметрыВыполнения, Знач Текст) 
	КлючЗначение = ПолучитьКлючЗначениеТекста(Текст, ":");
	
	Если НЕ КлючЗначение.Найден Тогда
		 Возврат Ложь;
	КонецЕсли;

	Родитель = ПараметрыВыполнения.Родитель;

	ЗаголовокЭлемента = СокрЛП(КлючЗначение.Ключ.Значение);
	Значение = КлючЗначение.Значение;
	КлючиСвойств = Неопределено;

	СвойстваПоляВвода = ПолучитьКлючЗначениеТекста(Значение, "__");
	Если СвойстваПоляВвода.Найден Тогда
		Значение = СвойстваПоляВвода.Ключ;
		КлючиСвойств = СокрЛП(СвойстваПоляВвода.Значение.Значение);
	КонецЕсли;   
	
	СтрокаЗначение = СокрЛП(Значение.Значение);
	
	НовыйЭлемент = ПолучитьОписаниеПоляВвода(Родитель);
	НовыйЭлемент.НаборСвойств.Заголовок = ЗаголовокЭлемента;
	НовыйЭлемент.Значение = СокрЛП(Значение.Значение);       
	Если ПустаяСтрока(СтрокаЗначение) Тогда
		НовыйЭлемент.НаборСвойств.ПоложениеЗаголовка = "Верх";
	КонецЕсли;
	
	ЗаполнитьНаборСвойств(ПараметрыВыполнения, НовыйЭлемент);
	
	ПарсингПоляВводаМодификаторы(КлючиСвойств, НовыйЭлемент);

	СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
	СтрокаРеквизит.УИД = НовыйЭлемент.УИД;
	СтрокаРеквизит.ТипРеквизита = "ПолеВвода";
	СтрокаРеквизит.РабочееИмяРеквизита = ЗаголовокЭлемента;
	
	ПараметрыВыполнения.ПолеВвода = НовыйЭлемент;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПарсингПоляВводаМодификаторы(Модификаторы, ЭлементДанных)
	Если Модификаторы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для СчКлюча = 1 По СтрДлина(Модификаторы) Цикл
		КлючСвойств = НРег(Сред(Модификаторы, СчКлюча, 1));
		Если КлючСвойств = "v" Тогда
			ЭлементДанных.НаборСвойств.Вставить("КнопкаВыпадающегоСписка", Истина);
		ИначеЕсли КлючСвойств = "." Тогда
			ЭлементДанных.НаборСвойств.Вставить("КнопкаВыбора", Истина);
		ИначеЕсли КлючСвойств = "х" ИЛИ КлючСвойств = "x" Тогда
			ЭлементДанных.НаборСвойств.Вставить("КнопкаОчистки", Истина);
		ИначеЕсли КлючСвойств = "^" Тогда
			ЭлементДанных.НаборСвойств.Вставить("КнопкаРегулирования", Истина);
		ИначеЕсли КлючСвойств = "о" ИЛИ КлючСвойств = "o" Тогда
			ЭлементДанных.НаборСвойств.Вставить("КнопкаОткрытия", Истина);
		Иначе 
			// Ошибка
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
 
&НаКлиенте
Функция ПарсингМногострочногоПоляВвода(ПараметрыВыполнения, Знач Текст) 
	Если НЕ ЭтоМногострочноеПолеВвода(Текст.Значение) Тогда
		Возврат Ложь;
	КонецЕсли;     
	
	СвойстваПоляВвода = ПараметрыВыполнения.ПолеВвода.НаборСвойств;
	
	СвойстваПоляВвода.Вставить("МногострочныйРежим", Истина);
	
	Если СвойстваПоляВвода.Свойство("Высота") Тогда
		ТекВысота = СвойстваПоляВвода.Высота;
	Иначе 
		ТекВысота = 1;
	КонецЕсли;
	
	СвойстваПоляВвода.Вставить("Высота", ТекВысота + 1);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ЭтоМногострочноеПолеВвода(Знач Значение)
	Значение = СокрЛП(Значение);
	Возврат Значение <> "" И СтрЗаменить(Значение, "_","") = "";
КонецФункции

#КонецОбласти   

#Область ПарсингНадписи

&НаКлиенте
Функция ПолучитьОписаниеНадписи(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("Надпись", Родитель);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.НаборСвойств.Вставить("ГоризонтальноеПоложение", "Лево");
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
КонецФункции 
 
&НаКлиенте
Функция ПарсингНадписи(ПараметрыВыполнения, Знач Текст) 
	Если ПустаяСтрока(Текст.Значение) Тогда
		 Возврат Ложь;;
	КонецЕсли;

	НовыйЭлемент = ПолучитьОписаниеНадписи(ПараметрыВыполнения.Родитель);
	НовыйЭлемент.НаборСвойств.Заголовок = СокрЛП(Текст.Значение);
	ЗаполнитьНаборСвойств(ПараметрыВыполнения, НовыйЭлемент);
	
	СтрокаРеквизит = __ТаблицаРеквизитов.Добавить();
	СтрокаРеквизит.УИД = НовыйЭлемент.УИД;
	СтрокаРеквизит.ТипРеквизита = "Надпись";
	СтрокаРеквизит.РабочееИмяЭлемента = "Надпись";
	
	Возврат Истина;
КонецФункции

#КонецОбласти   

#КонецОбласти   

#КонецОбласти 

#Область Построение

&НаСервере
Процедура ВыполнитьПостроениеНаСервере(Знач ФормаГруппы)  
	ИзменитьРеквизитыФормыНаСервере();
	
	ГруппаКонтейнер = Элементы.Найти("ГруппаКонтейнер");
	Если ГруппаКонтейнер <> Неопределено Тогда
		Элементы.Удалить(ГруппаКонтейнер);
	КонецЕсли;

	ГруппаКонтейнер = Элементы.Добавить("ГруппаКонтейнер", Тип("ГруппаФормы"), Элементы.ГруппаПросмотр);
	ГруппаКонтейнер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКонтейнер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаКонтейнер.ОтображатьЗаголовок = Ложь; 
	ГруппаКонтейнер.РастягиватьПоГоризонтали = Истина;
	ГруппаКонтейнер.РастягиватьПоВертикали = Истина;
	ГруппаКонтейнер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	ПараметрыВыполнения = Новый Структура("СвободныеНомераРеквизитов", Новый Структура);
	ПараметрыВыполнения.СвободныеНомераРеквизитов.Вставить("Булево", 1);
	ПараметрыВыполнения.СвободныеНомераРеквизитов.Вставить("Строка", 1);
	ПараметрыВыполнения.СвободныеНомераРеквизитов.Вставить("Число", 1);
	
	ПостроитьЭлементыНаСервере(ПараметрыВыполнения, ФормаГруппы, ГруппаКонтейнер);
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыФормыНаСервере()
	МассивРеквизитов = Новый Массив;
	НовыйМассивСуществующих = Новый Массив;
	Для Каждого СтрокаРеквизит Из __ТаблицаРеквизитов Цикл
		Если ПустаяСтрока(СтрокаРеквизит.ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = СтрокаРеквизит.ИмяРеквизита;
		Если СтрокаРеквизит.Номер > 1 Тогда
			СтрокаНомер = Формат(СтрокаРеквизит.Номер - 1, "ЧГ=0");
			ИмяРеквизита = ИмяРеквизита + СтрокаНомер;
		КонецЕсли;
		
		Если СтрокаРеквизит.ТипРеквизита = "ПолеВвода" Тогда
			ДобавляемыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0)));
			МассивРеквизитов.Добавить(ДобавляемыйРеквизит);
			НовыйМассивСуществующих.Добавить(ИмяРеквизита);
		КонецЕсли;

		Если СтрокаРеквизит.ТипРеквизита = "Флажок" Тогда
			ДобавляемыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Булево"));
			МассивРеквизитов.Добавить(ДобавляемыйРеквизит);
			НовыйМассивСуществующих.Добавить(ИмяРеквизита);
		КонецЕсли;
		
		Если СтрокаРеквизит.ТипРеквизита = "Таблица" Тогда
			ДобавляемыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ТаблицаЗначений"));
			МассивРеквизитов.Добавить(ДобавляемыйРеквизит);
			НовыйМассивСуществующих.Добавить(ИмяРеквизита);
		КонецЕсли;

		Если СтрокаРеквизит.ТипРеквизита = "Дерево" Тогда
			ДобавляемыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ДеревоЗначений"));
			МассивРеквизитов.Добавить(ДобавляемыйРеквизит);
			НовыйМассивСуществующих.Добавить(ИмяРеквизита);
		КонецЕсли;
		
		Если СтрокаРеквизит.ТипРеквизита = "Колонка" Тогда 
			СтрокаВладелец = ПолучитьСтрокуТаблицыРеквизитовНаСервере(СтрокаРеквизит.УИДВладельца);
			
			ДобавляемыйРеквизит = Новый РеквизитФормы(
				ИмяРеквизита, 
				Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0)),
				СтрокаВладелец.ИмяРеквизита);
			МассивРеквизитов.Добавить(ДобавляемыйРеквизит);
		КонецЕсли;

		Если СтрокаРеквизит.ТипРеквизита = "КолонкаФлажок" Тогда 
			СтрокаВладелец = ПолучитьСтрокуТаблицыРеквизитовНаСервере(СтрокаРеквизит.УИДВладельца);
			
			ДобавляемыйРеквизит = Новый РеквизитФормы(
				ИмяРеквизита, 
				Новый ОписаниеТипов("Булево"),
				СтрокаВладелец.ИмяРеквизита);

			МассивРеквизитов.Добавить(ДобавляемыйРеквизит);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивУдаляемых = __ТаблицаСуществующихРеквизитов.Выгрузить().ВыгрузитьКолонку("ИмяРеквизита");
	
	ИзменитьРеквизиты(МассивРеквизитов, МассивУдаляемых);  
	
	__ТаблицаСуществующихРеквизитов.Очистить();
	Для Каждого ИмяРеквизита Из НовыйМассивСуществующих Цикл
		Строка = __ТаблицаСуществующихРеквизитов.Добавить();
		Строка.ИмяРеквизита = ИмяРеквизита;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПостроитьЭлементыНаСервере(ПараметрыВыполнения, Данные, Группа)      
	
	Подчиненные = Данные.Элементы;
	
	Для Каждого ЭлементДанных Из Подчиненные Цикл
		ПостроитьЭлементНаСервере(ПараметрыВыполнения, ЭлементДанных, Группа);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПостроитьЭлементНаСервере(ПараметрыВыполнения, ЭлементДанных, Группа)
	Выполнена = Ложь;
	
	ДобавитьГоризонтальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли; 

	ДобавитьОднострочнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли; 

	ДобавитьВертикальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ДобавитьЭлементПолеВвода(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ДобавитьЭлементФлажок(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ДобавитьЭлементНадпись(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ДобавитьТаблицуДерево(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСтраницы(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ДобавитьКоманднуюПанель(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьГоризонтальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "ГоризонтальнаяГруппа" Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(ЭлементДанных.УИД);
	
	ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;
	
	НоваяГруппа = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Группа);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НоваяГруппа.РастягиватьПоГоризонтали = Истина;
	НоваяГруппа.РастягиватьПоВертикали = Ложь;
	
	ПостроитьЭлементыНаСервере(ПараметрыВыполнения, ЭлементДанных, НоваяГруппа);
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьОднострочнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "ОднострочнаяГруппа" Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(ЭлементДанных.УИД);
	
	ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;
	
	НоваяГруппа = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Группа);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НоваяГруппа.РастягиватьПоГоризонтали = Истина;
	НоваяГруппа.РастягиватьПоВертикали = Ложь;
	НоваяГруппа.СквозноеВыравнивание = СквозноеВыравнивание.НеИспользовать; 
	
	ПостроитьЭлементыНаСервере(ПараметрыВыполнения, ЭлементДанных, НоваяГруппа);
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВертикальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "ВертикальнаяГруппа" Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(ЭлементДанных.УИД);
	
	ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;
	
	НоваяГруппа = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Группа);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	НоваяГруппа.ОтображатьЗаголовок = ЭлементДанных.НаборСвойств.ОтображатьЗаголовок; 
	НоваяГруппа.Заголовок = ЭлементДанных.НаборСвойств.Заголовок;
	
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.РастягиватьПоГоризонтали = Истина;
	НоваяГруппа.РастягиватьПоВертикали = Ложь;
	
	ПостроитьЭлементыНаСервере(ПараметрыВыполнения, ЭлементДанных, НоваяГруппа);   
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементНадпись(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "Надпись" Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(ЭлементДанных.УИД);
	ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;

	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;

	УстановитьСвойствоЭлементаНаСервере(НовыйЭлемент, ЭлементДанных);

	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементПолеВвода(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)     
	Если ЭлементДанных.Тип <> "ПолеВвода" Тогда 
		Возврат;
	КонецЕсли;

	СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(ЭлементДанных.УИД);
	ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;
	ИмяРеквизита =  СтрокаРеквизитов.ИмяРеквизита;
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ИмяРеквизита;         
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	
	УстановитьСвойствоЭлементаНаСервере(НовыйЭлемент, ЭлементДанных);

	ЭтотОбъект[ИмяРеквизита] = ЭлементДанных.Значение;    
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементФлажок(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  
	Если ЭлементДанных.Тип <> "Флажок" Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(ЭлементДанных.УИД);
	ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;
	ИмяРеквизита =  СтрокаРеквизитов.ИмяРеквизита;
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = ИмяРеквизита;

	УстановитьСвойствоЭлементаНаСервере(НовыйЭлемент, ЭлементДанных);
	
	ЭтотОбъект[ИмяРеквизита] = ЭлементДанных.Значение;  

	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицуДерево(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  
	Если ЭлементДанных.Тип <> "Дерево" 
		И ЭлементДанных.Тип <> "Таблица" Тогда 
		Возврат;
	КонецЕсли;

	СтрокаРеквизитовТаблица = ПолучитьСтрокуТаблицыРеквизитовНаСервере(ЭлементДанных.УИД);
	ИмяЭлементаТаблица = СтрокаРеквизитовТаблица.ИмяЭлемента;
	ИмяРеквизитаТаблица = СтрокаРеквизитовТаблица.ИмяРеквизита;
	
	НоваяТаблица = ЭтаФорма.Элементы.Добавить(ИмяЭлементаТаблица, Тип("ТаблицаФормы"), Группа);
	НоваяТаблица.ПутьКДанным = ИмяРеквизитаТаблица;
	НоваяТаблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	Колонки = ЭлементДанных.Колонки;
	Строки = ЭлементДанных.Строки;
	
	Сч = 1;
	Для Каждого Колонка Из Колонки Цикл
		ЕстьГруппа = Колонка.ЕстьФлажок И Колонка.ЕстьЗначение;                
		ТекРодитель = НоваяТаблица;
		Если ЕстьГруппа Тогда
			СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(Колонка.УИД);
			ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента + "Вместе";
			
			НоваяГруппа = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), НоваяТаблица);
			НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
			НоваяГруппа.Группировка = ГруппировкаКолонок.ВЯчейке;
			НоваяГруппа.Заголовок = Колонка.НаборСвойств.Заголовок;
			НоваяГруппа.ОтображатьВШапке = Истина;
			
			ТекРодитель = НоваяГруппа;
		КонецЕсли;
		
		Если Колонка.ЕстьФлажок Тогда
			СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(Колонка.УИДФлажок);
			ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;
			ИмяРеквизита = СтрокаРеквизитов.ИмяРеквизита;
			
			НовыйКолонка = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ТекРодитель);
			НовыйКолонка.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйКолонка.ПутьКДанным = ИмяРеквизитаТаблица + "." + ИмяРеквизита;
			НовыйКолонка.ОтображатьВШапке = НЕ ЕстьГруппа;
			НовыйКолонка.Заголовок = Колонка.НаборСвойств.Заголовок;
			НовыйКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[Колонка.НаборСвойств.ГоризонтальноеПоложение];
			Сч = Сч  + 1;
		КонецЕсли;
		
		Если Колонка.ЕстьЗначение Тогда
			СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(Колонка.УИД);
			ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;
			ИмяРеквизита = СтрокаРеквизитов.ИмяРеквизита;
			
			НовыйКолонка = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ТекРодитель);
			НовыйКолонка.Вид = ВидПоляФормы.ПолеВвода;
			НовыйКолонка.ПутьКДанным = ИмяРеквизитаТаблица + "." + ИмяРеквизита;
			НовыйКолонка.Заголовок = Колонка.НаборСвойств.Заголовок;
			НовыйКолонка.ОтображатьВШапке = НЕ ЕстьГруппа;
			НовыйКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[Колонка.НаборСвойств.ГоризонтальноеПоложение];
			Сч = Сч  + 1;
		КонецЕсли;
	КонецЦикла;          
	
	Если ЭлементДанных.Тип = "Дерево"  Тогда
		ЭлементыДерева = ЭтотОбъект[ИмяЭлементаТаблица].ПолучитьЭлементы();
		ЭлементыДерева.Очистить(); 
		
		ДобавитьДеревоСтроки(Строки, Колонки, ЭлементыДерева, Истина);
	Иначе
		ЭтотОбъект[ИмяЭлементаТаблица].Очистить();
		ДобавитьДеревоСтроки(Строки, Колонки, ЭтотОбъект[ИмяЭлементаТаблица], Ложь);
	КонецЕсли;
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДеревоСтроки(Строки, Колонки, ЭлементыДерева, ЭтоДерево)
	Для Каждого Строка Из Строки Цикл 
		СтрокаТаблицы = ЭлементыДерева.Добавить();
		
		Сч = 0;       
		Для Каждого Ячейка Из Строка.Ячейки Цикл  
			Колонка = Колонки[Сч];
			
			Если НЕ ПустаяСтрока(Ячейка.Значение) Тогда
				СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(Колонка.УИД);
				СтрокаТаблицы[СтрокаРеквизитов.ИмяРеквизита] = Ячейка.Значение; 
			КонецЕсли;
			
			Если Ячейка.ЕстьФлажок Тогда
				СтрокаРеквизитовФлажок = ПолучитьСтрокуТаблицыРеквизитовНаСервере(Колонка.УИДФлажок);
				СтрокаТаблицы[СтрокаРеквизитовФлажок.ИмяРеквизита] = Булево(Ячейка.ЗначениеФлажка);
			КонецЕсли;
			
			Сч = Сч + 1;
		КонецЦикла;
		
		Если ЭтоДерево Тогда
			ДобавитьДеревоСтроки(Строка.Строки, Колонки, СтрокаТаблицы.ПолучитьЭлементы(), Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницы(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "Страницы" Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизитовСтраницы = ПолучитьСтрокуТаблицыРеквизитовНаСервере(ЭлементДанных.УИД);
	ИмяЭлементаСтраницы = СтрокаРеквизитовСтраницы.ИмяЭлемента;
	
	ЭлементСтраницы = Элементы.Добавить(ИмяЭлементаСтраницы, Тип("ГруппаФормы"), Группа);
	ЭлементСтраницы.Вид = ВидГруппыФормы.Страницы;
	ЭлементСтраницы.РастягиватьПоГоризонтали = Истина;
	ЭлементСтраницы.РастягиватьПоВертикали = Ложь;
	
	Страницы = ЭлементДанных.Элементы;
	
	Для Каждого Страница Из Страницы Цикл
		СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(Страница.УИД);
		ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;
		
		ЭлементСтраница = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), ЭлементСтраницы);
		ЭлементСтраница.Вид = ВидГруппыФормы.Страница;
		ЭлементСтраница.Заголовок = Страница.НаборСвойств.Заголовок;
		
		ПостроитьЭлементыНаСервере(ПараметрыВыполнения, Страница, ЭлементСтраница);
	КонецЦикла;
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьКоманднуюПанель(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  
	Если ЭлементДанных.Тип <> "КоманднаяПанель" Тогда 
		Возврат;
	КонецЕсли;

	СтрокаРеквизитовКоманднаяПанель = ПолучитьСтрокуТаблицыРеквизитовНаСервере(ЭлементДанных.УИД);
	ИмяЭлементаКоманднаяПанель = СтрокаРеквизитовКоманднаяПанель.ИмяЭлемента;
	
	НоваяКоманднаяПанель = ЭтаФорма.Элементы.Добавить(
		ИмяЭлементаКоманднаяПанель, 
		Тип("ГруппаФормы"), 
		Группа);
	НоваяКоманднаяПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	НоваяКоманднаяПанель.ГоризонтальноеПоложение = 
		ГоризонтальноеПоложениеЭлемента[ЭлементДанных.НаборСвойств.ГоризонтальноеПоложение];
	
	ДобавитьКнопки(ЭлементДанных, НоваяКоманднаяПанель, ИмяЭлементаКоманднаяПанель);
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьКнопки(ЭлементДанных, ЭлементФормыРодитель, ИмяЭлементаКоманднаяПанель)  
	Для Каждого Кнопка Из ЭлементДанных.Элементы Цикл   
		Если Кнопка.Тип = "ГруппаКнопок" Тогда
			ДобавитьГруппуКнопок(
				Кнопка, 
				ЭлементФормыРодитель, 
				ИмяЭлементаКоманднаяПанель);
			Продолжить;
		КонецЕсли;
		
		Если Кнопка.Тип = "Меню" Тогда
			ДобавитьМеню(
				Кнопка, 
				ЭлементФормыРодитель, 
				ИмяЭлементаКоманднаяПанель);
			Продолжить;
		КонецЕсли;
		ДобавитьКнопку(
			Кнопка, 
			ЭлементФормыРодитель, 
			ИмяЭлементаКоманднаяПанель);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппуКнопок(Кнопка, ЭлементФормыРодитель, ИмяЭлементаКоманднаяПанель)  
	СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(Кнопка.УИД);
	ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;
	
	ЭлементКнопка = Элементы.Добавить(
		ИмяЭлементаКоманднаяПанель + ИмяЭлемента, 
		Тип("ГруппаФормы"), 
		ЭлементФормыРодитель);
	ЭлементКнопка.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	УстановитьСвойствоЭлементаНаСервере(ЭлементКнопка, Кнопка);
	
	ДобавитьКнопки(Кнопка, ЭлементКнопка, ИмяЭлементаКоманднаяПанель);
КонецПроцедуры

&НаСервере
Процедура ДобавитьМеню(Кнопка, ЭлементФормыРодитель, ИмяЭлементаКоманднаяПанель)  
	СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(Кнопка.УИД);
	ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;
	
	ЭлементКнопка = Элементы.Добавить(
		ИмяЭлементаКоманднаяПанель + ИмяЭлемента, 
		Тип("ГруппаФормы"), 
		ЭлементФормыРодитель);
	ЭлементКнопка.Вид = ВидГруппыФормы.Подменю;
	ЭлементКнопка.Заголовок = Кнопка.НаборСвойств.Заголовок;         
	
	УстановитьСвойствоЭлементаНаСервере(ЭлементКнопка, Кнопка);
	
	Если ПустаяСтрока(Кнопка.НаборСвойств.Заголовок) Тогда
		ЭлементКнопка.Отображение = ОтображениеКнопки.Картинка;
	Иначе
		ЭлементКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЕсли;
	
	Если Кнопка.Картинка <> Неопределено Тогда
		ЭлементКнопка.Картинка = БиблиотекаКартинок[Кнопка.Картинка];
	КонецЕсли;
	
	ДобавитьКнопки(Кнопка, ЭлементКнопка, ИмяЭлементаКоманднаяПанель);
КонецПроцедуры

&НаСервере
Процедура ДобавитьКнопку(Кнопка, ЭлементФормыРодитель, ИмяЭлементаКоманднаяПанель)  
	СтрокаРеквизитов = ПолучитьСтрокуТаблицыРеквизитовНаСервере(Кнопка.УИД);
	ИмяЭлемента = СтрокаРеквизитов.ИмяЭлемента;
	
	ЭлементКнопка = Элементы.Добавить(
		ИмяЭлементаКоманднаяПанель + ИмяЭлемента, 
		Тип("КнопкаФормы"), 
		ЭлементФормыРодитель);
	ЭлементКнопка.ИмяКоманды = "__КомандаЗаглушка";
	ЭлементКнопка.Заголовок = Кнопка.НаборСвойств.Заголовок;         
	
	УстановитьСвойствоЭлементаНаСервере(ЭлементКнопка, Кнопка);
	
	Если ПустаяСтрока(Кнопка.НаборСвойств.Заголовок) Тогда
		ЭлементКнопка.Отображение = ОтображениеКнопки.Картинка;
	Иначе
		ЭлементКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЕсли;
	
	Если Кнопка.Картинка <> Неопределено Тогда
		ЭлементКнопка.Картинка = БиблиотекаКартинок[Кнопка.Картинка];
	КонецЕсли;   	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяРеквизита(ПараметрыВыполнения, Тип)
	СвободныйНомер = ПараметрыВыполнения.СвободныеНомераРеквизитов[Тип];
	ИмяРеквизита = СтрШаблон("%1Реквизит%2", Тип, СвободныйНомер);
	ПараметрыВыполнения.СвободныеНомераРеквизитов[Тип] = СвободныйНомер + 1;
	Возврат ИмяРеквизита;
КонецФункции 

&НаСервере
Процедура УстановитьСвойствоЭлементаНаСервере(ЭлементФормы, ЭлементДанных)
	Свойства = ЭлементДанных.НаборСвойств;
	Тип = ЭлементДанных.Тип;
	
	Если Свойства.Свойство("Заголовок") Тогда
		ЭлементФормы.Заголовок = Свойства.Заголовок;
	КонецЕсли;

	Если Свойства.Свойство("ГоризонтальноеПоложение") Тогда
		Если Тип = "Надпись" 
			ИЛИ Тип = "Флажок" Тогда
			ЭлементФормы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента[Свойства.ГоризонтальноеПоложение];
		Иначе
			ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[Свойства.ГоризонтальноеПоложение];
		КонецЕсли;
	КонецЕсли;   

	Если Свойства.Свойство("ПоложениеЗаголовка") Тогда
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы[Свойства.ПоложениеЗаголовка];
	КонецЕсли;        

	Если Свойства.Свойство("ЦветФона") Тогда
		ЭлементФормы.ЦветФона = WebЦвета[Свойства.ЦветФона];
	КонецЕсли;        

	Если Свойства.Свойство("ЦветТекста") Тогда        
		Если Тип = "Флажок" Тогда
			ЭлементФормы.ЦветТекстаЗаголовка = WebЦвета[Свойства.ЦветТекста];
		Иначе
			ЭлементФормы.ЦветТекста = WebЦвета[Свойства.ЦветТекста];
		КонецЕсли;
	КонецЕсли;	  
	
	Если Свойства.Свойство("КнопкаПоУмолчанию") Тогда        
		ЭлементФормы.КнопкаПоУмолчанию = Булево(Свойства.КнопкаПоУмолчанию);
	КонецЕсли;	 	
 	
	Если Свойства.Свойство("ПоложениеКартинки") И Тип <> "Меню" Тогда        
		ЭлементФормы.ПоложениеКартинки = ПоложениеКартинкиКнопкиФормы[Свойства.ПоложениеКартинки];
	КонецЕсли;	 

	Если Свойства.Свойство("КнопкаВыпадающегоСписка") Тогда        
		ЭлементФормы.КнопкаВыпадающегоСписка = Булево(Свойства.КнопкаВыпадающегоСписка);
	КонецЕсли;	 	

	Если Свойства.Свойство("КнопкаВыбора") Тогда        
		ЭлементФормы.КнопкаВыбора = Булево(Свойства.КнопкаВыбора);
	КонецЕсли;	 	

	Если Свойства.Свойство("КнопкаОчистки") Тогда        
		ЭлементФормы.КнопкаОчистки = Булево(Свойства.КнопкаОчистки);
	КонецЕсли;	 	

	Если Свойства.Свойство("КнопкаРегулирования") Тогда        
		ЭлементФормы.КнопкаРегулирования = Булево(Свойства.КнопкаРегулирования);
	КонецЕсли;	 	

	Если Свойства.Свойство("КнопкаОткрытия") Тогда        
		ЭлементФормы.КнопкаОткрытия = Булево(Свойства.КнопкаОткрытия);
	КонецЕсли;	 	

	Если Свойства.Свойство("МногострочныйРежим") Тогда        
		ЭлементФормы.МногострочныйРежим = Булево(Свойства.МногострочныйРежим);
	КонецЕсли;	 	

	Если Свойства.Свойство("Высота") Тогда        
		ЭлементФормы.Высота = Свойства.Высота; 
		ЭлементФормы.РастягиватьПоВертикали = Ложь;
	КонецЕсли;	 	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуТаблицыРеквизитовНаСервере(УИД)
	Результат = Новый Структура("ИмяРеквизита,ИмяЭлемента");
	МассивСтрок = __ТаблицаРеквизитов.НайтиСтроки(Новый Структура("УИД", УИД));
	Строка = МассивСтрок[0];
	
	Результат.ИмяРеквизита = Строка.ИмяРеквизита;
	Результат.ИмяЭлемента = Строка.ИмяЭлемента;
	
	Если Строка.Номер > 1 Тогда
		СтрокаНомер = Формат(Строка.Номер - 1, "ЧГ=0");
		Результат.ИмяРеквизита = Результат.ИмяРеквизита + СтрокаНомер;
		Результат.ИмяЭлемента = Результат.ИмяЭлемента + СтрокаНомер;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуТаблицыРеквизитов(УИД)
	МассивСтрок = __ТаблицаРеквизитов.НайтиСтроки(Новый Структура("УИД", УИД));
	Возврат МассивСтрок[0];
КонецФункции

#КонецОбласти  

#Область Форматирование

&НаКлиенте
Функция НовыеПараметрыФорматирования(РасчетДлины, Длина)
	Результат = Новый Структура();
	Результат.Вставить("РасчетДлины", РасчетДлины);
	Результат.Вставить("Длина", ?(РасчетДлины, 0, Длина));
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыполнитьФорматирование(ПараметрыВыполнения, ЭлементРодитель)    
	
	Подчиненные = ЭлементРодитель.Элементы;
	
	Для Каждого ЭлементДанных Из Подчиненные Цикл 
		
		Выполнена = Ложь;
		ФорматироватьВертикальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;
		
		ФорматироватьСтрочныйЭлемент(ПараметрыВыполнения, ЭлементРодитель, ЭлементДанных);
		ФорматированиеДобавитьРезультат(ЭлементРодитель, ЭлементДанных.Формат.Результат);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьСтрочныйЭлемент(ПараметрыВыполнения, ЭлементРодитель, ЭлементДанных)
	ЭлементДанных.Формат.Результат.Очистить();
	Выполнена = Ложь;
	
	ФорматироватьГоризонтальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ФорматироватьОднострочнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
	
	ФорматироватьТаблицу(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ФорматироватьПолеВвода(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ФорматироватьФлажок(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ФорматироватьНадпись(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
	
	ФорматироватьСтраницы(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ФорматироватьКоманднуюПанель(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьВертикальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "ВертикальнаяГруппа" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ВыполнитьФорматирование(ПараметрыВыполнения, ЭлементДанных);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьГоризонтальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "ГоризонтальнаяГруппа" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;

	НаборСтрок = Новый Массив;
	Для Каждого ВертикальнаяГруппа Из ЭлементДанных.Элементы Цикл
		ВертикальнаяГруппа.Формат.Результат.Очистить();
		
		СтрокаЗаголовок = ПостоянныйПараметр("РазделительГруппаДобавить");
		Если ВертикальнаяГруппа.НаборСвойств.ОтображатьЗаголовок Тогда
			СтрокаЗаголовок = СтрокаЗаголовок + СокрЛП(ВертикальнаяГруппа.НаборСвойств.Заголовок);			
		КонецЕсли; 
		СтрокаЗаголовок = ВыровнитьСтроку(СтрокаЗаголовок, "Лево", ВертикальнаяГруппа.Формат.Длина);
		ВертикальнаяГруппа.Формат.Результат.Добавить(СтрокаЗаголовок);
		
		ПараметрыВыполненияРасчет = НовыеПараметрыФорматирования(ПараметрыВыполнения.РасчетДлины, ВертикальнаяГруппа.Формат.Длина);
		ВыполнитьФорматирование(ПараметрыВыполненияРасчет, ВертикальнаяГруппа);
		
		НаборСтрок.Добавить(ВертикальнаяГруппа.Формат.Результат);
	КонецЦикла;
	
	Результат = СоединитьСтрокиГоризонтально(НаборСтрок, "   " +  ПостоянныйПараметр("РазделительГруппа") + "   ", "   ");
	ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьОднострочнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "ОднострочнаяГруппа" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;

	НаборСтрок = Новый Массив;
	Для Каждого ЭлементГруппы Из ЭлементДанных.Элементы Цикл
		ЭлементГруппы.Формат.Результат.Очистить();
		
		ПараметрыВыполненияРасчет = НовыеПараметрыФорматирования(ПараметрыВыполнения.РасчетДлины, ЭлементГруппы.Формат.Длина);
		
		ФорматироватьСтрочныйЭлемент(ПараметрыВыполненияРасчет, ЭлементДанных, ЭлементГруппы);
		
		НаборСтрок.Добавить(ЭлементГруппы.Формат.Результат);
	КонецЦикла;
	
	Результат = СоединитьСтрокиГоризонтально(НаборСтрок, " & ");
	ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьСтраницы(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "Страницы" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ИсключаемыеСвойства = СтрРазделить(
		"Заголовок", Символы.ПС);
	
	Для Каждого Страница Из ЭлементДанных.Элементы Цикл
		Страница.Формат.Результат.Очистить();
		
		ФорматированиеДобавитьРезультат(ЭлементДанных, "");
		Результат = "/" + Страница.НаборСвойств.Заголовок;
		Результат = Результат + ФорматироватьНаборСвойств(Страница.НаборСвойств, ИсключаемыеСвойства);
		ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
		ФорматированиеДобавитьРезультат(ЭлементДанных, "");
		
		ПараметрыВыполненияРасчет = НовыеПараметрыФорматирования(ПараметрыВыполнения.РасчетДлины, Страница.Формат.Длина);
		ВыполнитьФорматирование(ПараметрыВыполненияРасчет, Страница);
		
		Результат = Новый Массив;
		Для Каждого Строка Из Страница.Формат.Результат Цикл
			Результат.Добавить("	" + Строка);
		КонецЦикла;
		
		ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьТаблицу(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "Таблица" 
		И НЕ ЭлементДанных.Тип = "Дерево" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ЭлементДанных.Формат.Результат.Очистить();  
	
	
	ПустаяСтрока = ФорматироватьГоризонтальноеПоложение(
		"", 
		"Лево", 
		ПараметрыВыполнения.Длина);

	ФорматированиеДобавитьРезультат(ЭлементДанных, ПустаяСтрока);
	
	ИсключаемыеСвойства = Новый Массив;
	Результат = ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
	КонецЕсли;

	НаборКолонок = Новый Массив;
	
	Для СчКолонок = 0 По ЭлементДанных.Колонки.ВГраница() Цикл
		Колонка = ЭлементДанных.Колонки[СчКолонок]; 
		Колонка.Формат.Результат.Очистить();
		
		ПараметрыВыполненияКолонка = НовыеПараметрыФорматирования(ПараметрыВыполнения.РасчетДлины, ПараметрыВыполнения.Длина);
		ФорматироватьКолонку(ПараметрыВыполненияКолонка, Колонка);
		ФорматироватьРазделитель(ПараметрыВыполненияКолонка, Колонка);
		
		ФорматироватьСтрокиТаблицы(
			ПараметрыВыполненияКолонка, 
			Колонка, 
			СчКолонок, 
			ЭлементДанных.Строки, 
			0);

		НаборКолонок.Добавить(Колонка.Формат.Результат);
	КонецЦикла;      
	Результат = СоединитьСтрокиГоризонтально(НаборКолонок, "|", , Истина);
	
	ФорматированиеДобавитьРезультат(ЭлементДанных, Результат); 
	
	ФорматированиеДобавитьРезультат(ЭлементДанных, ПустаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьСтрокиТаблицы(ПараметрыВыполненияКолонка, Колонка, НомерКолонки, Строки, Уровень)
	Для Каждого Строка Из Строки Цикл  
		ТекУровень = ?(НомерКолонки = 0, Уровень, 0);
		ФорматироватьЯчейку(ПараметрыВыполненияКолонка, Колонка, Строка.Ячейки[НомерКолонки], ТекУровень);
		
		ФорматироватьСтрокиТаблицы(ПараметрыВыполненияКолонка, Колонка, НомерКолонки, Строка.Строки, Уровень + 1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьКолонку(ПараметрыВыполнения, Колонка) 
	Строка = " "+ Колонка.НаборСвойств.Заголовок + " ";
	Строка = ВыровнитьСтроку(Строка, Колонка.НаборСвойств.ГоризонтальноеПоложение, Колонка.Формат.Длина);
	
	ФорматированиеУстановитьРезультат(Колонка, Строка);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьРазделитель(ПараметрыВыполнения, Колонка)
	МинимальнаяДлина = 5;
	Длина = Макс(Колонка.Формат.Длина, МинимальнаяДлина);
	
	СимволСлева = " ";
	СимволСправа = " ";
	Если Колонка.НаборСвойств.ГоризонтальноеПоложение = "Право" Тогда
		СимволСправа = ": ";
	ИначеЕсли Колонка.НаборСвойств.ГоризонтальноеПоложение = "Центр" Тогда
		СимволСлева = " :";
		СимволСправа = ": ";
	КонецЕсли;
	
	Строка = СимволСлева 
		+ СтрПовторитьСимвол("-", Длина - СтрДлина(СимволСлева) - СтрДлина(СимволСправа))
		+ СимволСправа;
		
	ФорматированиеДобавитьРезультат(Колонка, Строка);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьЯчейку(ПараметрыВыполнения, Колонка, Ячейка, Уровень)      
	Строка = Ячейка.Значение;
	
	Строка = ПолучитьСтрокуФлажок(
		Строка, 
		Ячейка.ЕстьФлажок, 
		Ячейка.ЗначениеФлажка, 
		"Право");

	Если Уровень > 0 Тогда
		Строка = СтрПовторитьСимвол(".", Уровень) + " " + Строка;
	КонецЕсли;
		
	Строка = " "+ Строка + " ";
	Строка = ВыровнитьСтроку(Строка, Колонка.НаборСвойств.ГоризонтальноеПоложение, Колонка.Формат.Длина);
	
	ФорматированиеДобавитьРезультат(Колонка, Строка);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьПолеВвода(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "ПолеВвода" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ИсключаемыеСвойства = СтрРазделить(
		"КнопкаВыпадающегоСписка
		|КнопкаВыбора
		|КнопкаОчистки
		|КнопкаРегулирования
		|КнопкаОткрытия
		|МногострочныйРежим
		|ГоризонтальноеПоложение
		|Высота
		|Заголовок
		|ПоложениеЗаголовка", Символы.ПС);
	
	ЗаголовокЭлемента = ЭлементДанных.НаборСвойств.Заголовок + ": ";
	Результат = ЗаголовокЭлемента + ЭлементДанных.Значение;

	ДлинаЗначения = СтрДлина(ЭлементДанных.Значение);
	ДлинаЗаголовка = СтрДлина(ЗаголовокЭлемента);
		
	СвойстваПоляВвода = "";   
	ФорматироватьДобавитьСвойство(СвойстваПоляВвода, ЭлементДанных.НаборСвойств, "КнопкаВыпадающегоСписка", "v");
	ФорматироватьДобавитьСвойство(СвойстваПоляВвода, ЭлементДанных.НаборСвойств, "КнопкаВыбора", ".");
	ФорматироватьДобавитьСвойство(СвойстваПоляВвода, ЭлементДанных.НаборСвойств, "КнопкаОчистки", "x");
	ФорматироватьДобавитьСвойство(СвойстваПоляВвода, ЭлементДанных.НаборСвойств, "КнопкаРегулирования", "^");
	ФорматироватьДобавитьСвойство(СвойстваПоляВвода, ЭлементДанных.НаборСвойств, "КнопкаОткрытия", "o");
	
	Если НЕ ПустаяСтрока(СвойстваПоляВвода) Тогда
		Результат = Результат + "__" + СвойстваПоляВвода;
	КонецЕсли;
	
	Результат = Результат + ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
	
	Результат = ФорматироватьГоризонтальноеПоложение(
		Результат, 
		ЭлементДанных.НаборСвойств.ГоризонтальноеПоложение, 
		ПараметрыВыполнения.Длина);
	
	ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);	

	Если ЭлементДанных.НаборСвойств.Свойство("МногострочныйРежим") 
		И Булево(ЭлементДанных.НаборСвойств.Свойство("МногострочныйРежим")) Тогда
		
		СтрМногострочный = СтрПовторитьСимвол(" ", ДлинаЗаголовка) +  СтрПовторитьСимвол("_", ДлинаЗначения);
		Для СчСтрок = 2 По Число(ЭлементДанных.НаборСвойств.Высота) Цикл   
			ФорматированиеДобавитьРезультат(ЭлементДанных, СтрМногострочный);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьНадпись(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "Надпись" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ИсключаемыеСвойства = СтрРазделить(
		"ГоризонтальноеПоложение
		|Заголовок", Символы.ПС);
	
	Результат = ЭлементДанных.НаборСвойств.Заголовок;
	
	Результат = Результат + ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
	
	Результат = ФорматироватьГоризонтальноеПоложение(
		Результат, 
		ЭлементДанных.НаборСвойств.ГоризонтальноеПоложение, 
		ПараметрыВыполнения.Длина);
	
	ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);	
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьФлажок(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "Флажок" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ИсключаемыеСвойства = СтрРазделить(
		"Заголовок
		|ГоризонтальноеПоложение
		|ПоложениеЗаголовка", Символы.ПС);
	
	Результат = ЭлементДанных.НаборСвойств.Заголовок;
	
	Результат = ПолучитьСтрокуФлажок(
		Результат, 
		Истина, 
		ЭлементДанных.Значение, 
		ЭлементДанных.НаборСвойств.ПоложениеЗаголовка);
	
	Результат = Результат + ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
	
	Результат = ФорматироватьГоризонтальноеПоложение(
		Результат, 
		ЭлементДанных.НаборСвойств.ГоризонтальноеПоложение, 
		ПараметрыВыполнения.Длина);
	
	ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьКоманднуюПанель(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "КоманднаяПанель" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ИсключаемыеСвойства = СтрРазделить(
		"ГоризонтальноеПоложение", Символы.ПС);
	
	ЕстьМеню = Ложь;
	
	Кнопки = ПолучитьСписокКнопокБезГрупп(ЭлементДанных);
	
	НаборКнопок = ФорматироватьПолучитьКнопкиКоманднойПанели(ПараметрыВыполнения, Кнопки, ЕстьМеню);
	
	СтрКнопки = СтрСоединить(
		НаборКнопок, 
		" " +  ПостоянныйПараметр("КоманднаяПанельРазделительКнопок") + " ");

	Результат = ПостоянныйПараметр("КоманднаяПанельНачало") 
		+ " " 
		+ СтрКнопки
		+ " "; 
	
	Если НЕ ЕстьМеню Тогда
		Результат = Результат + ПостоянныйПараметр("КоманднаяПанельКонец"); 
	
		Результат = Результат + ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
		
		Результат = ФорматироватьГоризонтальноеПоложение(
			Результат, 
			ЭлементДанных.НаборСвойств.ГоризонтальноеПоложение, 
			ПараметрыВыполнения.Длина);
		
		ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);	
		
		Возврат;
	КонецЕсли;
	
	ПараметрыФорматированияГоризонтальногоПоложения = ФорматироватьГоризонтальноеПоложениеПодготовка(
		Результат, 
		ЭлементДанных.НаборСвойств.ГоризонтальноеПоложение, 
		ПараметрыВыполнения.Длина);
		
	Результат = 
		ПараметрыФорматированияГоризонтальногоПоложения.Слева 
		+ ПараметрыФорматированияГоризонтальногоПоложения.Строка;
		
	ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);	
	
	Для Каждого Кнопка Из Кнопки Цикл
		Если Кнопка.Тип <> "Меню" Тогда
			Продолжить;
		КонецЕсли;	
		
		ФорматироватьМеню(
			ПараметрыВыполнения, 
			ЭлементДанных, 
			Кнопка, 
			0);
	КонецЦикла;
	
	ТекстКонецЭлемента = 
		" " 
		+ ПостоянныйПараметр("КоманднаяПанельКонец") 
		+ ПараметрыФорматированияГоризонтальногоПоложения.Справа;
	ФорматированиеДобавитьРезультат(ЭлементДанных, ТекстКонецЭлемента, Истина);	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокКнопокБезГрупп(Родитель)
	Результат = Новый Массив;
	Для Каждого Кнопка Из Родитель.Элементы Цикл
		Если Кнопка.Тип <> "ГруппаКнопок" Тогда
			Результат.Добавить(Кнопка);
			Продолжить;
		КонецЕсли;
			
		НаборКнопок = ПолучитьСписокКнопокБезГрупп(Кнопка);
		
		Если Результат.Количество() > 0 Тогда
			Результат.Добавить(Кнопка);
		КонецЕсли; 
		
		Для Каждого ДобавляемаяКнопка Из НаборКнопок Цикл
			Результат.Добавить(ДобавляемаяКнопка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ФорматироватьПолучитьКнопкиКоманднойПанели(ПараметрыВыполнения, Кнопки, ЕстьМеню)
	НаборКнопок = Новый Массив;
	Для Каждого Кнопка Из Кнопки Цикл
		Если Кнопка.Тип = "ГруппаКнопок" Тогда
			НаборКнопок.Добавить(" "+ ПостоянныйПараметр("КоманднаяПанельРазделительМеню"));
			Продолжить;
		КонецЕсли;
		
		Если Кнопка.Тип = "Меню" Тогда
			ЕстьМеню = Истина;
		КонецЕсли;
		
		ПараметрыВыполненияКнопка = НовыеПараметрыФорматирования(ПараметрыВыполнения.РасчетДлины, ПараметрыВыполнения.Длина);
		ФорматироватьКнопкуКоманднойПанели(ПараметрыВыполненияКнопка, Кнопка);
		
		НаборКнопок.Добавить(Кнопка.Формат.Результат[0]);
	КонецЦикла;
	
	Возврат НаборКнопок;
КонецФункции

&НаКлиенте
Процедура ФорматироватьМеню(
		ПараметрыВыполнения, 
		ТекКоманднаяПанель, 
		ЭлементДанных, 
		Уровень)
		
	Если ЭлементДанных.Тип = "ГруппаКнопок" Тогда
		Результат = ПостоянныйПараметр("КоманднаяПанельРазделительМеню");
	Иначе
		ЭтоМеню = (Уровень = 0);	
		Результат = ПолучитьФорматированноеОписаниеКнопки(ЭлементДанных, ЭтоМеню);
	КонецЕсли;

	Результат = ПолучитьОписаниеСУровнем(Результат, Уровень);
	
	ФорматированиеДобавитьРезультат(ТекКоманднаяПанель, Результат);	
	
	Если ЭлементДанных.Тип = "Меню" Тогда
		ФорматироватьЭлементыМеню(ПараметрыВыполнения, ТекКоманднаяПанель, Уровень + 1, ЭлементДанных);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеСУровнем(Результат, Уровень)
	Если Уровень = 0 Тогда
		Возврат Результат;
	КонецЕсли;	
	
	Возврат
		СтрПовторитьСимвол(ПостоянныйПараметр("Уровень"), Уровень) 
		+ " " 
		+ Результат;
КонецФункции

&НаКлиенте
Процедура ФорматироватьЭлементыМеню(ПараметрыВыполнения, ТекКоманднаяПанель, Уровень, Меню)
	ЭлементыБезГрупп = ПолучитьСписокКнопокБезГрупп(Меню);
	Для Каждого Подменю Из ЭлементыБезГрупп Цикл
		ФорматироватьМеню(
			ПараметрыВыполнения, 
			ТекКоманднаяПанель, 
			Подменю, 
			Уровень);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФорматированноеОписаниеКнопки(ЭлементДанных, ЭтоМеню = Ложь)
	
	ТекстКартинка = Неопределено;
	ТекстЗаголовок = ЭлементДанных.НаборСвойств.Заголовок;
	
	Если ЭлементДанных.Картинка <> Неопределено Тогда
		ТекстКартинка = "@" + ЭлементДанных.Картинка;
	КонецЕсли;

	Если ЭтоМеню И НЕ ПустаяСтрока(ТекстЗаголовок) Тогда
		ТекстКартинка = Неопределено;
	КонецЕсли;
	
	Если ТекстКартинка = Неопределено Тогда
		Возврат ТекстЗаголовок;
	КонецЕсли;
	
	Если ЭлементДанных.НаборСвойств.ПоложениеКартинки = "Лево" Тогда
		Возврат ТекстКартинка + " " + ТекстЗаголовок;
	КонецЕсли;
	
	Возврат ТекстЗаголовок  + " " + ТекстКартинка;
КонецФункции

&НаКлиенте
Процедура ФорматироватьКнопкуКоманднойПанели(ПараметрыВыполнения, ЭлементДанных)
	ИсключаемыеСвойства = СтрРазделить(
		"ПоложениеКартинки
		|Заголовок", Символы.ПС);
	
	Результат = ПолучитьФорматированноеОписаниеКнопки(ЭлементДанных);
	
	Результат = Результат + ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
	
	ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуФлажок(Строка, ЕстьФлажок, ЗначениеФлажка, ПоложениеЗаголовка)
	Если НЕ ЕстьФлажок Тогда
		Возврат Строка;
	КонецЕсли;
	
	Значение = " ";
	Если ЗначениеФлажка Тогда
		Значение = "X";
	КонецЕсли;
	Значение = "[" + Значение + "]";
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если ПоложениеЗаголовка = "Право" Тогда
		Возврат Значение + " " + Строка;
	КонецЕсли;
	Возврат Строка + " " + Значение;
КонецФункции

&НаКлиенте
Процедура ФорматироватьДобавитьСвойство(Строка, Свойства, ИмяСвойство, Значение)   
	Если НЕ Свойства.Свойство(ИмяСвойство) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Свойства[ИмяСвойство] Тогда
		Возврат;
	КонецЕсли;
	Строка = Строка + Значение;
КонецПроцедуры

&НаКлиенте
Функция ФорматироватьНаборСвойств(Свойства, ИсключаемыеСвойства)
	МассивРезультат = Новый Массив;
	Для Каждого КлючЗначение Из Свойства Цикл 
		Если ИсключаемыеСвойства.Найти(КлючЗначение.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСвойство = СтрШаблон("%1 = %2", КлючЗначение.Ключ, КлючЗначение.Значение);
		МассивРезультат.Добавить(СтрокаСвойство);
	КонецЦикла;  
	
	Если МассивРезультат.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат " {" + СтрСоединить(МассивРезультат,"; ") + "}";
КонецФункции

&НаКлиенте
Функция СоединитьСтрокиГоризонтально(
	НаборыСтрок, 
	Символ, 
	СимволПерваяСтрока = Неопределено, 
	ДобавитьВНачалоКонец = Ложь)

	Результат = Новый Массив;
	СчСтроки = 0;
	Пока Истина Цикл
		МассивСтрок = Новый Массив;
		ДобавленаСтрока = Ложь;
		Для Каждого Набор Из НаборыСтрок Цикл
			Если СчСтроки > Набор.ВГраница() Тогда
				МассивСтрок.Добавить("");
				Продолжить;
			КонецЕсли;
			МассивСтрок.Добавить(Набор[СчСтроки]);
			ДобавленаСтрока = Истина;
		КонецЦикла;    
		
		Если НЕ ДобавленаСтрока Тогда
			Прервать;
		КонецЕсли;
		
		ТекСимвол = Символ;
		Если СчСтроки = 0 И СимволПерваяСтрока <> Неопределено Тогда
			ТекСимвол = СимволПерваяСтрока;
		КонецЕсли;

        СтрРезультат = СтрСоединить(МассивСтрок, ТекСимвол);
		Если ДобавитьВНачалоКонец Тогда
			СтрРезультат  = ТекСимвол + СтрРезультат + ТекСимвол;
		КонецЕсли; 
		
		Результат.Добавить(СтрРезультат);
		СчСтроки = СчСтроки + 1;
	КонецЦикла;     

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СтрПовторитьСимвол(Символ, Количество)
	Если Количество <= 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	Для Сч = 1 По Количество Цикл
		Результат = Результат + Символ;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВыровнитьСтроку(Знач Строка, ГоризонтальноеВыравнивание, Длина)
	КоличествоСимволовКДобавлению = Длина - СтрДлина(Строка);
	Если КоличествоСимволовКДобавлению <= 0 Тогда
		Возврат Строка;
	КонецЕсли;
	
	Если ГоризонтальноеВыравнивание = "Лево" Тогда
		Возврат Строка + СтрПовторитьСимвол(" ", КоличествоСимволовКДобавлению);
	КонецЕсли;
	
	Если ГоризонтальноеВыравнивание = "Право" Тогда
		Возврат СтрПовторитьСимвол(" ", КоличествоСимволовКДобавлению) + Строка;
	КонецЕсли;

	КоличествоСимволовКДобавлениюСлева = Цел(КоличествоСимволовКДобавлению / 2);
	КоличествоСимволовКДобавлениюСправа = КоличествоСимволовКДобавлению - КоличествоСимволовКДобавлениюСлева;
	
	Возврат СтрПовторитьСимвол(
		" ", 
		КоличествоСимволовКДобавлениюСлева) + Строка + СтрПовторитьСимвол(" ", КоличествоСимволовКДобавлениюСправа);
КонецФункции

&НаКлиенте
Процедура ФорматированиеУстановитьРезультат(ЭлементДанных, Результат)
	ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ФорматированиеЗаменитьРезультат(ЭлементДанных, Результат, Индекс)
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматированиеДобавитьРезультат(ЭлементДанных, Результат, ДобавитьВПоследнююСтроку = Ложь)
	Если ДобавитьВПоследнююСтроку Тогда
		НаборСтрок = ЭлементДанных.Формат.Результат;
		Индекс = НаборСтрок.ВГраница();
		ПоследняяСтрока = НаборСтрок[Индекс];
		НаборСтрок[Индекс] = ПоследняяСтрока + Результат; 
		ЭлементДанных.Формат.Длина = Макс(ЭлементДанных.Формат.Длина, СтрДлина(НаборСтрок[Индекс]));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для Каждого ЭлементРезультат Из Результат Цикл
			ЭлементДанных.Формат.Результат.Добавить(ЭлементРезультат);
			ЭлементДанных.Формат.Длина = Макс(ЭлементДанных.Формат.Длина, СтрДлина(ЭлементРезультат));
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ЭлементДанных.Формат.Результат.Добавить(Результат);
	ЭлементДанных.Формат.Длина = Макс(ЭлементДанных.Формат.Длина, СтрДлина(Результат));
КонецПроцедуры

&НаКлиенте
Функция ФорматироватьГоризонтальноеПоложениеПодготовка(Строка, ГоризонтальноеПоложение, Длина)
	Результат = Новый Структура("Слева,Справа,Строка", "", "" ,"");
	СимволСлева = "";
	СимволСправа = "";
	Если ГоризонтальноеПоложение = "Право" Тогда
		СимволСлева = "-> ";
	ИначеЕсли ГоризонтальноеПоложение = "Центр" Тогда
		СимволСлева = "-> ";
		СимволСправа = " <-";
	КонецЕсли;
	
	Результат.Слева = СимволСлева;
	Результат.Справа = СимволСправа;
	Результат.Строка = ВыровнитьСтроку(Строка, ГоризонтальноеПоложение, Длина - СтрДлина(СимволСлева) - СтрДлина(СимволСправа));
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ФорматироватьГоризонтальноеПоложение(Строка, ГоризонтальноеПоложение, Длина)
	Результат = ФорматироватьГоризонтальноеПоложениеПодготовка(Строка, ГоризонтальноеПоложение, Длина);	
	Возврат Результат.Слева 
	    + Результат.Строка
		+ Результат.Справа;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПолучитьИмяРеквизита(Таблица, СтрокаТаблицы)  
	Если НЕ ПустаяСтрока(СтрокаТаблицы.РабочееИмяРеквизита) Тогда 
		ИмяРеквизита = ПреобразоватьИмяВРазрешенныйФормат(СтрокаТаблицы.РабочееИмяРеквизита, СтрокаТаблицы.ТипРеквизита);
		
		МассивСтрок = Таблица.НайтиСтроки(
			Новый Структура("ИмяРеквизита,УИДВладельца", ИмяРеквизита, СтрокаТаблицы.УИДВладельца));
		ТекНомер = 0;
		Для Каждого ТекСтрока Из МассивСтрок Цикл
			ТекНомер = Макс(ТекСтрока.Номер, ТекНомер);
		КонецЦикла;  
		
		Если ЭтоЗапрещенноеИмяРеквизита(ИмяРеквизита) И ТекНомер = 0 Тогда
			ТекНомер = 1;
		КонецЕсли;
		
		СтрокаТаблицы.ИмяРеквизита = ИмяРеквизита;
		СтрокаТаблицы.ИмяЭлемента = СтрокаТаблицы.ИмяРеквизита;
		
		СтрокаТаблицы.Номер = ТекНомер + 1;
		Возврат;
	КонецЕсли;

	Если НЕ ПустаяСтрока(СтрокаТаблицы.РабочееИмяЭлемента) Тогда
		ИмяЭлемента = ПреобразоватьИмяВРазрешенныйФормат(СтрокаТаблицы.РабочееИмяЭлемента, СтрокаТаблицы.ТипРеквизита);
		
		МассивСтрок = Таблица.НайтиСтроки(
			Новый Структура("ИмяЭлемента,УИДВладельца", ИмяЭлемента, СтрокаТаблицы.УИДВладельца));
		ТекНомер = 0;
		Для Каждого ТекСтрока Из МассивСтрок Цикл
			ТекНомер = Макс(ТекСтрока.Номер, ТекНомер);
		КонецЦикла;
		
		СтрокаТаблицы.ИмяЭлемента = ИмяЭлемента;         
		
		СтрокаТаблицы.Номер = ТекНомер + 1;
	КонецЕсли;
	
КонецПроцедуры    

&НаКлиенте
Функция ЭтоЗапрещенноеИмяРеквизита(Имя)
	Возврат нрег(Имя) = "заголовок";
КонецФункции

&НаКлиенте
Функция ПреобразоватьИмяВРазрешенныйФормат(Строка, Префикс)
	Если НЕ ЗначениеЗаполнено(Строка) Тогда
		Возврат Строка;
	КонецЕсли;
	
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	
	Результат = "";
	Для Сч = 1 По СтрДлина(Строка) Цикл     
		Символ = Сред(Строка, Сч, 1);
		КодСимвола = КодСимвола(Символ); 
		
		ДопустимыйСимвол = Ложь;  
		
		ЭтоПервыйСимвол = ПустаяСтрока(Результат);
		
		Если Символ = "№" Тогда
			Результат = Результат + "Номер";
			Продолжить;
		КонецЕсли;
		
		// Первый символ не может быть числом
		Если ЭтоПервыйСимвол Тогда
			ДиапазонЧисло = Диапазоны[0];
			Если КодСимвола >= ДиапазонЧисло.Мин И КодСимвола <= ДиапазонЧисло.Макс Тогда
				Результат = Результат + Префикс + Символ;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого Диапазон Из Диапазоны Цикл
			Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
				ДопустимыйСимвол = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДопустимыйСимвол Тогда
			Результат = Результат + Символ;
		Иначе
			Результат = Результат + " ";
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(Результат) Тогда
		Возврат Префикс;
	КонецЕсли;	

	МассивСтрок = СтрРазделить(Результат, " ");
	
	МассивРезультат = Новый Массив;
	Для Каждого Строка Из МассивСтрок Цикл
		Строка = ВРег(Лев(Строка, 1)) + Сред(Строка, 2);
		МассивРезультат.Добавить(Строка);
	КонецЦикла;
	Результат = СтрСоединить(МассивРезультат, "");
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПостоянныйПараметр(ИмяПараметра)
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("РазделительГруппаДобавить", "#");
	СтруктураПараметры.Вставить("РазделительГруппа", "+");
	СтруктураПараметры.Вставить("РазделительГруппаОднострочная", "&");
	СтруктураПараметры.Вставить("Уровень", ".");
	СтруктураПараметры.Вставить("КоманднаяПанельНачало", "<");
	СтруктураПараметры.Вставить("КоманднаяПанельКонец", ">");
	СтруктураПараметры.Вставить("КоманднаяПанельРазделительМеню", "-");
	СтруктураПараметры.Вставить("КоманднаяПанельРазделительКнопок", "|");

	Возврат СтруктураПараметры[ИмяПараметра];
КонецФункции

#КонецОбласти    