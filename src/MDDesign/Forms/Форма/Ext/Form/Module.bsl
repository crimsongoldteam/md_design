// MIT License

// Copyright (c) 2025 Zherebtsov Nikita <nikita@crimsongold.ru>

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/crimsongoldteam/md_design

#Область ОписаниеПеременных

// Структура, хранящие в себе инициализированные модули
&НаКлиенте
Перем мМодули;

// Абстрактное синтаксическое дерево
&НаКлиенте
Перем мАСД;

// Текущая горизонтальная группа в редакторе
&НаКлиенте
Перем мТекущаяГруппа;

// Текущая строка таблицы группы
&НаКлиенте
Перем мТекущаяСтрокаГруппы;

// Текущая строка таблицы группы
&НаКлиенте
Перем мКонтекстОкнаHTML;

&НаКлиенте
Перем ЭтоLinux Экспорт;

&НаКлиенте
Перем мТекущаяЛеваяГруппа;

&НаКлиенте
Перем мПутьКФайлу;

&НаКлиенте
Перем ЭтоLinux Экспорт;

&НаКлиенте
Перем мТекущаяЛеваяГруппа;

&НаКлиенте
Перем мПутьКФайлу;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СведенияОВнешнейОбработке = ОбработкаОбъект.СведенияОВнешнейОбработке();	
	
	Версия = СведенияОВнешнейОбработке.Версия;
	__ТекущаяВерсия = Версия;
	
	ЭтаФорма.Заголовок = СтрШаблон("Накидка. v%1", Версия);
	
	Элементы.__ДекорацияОднострочнаяГруппа.Заголовок = Элементы.__ДекорацияОднострочнаяГруппа.Заголовок + Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"); 
	
	ЭтаФорма.__ИдентификаторОбработки = ОбработкаОбъект.Метаданные().ПолноеИмя();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТекстHTML = ОбработкаОбъект.ПолучитьМакет("HTML").ПолучитьТекст();
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "%ParserJS%", ОбработкаОбъект.ПолучитьМакет("ParserJS").ПолучитьТекст());
	
	ПолеHTML = ТекстHTML;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.__ГруппаРедакторГрупп.Видимость = Ложь;

	мМодули = Новый Структура;
	
	ИнициализироватьМодули(
		"Парсер
		|ОпределениеРеквизитов
		|Синтаксис
		|Форматтер
		|УправлениеСвойствами
		|ПостроительСхемФормы
		|СлужебныеФункции");

	Если НЕ __НеПроверятьОбновления Тогда
		ПодключитьОбработчикОжидания("ПроверитьАктуальнуюВерсию", 0.1, Истина);
	КонецЕсли;
	
	__ОтображатьСправку = Истина;
	
	УстановитьВидимостьДоступностьЭлементов();    
	
	
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
Асинх Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если __РежимРедактораГрупп Тогда   
		Попытка
			СинхронизироватьТаблицуГруппСГруппами();
			СтрокаФормат = Форматтер().Форматировать(мАСД);
			УстановитьТекстРедактора(СтрокаФормат, Ложь);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Ошибка при сохранении содержимого редактора: %1", ОписаниеОшибки());
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
	Если Модифицированность Тогда
	
		Ответ = Ждать ВопросАсинх(НСтр("ru = 'Ваша форма не сохранена, сохранить?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьФайл();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КонецЕсли;
	Если Модифицированность Тогда
	
		Ответ = Ждать ВопросАсинх(НСтр("ru = 'Ваша форма не сохранена, сохранить?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьФайл();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура __ПостроитьФорму(Команда)   
	ДанныеГенератора = ПолучитьДанныеДляГенерацииФормы();
	Если ДанныеГенератора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Построить(ДанныеГенератора);
	
	ЗаголовокФормы = ДанныеГенератора.ЗаголовокФормы;
	Если ПустаяСтрока(ЗаголовокФормы) Тогда
		ЗаголовокФормы = "<Без заголовка>";
	КонецЕсли;
	
	__ОтображатьСправку = Ложь;
	
	УстановитьВидимостьДоступностьЭлементов();
	
	ЭтотОбъект.__ЗаголовокФормы = ЗаголовокФормы;      
	
	Попытка
		__ДеревоЭлементов.ПолучитьЭлементы().Очистить();     
		ЗаполнитьДеревоЭлементов(мАСД.Элементы, __ДеревоЭлементов.ПолучитьЭлементы());
	Исключение
	КонецПопытки;
	
КонецПроцедуры   

&НаКлиенте
Процедура __ПостроитьФормуВОтдельномОкне(Команда)    
	ДанныеГенератора = ПолучитьДанныеДляГенерацииФормы();
	Если ДанныеГенератора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПросмотр = ОткрытьФорму(__ИдентификаторОбработки + ".Форма.ФормаПросмотр", , ЭтаФорма);
	ФормаПросмотр.Построить(ДанныеГенератора);
КонецПроцедуры

&НаКлиенте
Процедура __ГенераторКода(Команда)
	Если __РежимРедактораГрупп Тогда
		СинхронизироватьТаблицуГруппСГруппами();
	Иначе
		мАСД = Парсер().Разобрать(__Редактор);
	КонецЕсли;
	ОписанияРеквизитов = ОпределениеРеквизитов().Заполнить(мАСД); 
	
	УправлениеСвойствами().ЗаполнитьНеизвестныеСвойства(мАСД);
	
	ПараметрыВыполнения = ПостроительСхемФормы().СоздатьПараметрыВыполнения();
	ДанныеГенератора = ПостроительСхемФормы().Получить(мАСД, ОписанияРеквизитов, ПараметрыВыполнения);

	ФормаПросмотр = ОткрытьФорму(__ИдентификаторОбработки + ".Форма.ФормаКода", , ЭтаФорма);
	
	ФормаПросмотр.Результат = ГенераторКода().Получить(ДанныеГенератора);
КонецПроцедуры

&НаКлиенте
Процедура __ГенераторXML(Команда)
	Если __РежимРедактораГрупп Тогда
		СинхронизироватьТаблицуГруппСГруппами();
	Иначе
		мАСД = Парсер().Разобрать(__Редактор);
	КонецЕсли;
	ОписанияРеквизитов = ОпределениеРеквизитов().Заполнить(мАСД); 
	
	УправлениеСвойствами().ЗаполнитьНеизвестныеСвойства(мАСД);

	ПараметрыВыполнения = ПостроительСхемФормы().СоздатьПараметрыВыполнения();
	
	ДанныеГенератора = ПостроительСхемФормы().Получить(мАСД, ОписанияРеквизитов, ПараметрыВыполнения);

	СхемыФормы = Новый Структура("СхемаЭлементы, СхемаРеквизиты", ДанныеГенератора.Элементы[0], ДанныеГенератора.Реквизиты);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("СхемыФормы", СхемыФормы);
	
	СлужебныеФункции().СтруктураВJSON(ПараметрыОткрытия);
	
	ОткрытьФорму(__ИдентификаторОбработки + ".Форма.ФормаГенераторXML", ПараметрыОткрытия, ЭтотОбъект);
	
	//ГенераторКода().Получить(ДанныеГенератора);
КонецПроцедуры

&НаКлиенте
Процедура __Форматировать(Команда)
	ФормаГруппы = Парсер().Разобрать(__Редактор);
	СтрокаФормат = Форматтер().Форматировать(ФормаГруппы);
	УстановитьТекстРедактора(СтрокаФормат);

	ЭтотОбъект.ТекущийЭлемент = Элементы.__Редактор;
КонецПроцедуры

&НаКлиенте
Процедура __ДобавитьКартинку(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКартинкиЗавершение", ЭтотОбъект);
						 
	ОткрытьФорму(__ИдентификаторОбработки + ".Форма.ФормаВыбораКартинки", , ЭтаФорма, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.__Редактор.ВыделенныйТекст = Лексема("Картинка") + РезультатЗакрытия;
	ОбновитьТекстВТекущейГруппе(ЭтотОбъект.__Редактор);	
КонецПроцедуры

&НаКлиенте
Процедура __РедакторГрупп(Команда)    
	Если __РежимРедактораГрупп Тогда
		СинхронизироватьТаблицуГруппСГруппами();   
		ТекРодитель = мТекущаяГруппа.Элементы[мТекущаяСтрокаГруппы.Порядок - 1];
	Иначе
		мАСД = Парсер().Разобрать(__Редактор);
		ТекРодитель = мАСД;
	КонецЕсли;
	
	ПараметрыДобавления = ПолучитьПарамерыДобавленияЭлемента(ТекРодитель, "ГоризонтальнаяГруппа");
	Если ПараметрыДобавления.Вместо <> Неопределено Тогда
		мТекущаяГруппа = ПараметрыДобавления.Вместо;
	Иначе        
		мТекущаяГруппа = Парсер().ПолучитьОписаниеГоризонтальнойГруппы(Неопределено);
		ДобавитьВставитьЭлемент(ПараметрыДобавления, мТекущаяГруппа);
		
		ВертикальнаяГруппа = Парсер().ПолучитьОписаниеВертикальнойГруппы(Неопределено);
		мТекущаяГруппа.Элементы.Добавить(ВертикальнаяГруппа);
	КонецЕсли;
	
	__ТаблицаГруппы.Очистить();
	Порядок = 1;
	Для Каждого ВертикальнаяГруппа Из мТекущаяГруппа.Элементы Цикл
		СтрокаТаблицы = __ТаблицаГруппы.Добавить();
		СтрокаТаблицы.Заголовок = ВертикальнаяГруппа.НаборСвойств.Заголовок;
		СтрокаТаблицы.Порядок = Порядок; 
		СтрокаТаблицы.Текст = Форматтер().Форматировать(ВертикальнаяГруппа);
		
		Порядок = Порядок + 1;
	КонецЦикла;
	
	Элементы.__ГруппаРедакторГрупп.Видимость = Истина;
	__РежимРедактораГрупп = Истина;      
	мТекущаяВертикальнаяГруппа = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура __ВРедактор(Команда)
	Элементы.__ГруппаРедакторГрупп.Видимость = Ложь; 
	__РежимРедактораГрупп = Ложь;
	
	СинхронизироватьТаблицуГруппСГруппами();
	
	СтрокаФормат = Форматтер().Форматировать(мАСД);
	УстановитьТекстРедактора(СтрокаФормат);
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.__Редактор;
	
	мТекущаяГруппа = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура __РедакторТаблицы(Команда) 
	Если __РежимРедактораГрупп Тогда
		СинхронизироватьТаблицуГруппСГруппами();   
		ТекРодитель = мТекущаяГруппа.Элементы[мТекущаяСтрокаГруппы.Порядок - 1];
	Иначе
		мАСД = Парсер().Разобрать(__Редактор);
		ТекРодитель = мАСД;
	КонецЕсли;

	ПарамерыДобавления = ПолучитьПарамерыДобавленияЭлемента(ТекРодитель, "Таблица,Дерево");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОписаниеТаблицы", ПарамерыДобавления.Вместо);
	
	ДополнительныеПараметры = Новый Структура("Родитель,Перед,Вместо,Форма", 
		ПарамерыДобавления.Родитель, 
		ПарамерыДобавления.Перед, 
		ПарамерыДобавления.Вместо,
		ПарамерыДобавления.Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеТаблицыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(__ИдентификаторОбработки + ".Форма.ФормаРедактированияТаблицы", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеТаблицыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодительЭлемента = ДополнительныеПараметры.Родитель;
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Вместо) Тогда 
		Вместо = ДополнительныеПараметры.Вместо;
		ИндексЭлемента =  РодительЭлемента.Элементы.Найти(Вместо);
		РодительЭлемента.Элементы[ИндексЭлемента] = РезультатЗакрытия;	
	Иначе
		ДобавитьВставитьЭлемент(ДополнительныеПараметры, РезультатЗакрытия);
	КонецЕсли;

	СтрокаФормат = Форматтер().Форматировать(ДополнительныеПараметры.Форма); 
	УстановитьТекстРедактора(СтрокаФормат);
КонецПроцедуры
 
&НаКлиенте
Процедура __КомандаЗаглушка(Команда)
	// Ничего не делаем
КонецПроцедуры

&НаКлиенте
Процедура __ДобавитьПрямыеСкобки(Команда)
	ОбернутьВыделенныйТекст("[]", "");
КонецПроцедуры

&НаКлиенте
Процедура __ДобавитьФигурныеСкобки(Команда)
	ОбернутьВыделенныйТекст("{", "}");
КонецПроцедуры

&НаКлиенте
Процедура __ДобавитьУгловыеСкобки(Команда)
	ОбернутьВыделенныйТекст("<", ">");
КонецПроцедуры

&НаКлиенте
Процедура __Заполнить(Команда)
	ФормаГруппы = Парсер().Разобрать(__Редактор);
	ОписанияРеквизитов = ОпределениеРеквизитов().Заполнить(ФормаГруппы);
	
	ТипыРеквизитов = СтрРазделить("ПолеВвода,Флажок", ",");
	Для Каждого ТекущийТипРеквизита Из ТипыРеквизитов Цикл
		ЗаполнитьЗначениеСтрочногоЭлемента(ФормаГруппы, ОписанияРеквизитов, ТекущийТипРеквизита);
	КонецЦикла;
	
	ТипыРеквизитов = СтрРазделить("Таблица,Дерево", ",");
	Для Каждого ТекущийТипРеквизита Из ТипыРеквизитов Цикл
		ЗаполнитьЗначениеТабличногоЭлемента(ФормаГруппы, ОписанияРеквизитов, ТекущийТипРеквизита);
	КонецЦикла;
	
	СтрокаФормат = Форматтер().Форматировать(ФормаГруппы); 
	УстановитьТекстРедактора(СтрокаФормат);
КонецПроцедуры

&НаКлиенте
Процедура __ОткрытьДокументацию(Команда)
	ПерейтиПоНавигационнойСсылке("https://crimsongoldteam.github.io/md_design");
КонецПроцедуры

&НаКлиенте
Процедура __ОткрытьТелеграмКанал(Команда)
	ПерейтиПоНавигационнойСсылке("https://t.me/overlay1c");
КонецПроцедуры

&НаКлиенте
Процедура __РедакторИИ(Команда)
	мТекущаяЛеваяГруппа = "__ГруппаИИ";
	мТекущаяЛеваяГруппа = "__ГруппаИИ";
	__ОтображатьЧатИИ = Не __ОтображатьЧатИИ;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура __ОтправитьИИ(Команда)
	Если ПустаяСтрока(__ЗапросИИ) Тогда
		Возврат;
	КонецЕсли;
	
	__ОжиданиеОтветаИИ = Истина;
	
	Элементы.__ГруппаЗапросИИ.Доступность = НЕ __ОжиданиеОтветаИИ;

	ПодключитьОбработчикОжидания("ОтправитьИИЗавершение", 1, Истина);
КонецПроцедуры      

&НаКлиенте
Процедура __ОчиститьИИ(Команда)
	__ЧатИИ.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИИЗавершение();
	__ОжиданиеОтветаИИ = Ложь;

	Элементы.__ГруппаЗапросИИ.Доступность = НЕ __ОжиданиеОтветаИИ;
	
	Контекст = Новый Массив;
	Для Каждого Строка Из __ЧатИИ Цикл
		Контекст.Добавить(Новый Структура("ЭтоВходящее,Сообщение", Строка.Входящее, Строка.Сообщение));
	КонецЦикла;
	
	Настройки = РаботаСИИ().ПолучитьНастройки();
	Настройки.ПровайдерИИ = __ПровайдерИИ;
	Настройки.МодельИИ = __МодельИИ;
	Настройки.ТокенИИ = __ТокенИИ;
	
	Ответ = РаботаСИИ().Отправить(__ЗапросИИ, Контекст, Настройки);
	
	Если Ответ = Неопределено Тогда
		ВызватьИсключение "Не удалось получить ответ!";
	КонецЕсли;

	СтрокаЧата = __ЧатИИ.Добавить();
	СтрокаЧата.Сообщение = __ЗапросИИ;
	__ЗапросИИ = "";   
	
	СтрокаЧата = __ЧатИИ.Добавить();
	СтрокаЧата.Сообщение = Ответ;
	СтрокаЧата.Входящее = Истина;
	
	Элементы.__ЧатИИ.ТекущаяСтрока = СтрокаЧата.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Процедура __ЗаменитьИИ(Команда)
	ТекущаяСтрока = Элементы.__ЧатИИ.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяСтрока.Входящее Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Сообщение = __Редактор;
КонецПроцедуры

&НаКлиенте
Процедура __ПоказатьСправку(Команда)
	__ОтображатьСправку = Истина;
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

&НаКлиенте
Процедура __Настройки(Команда)                    
	Настройки = Новый Структура;
	
	ПоляНастроек = "__НеПроверятьОбновления,__ТокенИИ,__МодельИИ,__ПровайдерИИ";
	МассивНастроек = СтрРазделить(ПоляНастроек, ",");
	Для Каждого ИмяНастройки Из МассивНастроек Цикл
		Настройки.Вставить(ИмяНастройки, ЭтаФорма[ИмяНастройки]);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Настройки", Настройки);
	ОткрытьФорму(__ИдентификаторОбработки + ".Форма.ФормаНастройка", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из РезультатЗакрытия Цикл
		ЭтаФорма[КлючЗначение.Ключ] = КлючЗначение.Значение;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура _СохранитьФайл(Команда)

	СохранитьФайл();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура СохранитьФайл()

	Если Не ПустаяСтрока(мПутьКФайлу) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(__Редактор);
		ТекстовыйДокумент.НачатьЗапись(, мПутьКФайлу, "UTF-8");
	Иначе
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.Расширение = РасширениеФайлаНакидка();
		ВыбранныеФайлы = Ждать ДиалогОткрытияФайла.ВыбратьАсинх();
		Если Не ВыбранныеФайлы = Неопределено Тогда
			ПослеЗаписиФайла = Новый ОписаниеОповещения("ПослеЗаписиФайла", ЭтотОбъект);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(__Редактор);
			ТекстовыйДокумент.НачатьЗапись(ПослеЗаписиФайла, ВыбранныеФайлы[0], "UTF-8");
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Ложь;
	//ПоказатьПредупреждение(, Нстр("ru = 'Файл сохранен'"));
	
КонецПроцедуры


&НаКлиенте
Асинх Процедура __НовыйФайл(Команда)

	__Редактор = "";
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Расширение = РасширениеФайлаНакидка();
	ДиалогОткрытияФайла.Каталог = _ПутьКПапкеСФайлами;
	ВыбранныеФайлы = Ждать ДиалогОткрытияФайла.ВыбратьАсинх();
	Если Не ВыбранныеФайлы = Неопределено Тогда
		ПослеЗаписиФайла = Новый ОписаниеОповещения("ПослеЗаписиФайла", ЭтотОбъект);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(__Редактор);
		ТекстовыйДокумент.НачатьЗапись(ПослеЗаписиФайла, ВыбранныеФайлы[0], "UTF-8");
		мПутьКФайлу = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура __РедакторПриИзменении(Элемент)
	
	Модифицированность = Истина;
Процедура __РедакторПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если мТекущаяСтрокаГруппы  = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	мТекущаяСтрокаГруппы.Текст = __Редактор;
	
КонецПроцедуры

&НаКлиенте
Процедура __РедакторИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	//Попытка
	//	мАСД = Парсер().Разобрать(Текст);
	//	__ДеревоЭлементов.ПолучитьЭлементы().Очистить();     
	//	ЗаполнитьДеревоЭлементов(мАСД.Элементы, __ДеревоЭлементов.ПолучитьЭлементы());
	//Исключение
	//КонецПопытки;
КонецПроцедуры     


&НаКлиенте
Процедура НоваяВерсияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке("https://github.com/crimsongoldteam/md_design/releases");
КонецПроцедуры

&НаКлиенте
Процедура __ДекорацияПримерНажатие(Элемент)
	МассивСтрок = Новый Массив;
	Если НЕ ПустаяСтрока(__Редактор) Тогда
		МассивСтрок.Добавить(__Редактор);	
	КонецЕсли;
	МассивСтрок.Добавить(Элемент.Заголовок);
	
	УстановитьТекстРедактора(СтрСоединить(МассивСтрок, Символы.ПС + Символы.ПС));
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументСформирован(Элемент)
	КонтекстДокументаHTML = Элемент.Документ;
	
	мКонтекстОкнаHTML = КонтекстДокументаHTML.parentWindow;
	Если мКонтекстОкнаHTML = Неопределено Тогда
		мКонтекстОкнаHTML = КонтекстДокументаHTML.defaultView;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура _ПутьКПапкеСФайламиПриИзменении(Элемент)
	ОбновитьДеревоФайлов();
КонецПроцедуры

&НаКлиенте
Асинх Процедура _ПутьКПапкеСФайламиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = _ПутьКПапкеСФайлами;
	ВыбранныеФайлы = Ждать ДиалогОткрытияФайла.ВыбратьАсинх();
	Если Не ВыбранныеФайлы = Неопределено Тогда
		_ПутьКПапкеСФайлами = ВыбранныеФайлы[0];
		ОбновитьДеревоФайлов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайла(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоФайлов();
КонецПроцедуры

&НаКлиенте
Процедура __ПоказатьДеревоФайлов(Команда)
	
	мТекущаяЛеваяГруппа = "__ГруппаДеревоФайлов";
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура _ПутьКПапкеСФайламиПриИзменении(Элемент)
	ОбновитьДеревоФайлов();
КонецПроцедуры

&НаКлиенте
Асинх Процедура _ПутьКПапкеСФайламиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = _ПутьКПапкеСФайлами;
	ВыбранныеФайлы = Ждать ДиалогОткрытияФайла.ВыбратьАсинх();
	Если Не ВыбранныеФайлы = Неопределено Тогда
		_ПутьКПапкеСФайлами = ВыбранныеФайлы[0];
		ОбновитьДеревоФайлов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайла(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоФайлов();
КонецПроцедуры

&НаКлиенте
Процедура __ПоказатьДеревоФайлов(Команда)
	
	мТекущаяЛеваяГруппа = "__ГруппаДеревоФайлов";
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЧатИИ

&НаКлиенте
Процедура __ЧатИИВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.__ЧатИИ.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяСтрока.Входящее Тогда
		Возврат;
	КонецЕсли;
	
	Текст = ТекущаяСтрока.Сообщение;
	УстановитьТекстРедактора(Текст);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаГруппы

&НаКлиенте
Процедура __ТаблицаГруппыПриАктивизацииСтроки(Элемент)
	мТекущаяСтрокаГруппы = Элементы.__ТаблицаГруппы.ТекущиеДанные;

	УстановитьТекстРедактора(мТекущаяСтрокаГруппы.Текст, Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДревоФайла

&НаКлиенте
Асинх Процедура ДревоФайлаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Ждать ВопросАсинх(НСтр("ru = 'Файл не сохранен, сохранить?'"), Режим);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьФайл();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = _ДеревоФайлов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущаяСтрока.ЭтоПапка Тогда
		Возврат;
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ТекущаяСтрока.ПолныйПуть, "UTF-8");
	__Редактор = ТекстовыйДокумент.ПолучитьТекст();
	мПутьКФайлу = ТекущаяСтрока.ПолныйПуть;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДревоФайла

&НаКлиенте
Асинх Процедура ДревоФайлаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Ждать ВопросАсинх(НСтр("ru = 'Файл не сохранен, сохранить?'"), Режим);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьФайл();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = _ДеревоФайлов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущаяСтрока.ЭтоПапка Тогда
		Возврат;
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ТекущаяСтрока.ПолныйПуть, "UTF-8");
	__Редактор = ТекстовыйДокумент.ПолучитьТекст();
	мПутьКФайлу = ТекущаяСтрока.ПолныйПуть;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

#Область Модули

&НаКлиенте
Функция Лексемы() Экспорт
	Возврат ПолучитьМодуль("Синтаксис").Лексемы();
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьДеревоЭлементов(ЭлементыАСД, ЭлементыДерева)
	Для Каждого ЭлементАСД Из ЭлементыАСД Цикл
		НовыйЭлементДерева = ЭлементыДерева.Добавить();      
		
		Если ЭлементАСД.НаборСвойств.Свойство("Заголовок") Тогда
			НовыйЭлементДерева.Представление = ЭлементАСД.НаборСвойств.Заголовок;
		Иначе
			НовыйЭлементДерева.Представление = ЭлементАСД.Тип;
		КонецЕсли;
		
		Если НЕ ЭлементАСД.Свойство("Элементы") Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьДеревоЭлементов(ЭлементАСД.Элементы, НовыйЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеДляГенерацииФормы()
	Если __РежимРедактораГрупп Тогда
		СинхронизироватьТаблицуГруппСГруппами();
	Иначе
		мАСД = Парсер().Разобрать(__Редактор);
	КонецЕсли;   
	Если мАСД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписанияРеквизитов = ОпределениеРеквизитов().Заполнить(мАСД); 
	
	УправлениеСвойствами().ЗаполнитьНеизвестныеСвойства(мАСД);
	
	ПараметрыВыполнения = ПостроительСхемФормы().СоздатьПараметрыВыполнения();
	ДанныеГенератора = ПостроительСхемФормы().Получить(мАСД, ОписанияРеквизитов, ПараметрыВыполнения);
	Возврат ДанныеГенератора;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗначениеТабличногоЭлемента(ФормаГруппы, ОписанияРеквизитов, ТипРеквизита)
	СоответствиеРеквизитов = ПолучитьСоответствиеРеквизитовИменам(ФормаГруппы, ОписанияРеквизитов, ТипРеквизита);
	Для Каждого КлючЗначение Из СоответствиеРеквизитов Цикл 
		Если НЕ ЕстьРеквизитФормы(КлючЗначение.Ключ, ТипРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеЭлемента = КлючЗначение.Значение.ОписаниеЭлемента;
		ПрежнийУИД = КлючЗначение.Значение.ПрежнийУИД;
		СоответствиеКолонок = ПолучитьСоответствиеРеквизитовИменам(ОписаниеЭлемента, ОписанияРеквизитов, "Колонка", ПрежнийУИД);
		ТекущаяТаблица = ЭтотОбъект[КлючЗначение.Ключ];
		
		Если ТипРеквизита = "Таблица" Тогда
			ЗаполнитьОписанияПоСтрокамТаблицы(СоответствиеКолонок, ОписаниеЭлемента, ТекущаяТаблица);
		Иначе
			ЗаполнитьОписанияПоСтрокамДерева(СоответствиеКолонок, ОписаниеЭлемента, ТекущаяТаблица);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначениеСтрочногоЭлемента(ФормаГруппы, ОписанияРеквизитов, ТипРеквизита)
	СоответствиеРеквизитов = ПолучитьСоответствиеРеквизитовИменам(ФормаГруппы, ОписанияРеквизитов, ТипРеквизита);
	Для Каждого КлючЗначение Из СоответствиеРеквизитов Цикл 
		Если НЕ ЕстьРеквизитФормы(КлючЗначение.Ключ, ТипРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		Значение = ЭтотОбъект[КлючЗначение.Ключ];
		ОписаниеЭлемента = КлючЗначение.Значение.ОписаниеЭлемента;
		ОписаниеЭлемента.Значение = Форматтер().ФорматироватьЗначениеПоля(Значение, ОписаниеЭлемента.ОписаниеТипов);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВставитьЭлемент(ПараметрыДобавления, НовыйЭлемент) 
	РодительЭлементы = ПараметрыДобавления.Родитель.Элементы;
	
	Если ЗначениеЗаполнено(ПараметрыДобавления.Перед) Тогда
		ИндексЭлемента =  РодительЭлементы.Найти(ПараметрыДобавления.Перед);
		РодительЭлементы.Вставить(ИндексЭлемента, НовыйЭлемент);
		Возврат;
	КонецЕсли;
	
	РодительЭлементы.Добавить(НовыйЭлемент);	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПарамерыДобавленияЭлемента(ФормаГруппы, СтрокаОжидаемыеТипы)     
	Результат = Новый Структура("Родитель,Вместо,Перед,Форма");

	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;

	ОжидаемыеТипы = СтрРазделить(СтрокаОжидаемыеТипы, ",");

	Элементы.__Редактор.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);   
	ПозицияКурсора = ПолучитьБлижайшуюПозициюКурсора(НачалоСтроки, НачалоКолонки);

	Результат.Форма = ФормаГруппы;
	Если ПозицияКурсора.Пустая Тогда
		Результат.Родитель = ФормаГруппы;
		Возврат Результат;
	КонецЕсли;
	
	ИерархияЭлементов = Новый Массив;
	ПолучитьИерархиюЭлементовПоКоординатам(ИерархияЭлементов, ФормаГруппы, ПозицияКурсора.НомерСтроки, ПозицияКурсора.НомерКолонки);
	
	ТекущееОписаниеИндекс = ПолучитьТекущийЭлементИерархии(ИерархияЭлементов, ОжидаемыеТипы);
	
	Если ТекущееОписаниеИндекс <> Неопределено Тогда  
		Результат.Вместо = ИерархияЭлементов[ТекущееОписаниеИндекс];  
		Если ТекущееОписаниеИндекс = 0 Тогда
			Результат.Родитель = ФормаГруппы;
		Иначе
			Результат.Родитель = ИерархияЭлементов[ТекущееОписаниеИндекс - 1];
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;	
	
	КоличествоЭлементов = ИерархияЭлементов.Количество();
	Если КоличествоЭлементов > 0 Тогда
		ТекущийПеред = ИерархияЭлементов[КоличествоЭлементов - 1];
		Результат.Перед = ТекущийПеред; 
		
		Если КоличествоЭлементов > 1 Тогда
			Результат.Родитель = ИерархияЭлементов[КоличествоЭлементов - 2]; 
		Иначе
			Результат.Родитель = ФормаГруппы;
		КонецЕсли;
	
		Возврат Результат;
	КонецЕсли;

	Результат.Родитель = ФормаГруппы;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьТекущийЭлементИерархии(ИерархияЭлементов, ОжидаемыеТипы)
	Если ИерархияЭлементов.Количество() = 0 Тогда
		ИерархияЭлементов.Добавить(мАСД);
	КонецЕсли;
	
	ТекущаяГруппа = Неопределено;
	
	Сч = ИерархияЭлементов.ВГраница();
	Пока Сч >= 0 Цикл
		ТекущееОписание = ИерархияЭлементов[Сч];
		Если ОжидаемыеТипы.Найти(ТекущееОписание.Тип) <> Неопределено Тогда
			Возврат Сч;
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьТекстРедактора(Значение, ОбновлятьГруппу = Истина)
	ЭтаФорма.__Редактор = Значение;  
	
	Если НЕ ОбновлятьГруппу Тогда
		Возврат;
	КонецЕсли;
	ОбновитьТекстВТекущейГруппе(Значение);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстВТекущейГруппе(Значение)
	Если мТекущаяСтрокаГруппы = Неопределено Тогда 
		Возврат;
	КонецЕсли; 
	
	мТекущаяСтрокаГруппы.Текст = Значение;
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьТаблицуГруппСГруппами()  
	Результат = Новый Массив;
	
	Порядок = 1;
	Для Каждого Строка Из __ТаблицаГруппы Цикл
		Если Строка.Порядок = 0 Тогда
			ВертикальнаяГруппа = Парсер().ПолучитьОписаниеВертикальнойГруппы(Неопределено);
		Иначе
			ВертикальнаяГруппа = мТекущаяГруппа.Элементы[Строка.Порядок - 1];
		КонецЕсли;
		
		ВертикальнаяГруппа.Элементы.Очистить();
		
		ВертикальнаяГруппаИзТекста = Парсер().Разобрать(Строка.Текст);
		Для Каждого ТекЭлемент Из ВертикальнаяГруппаИзТекста.Элементы Цикл
			ВертикальнаяГруппа.Элементы.Добавить(ТекЭлемент);
		КонецЦикла;
		
		ВертикальнаяГруппа.НаборСвойств.Заголовок = Строка.Заголовок;
		
		Результат.Добавить(ВертикальнаяГруппа);
		
		Строка.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла;
	
	мТекущаяГруппа.Элементы = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьМодули(ИменаМодулей)
	
	МассивМодулей = СтрРазделить(ИменаМодулей, Символы.ПС);
	Для Каждого Модуль Из МассивМодулей Цикл
		ИнициализироватьМодуль(Модуль);
	КонецЦикла;  
		
	мМодули.Синтаксис.Инициализировать();
	мМодули.УправлениеСвойствами.Инициализировать();
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьМодуль(ИмяМодуля)
	ТекИмя = СтрШаблон("%1.Форма.%2", __ИдентификаторОбработки, ИмяМодуля);
	
	// BSLLS:GetFormMethod-off 
	Результат = ПолучитьФорму(ТекИмя, , ЭтотОбъект);
	// BSLLS:GetFormMethod-on
	мМодули.Вставить(ИмяМодуля, Результат);
	
	Возврат Результат;
КонецФункции


&НаКлиенте
Процедура ЗаполнитьОписанияПоСтрокамДерева(СоответствиеКолонок, ОписаниеЭлемента, Родитель)

	Строки = Родитель.ПолучитьЭлементы();
	
	ИндексСтроки = 0;
	Для Каждого Строка Из Строки Цикл
		ОписаниеСтроки = ЗаполнитьОписанияПоСтроке(СоответствиеКолонок, ОписаниеЭлемента, Строка, ИндексСтроки);
		
		ЗаполнитьОписанияПоСтрокамДерева(СоответствиеКолонок, ОписаниеСтроки, Строка);
		
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Пока ИндексСтроки <= ОписаниеЭлемента.Строки.ВГраница() Цикл
		ОписаниеЭлемента.Строки.Удалить(ОписаниеЭлемента.Строки.ВГраница());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписанияПоСтрокамТаблицы(СоответствиеКолонок, ОписаниеЭлемента, Строки)
	
	ИндексСтроки = 0;
	Для Каждого Строка Из Строки Цикл
		ЗаполнитьОписанияПоСтроке(СоответствиеКолонок, ОписаниеЭлемента, Строка, ИндексСтроки);
		
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Пока ИндексСтроки <= ОписаниеЭлемента.Строки.ВГраница() Цикл
		ОписаниеЭлемента.Строки.Удалить(ОписаниеЭлемента.Строки.ВГраница());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьОписанияПоСтроке(СоответствиеКолонок, ОписаниеЭлемента, Строка, ИндексСтроки)
	Если ИндексСтроки > ОписаниеЭлемента.Строки.ВГраница() Тогда
		ОписаниеСтроки = Парсер().ПолучитьОписаниеСтрокиТаблицы(ОписаниеЭлемента);
	Иначе
		ОписаниеСтроки = ОписаниеЭлемента.Строки[ИндексСтроки];
	КонецЕсли;

	СоответствиеЯчейки = ПолучитьСоответствиеЯчеекПоКолонкам(ОписаниеСтроки.Ячейки);
	
	Для Каждого СоответствиеКолонок_КЗ Из СоответствиеКолонок Цикл
		ИмяРеквизита = СоответствиеКолонок_КЗ.Ключ;
		ОписаниеКолонки = СоответствиеКолонок_КЗ.Значение.ОписаниеЭлемента;
		
		Ячейка = СоответствиеЯчейки.Получить(ОписаниеКолонки.УИД);
		Если Ячейка = Неопределено Тогда
			Ячейка = Парсер().ПолучитьОписаниеЯчейкиТаблицы(ОписаниеСтроки);
			Ячейка.УИДКолонки = ОписаниеКолонки.УИД;
		КонецЕсли;          
		
		Ячейка.Значение = Форматтер().ФорматироватьЗначениеПоля(Строка[ИмяРеквизита], ОписаниеКолонки.ОписаниеТипов);
	КонецЦикла; 
	
	Возврат ОписаниеСтроки;
КонецФункции

&НаКлиенте
Функция ПолучитьСоответствиеЯчеекПоКолонкам(Ячейки)
	ЯчейкиПоКолонкам = Новый Соответствие;
	Для Каждого Ячейка Из Ячейки Цикл
		ЯчейкиПоКолонкам.Вставить(Ячейка.УИДКолонки, Ячейка);
	КонецЦикла;
	Возврат ЯчейкиПоКолонкам;
КонецФункции

&НаКлиенте
Функция ЕстьРеквизитФормы(ИмяРеквизита, ТипРеквизита)
	СтрокиСуществующийРеквизит = __ТаблицаСуществующихРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если СтрокиСуществующийРеквизит.Количество() = 0  Тогда
		Возврат Ложь; ;
	КонецЕсли;
	СтрокаСуществующийРеквизит = СтрокиСуществующийРеквизит[0];

	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПолучитьСоответствиеРеквизитовИменам(ФормаГруппы, Реквизиты, ТипРеквизита, УИДВладельца = Неопределено) Экспорт
	Результат = Новый Соответствие;
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.ТипРеквизита <> ТипРеквизита Тогда
			Продолжить;
		КонецЕсли;  
		
		Если УИДВладельца <> Неопределено И Реквизит.УИДВладельца <> УИДВладельца Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.ПолноеИмяРеквизита = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекОписаниеЭлемента = Парсер().ПолучитьЭлементПоУИД(ФормаГруппы, Реквизит.УИД);
		
		Если ТекОписаниеЭлемента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(Реквизит.ПолноеИмяРеквизита, Новый Структура("ПрежнийУИД, ОписаниеЭлемента", Реквизит.УИД, ТекОписаниеЭлемента));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьБлижайшуюПозициюКурсора(Знач НомерСтроки, Знач НомерКолонки);
	Результат = Новый Структура("НомерСтроки,НомерКолонки,Пустая", НомерСтроки, НомерКолонки, Ложь);
	
	СтрокиРедактора = СтрРазделить(__Редактор, Символы.ПС);
	
	ИндексСтроки = Мин(СтрокиРедактора.ВГраница(), НомерСтроки - 1);
	Если ИндексСтроки < 0 Тогда
		Результат.НомерСтроки = 1;
		Результат.НомерКолонки = 1;
		Результат.Пустая = Истина;		
		Возврат Результат;
	КонецЕсли;
	
	Пока Истина Цикл   
		Если ИндексСтроки > СтрокиРедактора.ВГраница() Тогда
			Результат.НомерСтроки = 1;
			Результат.НомерКолонки = СтрокиРедактора.ВГраница() + 1; 
			Результат.Пустая = Истина;
			Возврат Результат;
		КонецЕсли;
		
		ТекущаяСтрока = СтрокиРедактора[ИндексСтроки];
		Если НЕ ПустаяСтрока(ТекущаяСтрока) Тогда
			Прервать;
		КонецЕсли;	
		
		ИндексСтроки = ИндексСтроки + 1;
		НомерКолонки = 1;  
		Результат.Пустая = Истина;		
		
		Продолжить;
	КонецЦикла;
	
	ДлинаСтроки = СтрДлина(СокрП(ТекущаяСтрока));
	Если НомерКолонки > ДлинаСтроки Тогда
		НомерКолонки = ДлинаСтроки;
	КонецЕсли;
	
	Результат.НомерСтроки = ИндексСтроки + 1;
	Результат.НомерКолонки = НомерКолонки;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПолучитьИерархиюЭлементовПоКоординатам(ИерархияЭлементов, ОписаниеЭлемента, Верх, Лево)
	Интервалы = ОписаниеЭлемента.Координаты.Получить(Верх);
	
	Если Интервалы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Интервал Из Интервалы Цикл
		ВходитВИнтервал = Лево >= Интервал.Лево И Лево <= Интервал.Право;
		Если НЕ ВходитВИнтервал Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеЭлемента.Тип = "Форма" Тогда
			Прервать;
		КонецЕсли;
		
		ИерархияЭлементов.Добавить(ОписаниеЭлемента); 
		Прервать;
	КонецЦикла;
	
	Если НЕ ВходитВИнтервал Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОписаниеЭлемента.Свойство("Элементы") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Подэлемент Из ОписаниеЭлемента.Элементы Цикл
		ПолучитьИерархиюЭлементовПоКоординатам(ИерархияЭлементов, Подэлемент, Верх, Лево);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция Парсер() Экспорт
	Возврат ПолучитьМодуль("Парсер");
КонецФункции

&НаКлиенте
Функция ВыполнитьВнешнийПарсинг(Знач Текст) Экспорт
	Результат = мКонтекстОкнаHTML.parseInput(Текст); 
	
	Если СтрНачинаетсяС(Результат, "Ошибка:") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат;
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Неизвестная ошибка парсинга!";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатСтруктура = СлужебныеФункции().JSONВСтруктуру(Результат);
	Возврат РезультатСтруктура;
КонецФункции

&НаКлиенте
Функция Синтаксис() Экспорт
	Возврат ПолучитьМодуль("Синтаксис");
КонецФункции

&НаКлиенте
Функция Форматтер() Экспорт
	Возврат ПолучитьМодуль("Форматтер");
КонецФункции     

&НаКлиенте
Функция ПостроительСхемФормы() Экспорт
	Возврат ПолучитьМодуль("ПостроительСхемФормы");
КонецФункции     

&НаКлиенте
Функция ГенераторКода() Экспорт
	Возврат ПолучитьМодуль("ГенераторКода");
КонецФункции     

&НаКлиенте
Функция РаботаСИИ() Экспорт
	Возврат ПолучитьМодуль("РаботаСИИ");
КонецФункции  

&НаКлиенте
Функция ПолучитьМодуль(ИмяМодуля)
	ФормаМодуля = Неопределено;
	
	Если НЕ мМодули.Свойство(ИмяМодуля, ФормаМодуля) Тогда
		ФормаМодуля = ИнициализироватьМодуль(ИмяМодуля); 
		мМодули.Вставить(ИмяМодуля, ФормаМодуля);
	КонецЕсли;
	Возврат ФормаМодуля;
КонецФункции

&НаКлиенте
Функция ОпределениеРеквизитов() Экспорт
	Возврат ПолучитьМодуль("ОпределениеРеквизитов");
КонецФункции     

&НаКлиенте
Функция УправлениеСвойствами() Экспорт
	Возврат ПолучитьМодуль("УправлениеСвойствами");
КонецФункции   

&НаКлиенте
Функция Лексема(ИмяПараметра) Экспорт
	Возврат Синтаксис().Лексема(ИмяПараметра);
КонецФункции

&НаКлиенте
Функция СлужебныеФункции() Экспорт
	Возврат ПолучитьМодуль("СлужебныеФункции");
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторОбработки() Экспорт
	Возврат __ИдентификаторОбработки;
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибкеПарсинга(Строка, Столбец, Сообщение, Отказ)
	Отказ = Истина;
	ТекстСообщения = СтрШаблон("%1 [%2, %3]", Сообщение, Строка, Столбец);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();  
	
	Элементы.__Редактор.УстановитьГраницыВыделения(Строка, Столбец, Строка, Столбец + 1);
КонецПроцедуры

&НаКлиенте
Функция ЗначениеВМассиве(Знач Значение)
	Результат = Новый Массив;
	Результат.Добавить(Значение);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Построить(ДанныеГенератора) Экспорт
	ПостроитьНаСервере(ДанныеГенератора);
КонецПроцедуры

&НаСервере
Процедура ПостроитьНаСервере(Знач ДанныеГенератора) Экспорт
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПостроитьНаСервере(
		ЭтотОбъект, 
		Элементы.__ГруппаПросмотр, 
		ДанныеГенератора);
КонецПроцедуры

&НаКлиенте
Процедура ОбернутьВыделенныйТекст(СимволДо, СимволПосле)
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	
	Элементы.__Редактор.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	Элементы.__Редактор.ВыделенныйТекст = СимволДо + Элементы.__Редактор.ВыделенныйТекст + СимволПосле;
	Элементы.__Редактор.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки + СтрДлина(СимволДо), КонецСтроки, КонецКолонки + СтрДлина(СимволДо));
	
	ОбновитьТекстВТекущейГруппе(ЭтотОбъект.__Редактор);
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.__Редактор;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальнуюВерсию()
	АктуальнаяВерсия = ПолучитьАктуальнуюВерсию(); 
	
	Если АктуальнаяВерсия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СравнитьВерсии(АктуальнаяВерсия, __ТекущаяВерсия) Тогда
		Возврат;
	КонецЕсли;
	
	//Элементы.__НоваяВерсия.Видимость = Истина;
	__НоваяВерсия = СтрШаблон("Доступна новая версия: %1", АктуальнаяВерсия);
КонецПроцедуры

&НаКлиенте
Функция СравнитьВерсии(АктуальнаяВерсия, ТекущаяВерсия)
	МассивАктуальнаяВерсия = СтрРазделить(АктуальнаяВерсия, ".");
	МассивТекущаяВерсия = СтрРазделить(ТекущаяВерсия, ".");
	Индекс = 0;
	Пока Индекс <= 2 Цикл
		НомерАктуальная = Число(МассивАктуальнаяВерсия[Индекс]);
		НомерТекущая = Число(МассивТекущаяВерсия[Индекс]);
		Если НомерТекущая > НомерАктуальная Тогда
			Возврат Ложь;
		КонецЕсли;
		Если НомерТекущая < НомерАктуальная Тогда
			Возврат Истина;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ПолучитьАктуальнуюВерсию()
	URL = "repos/crimsongoldteam/md_design/releases";
	
	Попытка
	    Запрос = Новый HTTPЗапрос(URL);
		Соединение = Новый HTTPСоединение("api.github.com", , , , , 30, Новый ЗащищенноеСоединениеOpenSSL);
		Результат = Соединение.Получить(Запрос);     
		
		Если Результат.КодСостояния <> 200 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Тело = Результат.ПолучитьТелоКакСтроку();
		Результат = СлужебныеФункции().JSONВСоответствие(Тело);
		Если Результат.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		Версия = Сред(Результат[0]["tag_name"], 2);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	Возврат Версия;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	//Элементы.__РедакторИИ.Пометка = __ОтображатьЧатИИ;
	//Элементы.__ГруппаИИ.Видимость = __ОтображатьЧатИИ; 
	
	//Элементы.__РедакторИИ.Пометка = __ОтображатьЧатИИ;
	//Элементы.__ГруппаИИ.Видимость = __ОтображатьЧатИИ; 
	Элементы.__ГруппаСправка.Видимость = __ОтображатьСправку;
	Элементы.__ГруппаПросмотр.Видимость = НЕ __ОтображатьСправку;
	Элементы.__ПоказатьСправку.Видимость = НЕ __ОтображатьСправку;
	Элементы.__Заполнить.Видимость = НЕ __ОтображатьСправку;
	Элементы.__ЗаголовокФормы.Видимость = НЕ __ОтображатьСправку;  
	
	Элементы.__ПостроитьФорму.КнопкаПоУмолчанию = НЕ __ОтображатьЧатИИ;
	Элементы.__ОтправитьИИ.КнопкаПоУмолчанию = __ОтображатьЧатИИ;
	УстановитьВидимостьГруппыЛево();
	
	УстановитьВидимостьГруппыЛево();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыЛево()
	КнопкаКГруппе = ЛевоеИмяГруппыККнопке();
	Для каждого Элемент Из Элементы.__ГруппаЛево.ПодчиненныеЭлементы Цикл
		ЭтоАктивнаяГруппа = Элемент.Имя = мТекущаяЛеваяГруппа;
		Элемент.Видимость = ЭтоАктивнаяГруппа;
		Элементы[КнопкаКГруппе[Элемент.Имя]].Пометка = ЭтоАктивнаяГруппа;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЛевоеИмяГруппыККнопке()

	Результат = Новый Соответствие();
	Результат.Вставить("__ГруппаИИ", "__РедакторИИ");
	Результат.Вставить("__ГруппаДеревоФайлов", "__ПоказатьДеревоФайлов");
	Результат.Вставить("__ГруппаДеревоЭлементов", "__ПоказатьДеревоЭлементов");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДеревоФайлов()
	
	_ДеревоФайлов.ПолучитьЭлементы().Очистить();
	
	_ПутьКПапкеСФайлами = СокрЛП(_ПутьКПапкеСФайлами);
	Если ЭтоLinux Тогда
		_ПутьКПапкеСФайлами = СтрЗаменить(_ПутьКПапкеСФайлами,"\","/");
	Иначе	
		_ПутьКПапкеСФайлами = СтрЗаменить(_ПутьКПапкеСФайлами,"/","\");
	КонецЕсли;
	
	ПервыеДваСимвола = Лев(_ПутьКПапкеСФайлами, 2);
	ВтораяЧасть = Сред(_ПутьКПапкеСФайлами, 3);
	Пока СтрНайти(ВтораяЧасть, "\\") > 0 Цикл
		ВтораяЧасть = СтрЗаменить(ВтораяЧасть, "\\", "\");
	КонецЦикла;	 
	Пока СтрНайти(ВтораяЧасть, "//") > 0 Цикл
		ВтораяЧасть = СтрЗаменить(ВтораяЧасть, "//", "/");
	КонецЦикла;	 
	
	_ПутьКПапкеСФайлами = ПервыеДваСимвола + ВтораяЧасть;
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДеревоФайловОбработчикНачатьПоискФайлов", 
		ЭтаФорма, ДополнительныеПараметры);
	НачатьПоискФайлов(ОписаниеОповещения, _ПутьКПапкеСФайлами, СтрШаблон("*.%1", РасширениеФайлаНакидка()), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоФайловОбработчикНачатьПоискФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	СтруктураКартинок = СтруктураКартинокДляДереваФайлов();
	Каталоги = Новый Соответствие;
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов = Новый СписокЗначений;
	БазовыйПуть = УниверсальноеПолноеИмяФайла(ДополнитьСлешВПуть(_ПутьКПапкеСФайлами));
	Для Каждого ТекФайл Из НайденныеФайлы Цикл
		СписокФайлов.Добавить(ТекФайл, ТекФайл.ПолноеИмя);
		Путь = УниверсальноеПолноеИмяФайла(ТекФайл.Путь);
		Поз = СтрНайти(Путь, БазовыйПуть);
		ОтносительныйПуть = Сред(Путь, Поз + СтрДлина(БазовыйПуть));
		Если Прав(ОтносительныйПуть, 1) = "/" Тогда
			ОтносительныйПуть = Лев(ОтносительныйПуть, СтрДлина(ОтносительныйПуть) - 1);
		КонецЕсли;
		
		Если СтрНайти(ОтносительныйПуть, "/") > 0 Тогда
			МассивСтрок = СтрРазделить(ОтносительныйПуть, "/");
			Стр = "";
			Для Каждого Элем Из МассивСтрок Цикл
				Если НЕ ПустаяСтрока(Стр) Тогда
					Стр = Стр + "/";
				КонецЕсли;
				Стр = Стр + Элем; 
				
				Если НЕ ПустаяСтрока(Стр) Тогда
					Каталоги.Вставить(Стр, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОтносительныйПуть) Тогда
			Каталоги.Вставить(ОтносительныйПуть, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элем Из Каталоги Цикл
		СписокКаталогов.Добавить(Элем.Ключ);
	КонецЦикла;
	
	СписокФайлов.СортироватьПоПредставлению();
	СписокКаталогов.СортироватьПоЗначению();
	
	СозданныеКаталоги = Новый Соответствие;
	Для Каждого Элем Из СписокКаталогов Цикл
		МассивСтрок = СтрРазделить(Элем.Значение, "/");
		ЭлРодителя = _ДеревоФайлов;
		ЭтоПапка = Истина;
		ПолныйПуть = _ПутьКПапкеСФайлами;
		Для Каждого СтрКаталога Из МассивСтрок Цикл
			ПолныйПуть = ДополнитьСлешВПуть(ДополнитьСлешВПуть(ПолныйПуть) + СтрКаталога);
			ЭлементДерева = СозданныеКаталоги[ПолныйПуть];
			
			Если ЭлементДерева = Неопределено Тогда
				ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
				СтрокаДереваКаталог = ОснЭлементы.Добавить();
				СтрокаДереваКаталог.Имя = СтрКаталога;
				СтрокаДереваКаталог.ПолныйПуть = ПолныйПуть;
				СтрокаДереваКаталог.Картинка = ?(ЭтоПапка, СтруктураКартинок.Папка, СтруктураКартинок.Файл);
				СтрокаДереваКаталог.ЭтоПапка = ЭтоПапка;
				
				СозданныеКаталоги.Вставить(ПолныйПуть, СтрокаДереваКаталог);
				ЭлРодителя = СтрокаДереваКаталог;
			Иначе
				ЭлРодителя = ЭлементДерева;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Элем Из СписокФайлов Цикл
		
		Файл = Элем.Значение;
		ЭлРодителя = СозданныеКаталоги[Файл.Путь];
		
		Если ЭлРодителя = Неопределено Тогда
			ЭлРодителя = _ДеревоФайлов;
		КонецЕсли;	 
		
		ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
		Нов = ОснЭлементы.Добавить();
		Нов.Имя = Файл.Имя;
		Нов.ПолныйПуть = Файл.ПолноеИмя;
		Нов.Картинка = СтруктураКартинок.Файл;
		Нов.ЭтоПапка = Ложь;

	КонецЦикла;
	
	СозданныеКаталоги.Очистить();
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальноеПолноеИмяФайла(Знач ПолноеИмяФайлаИлиФайл, Знач ВНРегистр = Ложь)
	
	Если ТипЗнч(ПолноеИмяФайлаИлиФайл) = Тип("Файл") Тогда
		УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайлаИлиФайл.ПолноеИмя, "\", "/");
	Иначе
		УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайлаИлиФайл, "\", "/");
	КонецЕсли;

	Если ВНРегистр Тогда
		УниверсальноеПолноеИмя = НРег(УниверсальноеПолноеИмя);
	КонецЕсли;

	Возврат УниверсальноеПолноеИмя;
	
КонецФункции

&НаКлиенте
Функция СтруктураКартинокДляДереваФайлов()
	
	СтруктураКартинок = Новый Структура;
	
	БинДата = Base64Значение("PHN2ZyB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIHZpZXdCb3g9IjAgMCAxNiAxNiIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTEgNEwzIDJIN0w5IDRIMTRDMTQuNTUyMyA0IDE1IDQuNDQ3NzIgMTUgNVYxM0MxNSAxMy41NTIzIDE0LjU1MjMgMTQgMTQgMTRIMkMxLjQ0NzcgMTQgMSAxMy41NTIzIDEgMTNWNFoiIGZpbGw9IiNCQjg3NDQiLz4KPHBhdGggZD0iTTE0IDdIMlYxM0gxNFY3WiIgZmlsbD0iI0Y3REE3RCIvPgo8cGF0aCBkPSJNMTQgNUgyVjZIMTRWNVoiIGZpbGw9IiNGRkUwNjkiLz4KPHBhdGggZD0iTTQgM0wyIDVIOEw2IDNINFoiIGZpbGw9IiNGRkUwNjkiLz4KPC9zdmc+Cg==");
	КартинкаПапки = Новый Картинка(БинДата);
	СтруктураКартинок.Вставить("Папка", КартинкаПапки); 
	
	БинДата = Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABS2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxMzggNzkuMTU5ODI0LCAyMDE2LzA5LzE0LTAxOjA5OjAxICAgICAgICAiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIi8+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgo8P3hwYWNrZXQgZW5kPSJyIj8+IEmuOgAAAGhJREFUOI1jYKAQMDIwMDD4ZNUXMDAw+JOgb+OWaY0T4DyfrPr9/0kAPln1+2F6mSj1AsUGsKALLFy3nUFLRQGrYlM9TcIGxAd5UtcF2GylrwuQwcCEAc1dQLWEtNE3u4EUfRsptRgOALn3R2pxdRrxAAAAAElFTkSuQmCC");
	КартинкаФайла = Новый Картинка(БинДата);
	СтруктураКартинок.Вставить("Файл", КартинкаФайла); 
	
	Возврат СтруктураКартинок;
	
КонецФункции

&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог) Экспорт
	
	Разделитель = "\";
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	Если ЭтоLinux Тогда
		Разделитель = "/";
		Каталог = СтрЗаменить(Каталог, "\", "/");
	КонецЕсли;
		
	Если Прав(Каталог, 1) <> Разделитель Тогда
		Каталог = Каталог + Разделитель;
	КонецЕсли;
	Возврат Каталог;
	
КонецФункции

&НаКлиенте
Функция РасширениеФайлаНакидка()

	Возврат "md";

КонецФункции


#КонецОбласти

#Область ИнициализацияДанных

ЭтоLinux = Ложь;
СистемнаяИнформация = Новый СистемнаяИнформация;

Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
	ЭтоLinux = Истина;
КонецЕсли;

&НаКлиенте
Процедура УстановитьВидимостьГруппыЛево()
	КнопкаКГруппе = ЛевоеИмяГруппыККнопке();
	Для каждого Элемент Из Элементы.__ГруппаЛево.ПодчиненныеЭлементы Цикл
		ЭтоАктивнаяГруппа = Элемент.Имя = мТекущаяЛеваяГруппа;
		Элемент.Видимость = ЭтоАктивнаяГруппа;
		Элементы[КнопкаКГруппе[Элемент.Имя]].Пометка = ЭтоАктивнаяГруппа;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЛевоеИмяГруппыККнопке()

	Результат = Новый Соответствие();
	Результат.Вставить("__ГруппаИИ", "__РедакторИИ");
	Результат.Вставить("__ГруппаДеревоФайлов", "__ПоказатьДеревоФайлов");
	Результат.Вставить("__ГруппаДеревоЭлементов", "__ПоказатьДеревоЭлементов");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДеревоФайлов()
	
	_ДеревоФайлов.ПолучитьЭлементы().Очистить();
	
	_ПутьКПапкеСФайлами = СокрЛП(_ПутьКПапкеСФайлами);
	Если ЭтоLinux Тогда
		_ПутьКПапкеСФайлами = СтрЗаменить(_ПутьКПапкеСФайлами,"\","/");
	Иначе	
		_ПутьКПапкеСФайлами = СтрЗаменить(_ПутьКПапкеСФайлами,"/","\");
	КонецЕсли;
	
	ПервыеДваСимвола = Лев(_ПутьКПапкеСФайлами, 2);
	ВтораяЧасть = Сред(_ПутьКПапкеСФайлами, 3);
	Пока СтрНайти(ВтораяЧасть, "\\") > 0 Цикл
		ВтораяЧасть = СтрЗаменить(ВтораяЧасть, "\\", "\");
	КонецЦикла;	 
	Пока СтрНайти(ВтораяЧасть, "//") > 0 Цикл
		ВтораяЧасть = СтрЗаменить(ВтораяЧасть, "//", "/");
	КонецЦикла;	 
	
	_ПутьКПапкеСФайлами = ПервыеДваСимвола + ВтораяЧасть;
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДеревоФайловОбработчикНачатьПоискФайлов", 
		ЭтаФорма, ДополнительныеПараметры);
	НачатьПоискФайлов(ОписаниеОповещения, _ПутьКПапкеСФайлами, СтрШаблон("*.%1", РасширениеФайлаНакидка()), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоФайловОбработчикНачатьПоискФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	СтруктураКартинок = СтруктураКартинокДляДереваФайлов();
	Каталоги = Новый Соответствие;
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов = Новый СписокЗначений;
	БазовыйПуть = УниверсальноеПолноеИмяФайла(ДополнитьСлешВПуть(_ПутьКПапкеСФайлами));
	Для Каждого ТекФайл Из НайденныеФайлы Цикл
		СписокФайлов.Добавить(ТекФайл, ТекФайл.ПолноеИмя);
		Путь = УниверсальноеПолноеИмяФайла(ТекФайл.Путь);
		Поз = СтрНайти(Путь, БазовыйПуть);
		ОтносительныйПуть = Сред(Путь, Поз + СтрДлина(БазовыйПуть));
		Если Прав(ОтносительныйПуть, 1) = "/" Тогда
			ОтносительныйПуть = Лев(ОтносительныйПуть, СтрДлина(ОтносительныйПуть) - 1);
		КонецЕсли;
		
		Если СтрНайти(ОтносительныйПуть, "/") > 0 Тогда
			МассивСтрок = СтрРазделить(ОтносительныйПуть, "/");
			Стр = "";
			Для Каждого Элем Из МассивСтрок Цикл
				Если НЕ ПустаяСтрока(Стр) Тогда
					Стр = Стр + "/";
				КонецЕсли;
				Стр = Стр + Элем; 
				
				Если НЕ ПустаяСтрока(Стр) Тогда
					Каталоги.Вставить(Стр, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОтносительныйПуть) Тогда
			Каталоги.Вставить(ОтносительныйПуть, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элем Из Каталоги Цикл
		СписокКаталогов.Добавить(Элем.Ключ);
	КонецЦикла;
	
	СписокФайлов.СортироватьПоПредставлению();
	СписокКаталогов.СортироватьПоЗначению();
	
	СозданныеКаталоги = Новый Соответствие;
	Для Каждого Элем Из СписокКаталогов Цикл
		МассивСтрок = СтрРазделить(Элем.Значение, "/");
		ЭлРодителя = _ДеревоФайлов;
		ЭтоПапка = Истина;
		ПолныйПуть = _ПутьКПапкеСФайлами;
		Для Каждого СтрКаталога Из МассивСтрок Цикл
			ПолныйПуть = ДополнитьСлешВПуть(ДополнитьСлешВПуть(ПолныйПуть) + СтрКаталога);
			ЭлементДерева = СозданныеКаталоги[ПолныйПуть];
			
			Если ЭлементДерева = Неопределено Тогда
				ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
				СтрокаДереваКаталог = ОснЭлементы.Добавить();
				СтрокаДереваКаталог.Имя = СтрКаталога;
				СтрокаДереваКаталог.ПолныйПуть = ПолныйПуть;
				СтрокаДереваКаталог.Картинка = ?(ЭтоПапка, СтруктураКартинок.Папка, СтруктураКартинок.Файл);
				СтрокаДереваКаталог.ЭтоПапка = ЭтоПапка;
				
				СозданныеКаталоги.Вставить(ПолныйПуть, СтрокаДереваКаталог);
				ЭлРодителя = СтрокаДереваКаталог;
			Иначе
				ЭлРодителя = ЭлементДерева;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Элем Из СписокФайлов Цикл
		
		Файл = Элем.Значение;
		ЭлРодителя = СозданныеКаталоги[Файл.Путь];
		
		Если ЭлРодителя = Неопределено Тогда
			ЭлРодителя = _ДеревоФайлов;
		КонецЕсли;	 
		
		ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
		Нов = ОснЭлементы.Добавить();
		Нов.Имя = Файл.Имя;
		Нов.ПолныйПуть = Файл.ПолноеИмя;
		Нов.Картинка = СтруктураКартинок.Файл;
		Нов.ЭтоПапка = Ложь;

	КонецЦикла;
	
	СозданныеКаталоги.Очистить();
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальноеПолноеИмяФайла(Знач ПолноеИмяФайлаИлиФайл, Знач ВНРегистр = Ложь)
	
	Если ТипЗнч(ПолноеИмяФайлаИлиФайл) = Тип("Файл") Тогда
		УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайлаИлиФайл.ПолноеИмя, "\", "/");
	Иначе
		УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайлаИлиФайл, "\", "/");
	КонецЕсли;

	Если ВНРегистр Тогда
		УниверсальноеПолноеИмя = НРег(УниверсальноеПолноеИмя);
	КонецЕсли;

	Возврат УниверсальноеПолноеИмя;
	
КонецФункции

&НаКлиенте
Функция СтруктураКартинокДляДереваФайлов()
	
	СтруктураКартинок = Новый Структура;
	
	БинДата = Base64Значение("PHN2ZyB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIHZpZXdCb3g9IjAgMCAxNiAxNiIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTEgNEwzIDJIN0w5IDRIMTRDMTQuNTUyMyA0IDE1IDQuNDQ3NzIgMTUgNVYxM0MxNSAxMy41NTIzIDE0LjU1MjMgMTQgMTQgMTRIMkMxLjQ0NzcgMTQgMSAxMy41NTIzIDEgMTNWNFoiIGZpbGw9IiNCQjg3NDQiLz4KPHBhdGggZD0iTTE0IDdIMlYxM0gxNFY3WiIgZmlsbD0iI0Y3REE3RCIvPgo8cGF0aCBkPSJNMTQgNUgyVjZIMTRWNVoiIGZpbGw9IiNGRkUwNjkiLz4KPHBhdGggZD0iTTQgM0wyIDVIOEw2IDNINFoiIGZpbGw9IiNGRkUwNjkiLz4KPC9zdmc+Cg==");
	КартинкаПапки = Новый Картинка(БинДата);
	СтруктураКартинок.Вставить("Папка", КартинкаПапки); 
	
	БинДата = Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABS2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxMzggNzkuMTU5ODI0LCAyMDE2LzA5LzE0LTAxOjA5OjAxICAgICAgICAiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIi8+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgo8P3hwYWNrZXQgZW5kPSJyIj8+IEmuOgAAAGhJREFUOI1jYKAQMDIwMDD4ZNUXMDAw+JOgb+OWaY0T4DyfrPr9/0kAPln1+2F6mSj1AsUGsKALLFy3nUFLRQGrYlM9TcIGxAd5UtcF2GylrwuQwcCEAc1dQLWEtNE3u4EUfRsptRgOALn3R2pxdRrxAAAAAElFTkSuQmCC");
	КартинкаФайла = Новый Картинка(БинДата);
	СтруктураКартинок.Вставить("Файл", КартинкаФайла); 
	
	Возврат СтруктураКартинок;
	
КонецФункции

&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог) Экспорт
	
	Разделитель = "\";
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	Если ЭтоLinux Тогда
		Разделитель = "/";
		Каталог = СтрЗаменить(Каталог, "\", "/");
	КонецЕсли;
		
	Если Прав(Каталог, 1) <> Разделитель Тогда
		Каталог = Каталог + Разделитель;
	КонецЕсли;
	Возврат Каталог;
	
КонецФункции

&НаКлиенте
Функция РасширениеФайлаНакидка()

	Возврат "md";

КонецФункции


#КонецОбласти

#Область ИнициализацияДанных

ЭтоLinux = Ложь;
СистемнаяИнформация = Новый СистемнаяИнформация;

Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
	ЭтоLinux = Истина;
КонецЕсли;

#КонецОбласти
#КонецОбласти
