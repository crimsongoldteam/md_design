// MIT License

// Copyright (c) 2025 Zherebtsov Nikita <nikita@crimsongold.ru>

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/crimsongoldteam/md_design

#Область ОписаниеПеременных

// Структура, хранящая в себе инициализированные модули формы
&НаКлиенте
Перем мМодули;

// Абстрактное синтаксическое дерево (CST) - результат парсинга текста редактора
&НаКлиенте
Перем мСемантическоеДерево;

// Контекст окна HTML-редактора для взаимодействия с JavaScript API
&НаКлиенте
Перем мКонтекстОкнаРедактораHTML;

// Флаг, определяющий тип операционной системы (Linux/MacOS или Windows)
&НаКлиенте
Перем ЭтоLinux;

// Имя текущего открытого файла без расширения
&НаКлиенте
Перем мТекущееИмяФайла;

// Полный путь к текущему открытому файлу
&НаКлиенте
Перем мПутьКФайлу;

// Флаг для отключения обработчика обновления содержимого редактора
&НаКлиенте
Перем мОтключитьОбработчикОбновленияСодержимогоРедактора;

// Флаг для отключения обработчика обновления текущего элемента редактора
&НаКлиенте
Перем мОтключитьОбработчикОбновленияТекущегоЭлементаРедактора;

// Префикс для генерации имен реквизитов формы
&НаКлиенте
Перем мПрефикс;

// Данные текущего выбранного элемента в редакторе
&НаКлиенте
Перем мДанныеТекущегоЭлемента;

// Идентификатор события изменения содержимого редактора
&НаКлиенте
Перем мСобытиеПриИзмененииСодержимогоРедактора;

// Идентификатор события изменения текущего элемента редактора
&НаКлиенте
Перем мСобытиеПриИзмененииТекущегоЭлементаРедактора;

&НаКлиенте
Перем мАтрибуты;

&НаКлиенте
Перем мТипыПоИменамАтрибутов;

#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
// Получить текст из редактора HTML
//
// Возвращаемое значение:
//  Строка - текст из редактора
//
Функция ПолучитьТекстРедактора() Экспорт
	Возврат АПИ_ПолучитьТекст();
КонецФункции

&НаКлиенте
// Установить текст в редактор HTML
//
// Параметры:
//  Значение - Строка - текст для установки в редактор
//  УстанавливатьМодифицированность - Булево - устанавливать ли модифицированность формы (по умолчанию Истина)
//
Процедура УстановитьТекстРедактора(Знач Значение, УстанавливатьМодифицированность = Истина) Экспорт
	КодСимволаАбзац = 182;
	СимволАбзац = Символ(КодСимволаАбзац);
	Значение = СтрЗаменить(Значение, СимволАбзац, Символы.ПС);
	Если НЕ УстанавливатьМодифицированность Тогда
		мОтключитьОбработчикОбновленияСодержимогоРедактора = Истина;
	КонецЕсли;
	
	АПИ_УстановитьТекст(Значение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСФормы(Форма) Экспорт
	ЗаполнениеСФормы().Заполнить(Форма, мСемантическоеДерево);
	
	ПараметрыПередачи = АПИ_ПолучитьПараметрыПередачиЭлемента(
			мСемантическоеДерево,
			Новый Массив,
			Ложь);
	
	АПИ_СоздатьОбновитьЭлемент(ПараметрыПередачи);
КонецПроцедуры

&НаКлиенте
Функция СоздатьНовуюКолонкуТаблицы() Экспорт
	Возврат АПИ_ПолучитьНовоеЗначение("КолонкаТаблицы");
КонецФункции

&НаКлиенте
Функция ПолучитьНовоеЗначение(Тип) Экспорт
	Возврат АПИ_ПолучитьНовоеЗначение(Тип);
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СведенияОВнешнейОбработке = ОбработкаОбъект.СведенияОВнешнейОбработке();
	
	Версия = СведенияОВнешнейОбработке.Версия;
	ЭтотОбъект.ТекущаяВерсия = Версия;
	
	Элементы.ДекорацияОднострочнаяГруппа.Заголовок = Элементы.ДекорацияОднострочнаяГруппа.Заголовок + Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
	
	ЭтаФорма.ИдентификаторОбработки = ОбработкаОбъект.Метаданные().ПолноеИмя();
	
	Элементы.ПалитраСвойств.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Отбор", Истина));
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)    
	мТипыПоИменамАтрибутов = Новый Структура;
	
	мМодули = Новый Структура;
	
	ИнициализироватьМодули(
		"УправлениеСвойствами
		|ПостроительТекстаМодуля
		|ПостроительСхемФормы
		|СлужебныеФункции
		|БиблиотекаJS");
	
	//СписокВыбора = Элементы.ДеревоРеквизитовОдиночныйТип.СписокВыбора;
	//СписокВыбора.Очистить();
	//УправлениеСвойствами().ЗаполнитьДанныеВыбораТипа(СписокВыбора);
	
	Если НЕ НеПроверятьОбновления Тогда
		Таймаут = 0.1;
		ПодключитьОбработчикОжидания("ПроверитьАктуальнуюВерсию", Таймаут, Истина);
	КонецЕсли;
	
	ЭтотОбъект.ПоказыватьСправку = Истина;
	
	УстановитьВидимостьДоступностьЭлементов();
	
	УправлениеСвойствами().ЗаполнитьВсеСвойстваДляПалитры(ПалитраСвойств);
	
	мОтключитьОбработчикОбновленияСодержимогоРедактора = Ложь;
	мОтключитьОбработчикОбновленияТекущегоЭлементаРедактора = Ложь;
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Элементы.ПолеHTMLРедактора.Документ.location.href = "about:blank";
	ЭтотОбъект.ПолеHTMLРедактора = "";
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ГруппаКнопки

&НаКлиенте
Процедура ПоказатьСкрытьПроект(Команда)
	Если ПоказыватьГруппуЛево = "Проект" Тогда
		ПоказыватьГруппуЛево = "";
	Иначе
		ПоказыватьГруппуЛево = "Проект";
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьЧатИИ(Команда)
	Если ПоказыватьГруппуЛево = "ЧатИИ" Тогда
		ПоказыватьГруппуЛево = "";
	Иначе
		ПоказыватьГруппуЛево = "ЧатИИ";
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПодменюЭкспорт(Команда)
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("ГенераторXML", "Выгрузить в конфигурацию");
	СписокВыбора.Добавить("ГенераторКода", "Программное создание реквизитов");
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПодменюЭкспортЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СписокВыбора, Элементы.ПодменюЭкспорт);
КонецПроцедуры

&НаКлиенте
Процедура ПодменюЭкспортЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ГенераторКода" Тогда
		ОткрытьГенераторКода();
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ГенераторXML" Тогда
		ОткрытьГенераторXML();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	Настройки = Новый Структура;
	
	ПоляНастроек = "НеПроверятьОбновления,ТокенИИ,МодельИИ,ПровайдерИИ";
	МассивНастроек = СтрРазделить(ПоляНастроек, ",");
	Для Каждого ИмяНастройки Из МассивНастроек Цикл
		Настройки.Вставить(ИмяНастройки, ЭтаФорма[ИмяНастройки]);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Настройки", Настройки);
	ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаНастройка", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из РезультатЗакрытия Цикл
		ЭтаФорма[КлючЗначение.Ключ] = КлючЗначение.Значение;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область КоманднаяПанельРедактора

&НаКлиенте
Процедура ПостроитьФорму(Команда)
	ДанныеГенератора = ПолучитьДанныеДляГенерацииФормы(мПрефикс);
	Если ДанныеГенератора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Построить(ДанныеГенератора);
	
	ЗаголовокФормы = ДанныеГенератора.ЗаголовокФормы;
	Если ПустаяСтрока(ЗаголовокФормы) Тогда
		ЗаголовокФормы = "<Без заголовка>";
	КонецЕсли;
	
	ЭтотОбъект.ПоказыватьСправку = Ложь;
	
	УстановитьВидимостьДоступностьЭлементов();
	
	ЭтотОбъект.ЗаголовокФормы = ЗаголовокФормы;
	
	Попытка
		ДеревоЭлементов.ПолучитьЭлементы().Очистить();
		ЗаполнитьДеревоЭлементов(мСемантическоеДерево.Элементы, ДеревоЭлементов.ПолучитьЭлементы());
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Ошибка при построении формы: %1", ОписаниеОшибки());
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьФормуВОтдельномОкне(Команда)
	ДанныеГенератора = ПолучитьДанныеДляГенерацииФормы();
	Если ДанныеГенератора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПросмотр = ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаПросмотр", , ЭтаФорма);
	ФормаПросмотр.Построить(ДанныеГенератора);
КонецПроцедуры

&НаКлиенте
Процедура Форматировать(Команда)
	АПИ_Форматировать();
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.ПолеHTMLРедактора;
	
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинку(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКартинкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаВыбораКартинки", , ЭтаФорма, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АПИ_ВставитьТекстВПозицию("@" + РезультатЗакрытия);
	
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РедакторТаблицы(Команда)
	ДанныеТаблицы = АПИ_ПолучитьТаблицу();
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОписаниеТаблицы", ДанныеТаблицы.Элемент);
	
	ДополнительныеПараметры = Новый Структура("Путь,ЭтоНовый", ДанныеТаблицы.Путь, ДанныеТаблицы.ЭтоНовый);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеТаблицыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаРедактированияТаблицы", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеТаблицыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПередачи = АПИ_ПолучитьПараметрыПередачиЭлемента(
			РезультатЗакрытия,
			ДополнительныеПараметры.Путь,
			ДополнительныеПараметры.ЭтоНовый);
	
	АПИ_СоздатьОбновитьЭлемент(ПараметрыПередачи);
	
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьСФормы(ЭтотОбъект);
	
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ЧатИИ

&НаКлиенте
Процедура ОтправитьИИ(Команда)
	Если ПустаяСтрока(ЗапросИИ) Тогда
		Возврат;
	КонецЕсли;
	
	ОжиданиеОтветаИИ = Истина;
	
	Элементы.ГруппаЗапросИИ.Доступность = НЕ ОжиданиеОтветаИИ;
	
	ПодключитьОбработчикОжидания("ОтправитьИИЗавершение", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИИЗавершение()
	ОжиданиеОтветаИИ = Ложь;
	
	Элементы.ГруппаЗапросИИ.Доступность = НЕ ОжиданиеОтветаИИ;
	
	Контекст = Новый Массив;
	Для Каждого Строка Из ЧатИИ Цикл
		Контекст.Добавить(Новый Структура("ЭтоВходящее,Сообщение", Строка.Входящее, Строка.Сообщение));
	КонецЦикла;
	
	Настройки = РаботаСИИ().ПолучитьНастройки();
	Настройки.ПровайдерИИ = ПровайдерИИ;
	Настройки.МодельИИ = МодельИИ;
	Настройки.ТокенИИ = ТокенИИ;
	
	Ответ = РаботаСИИ().Отправить(ЗапросИИ, Контекст, Настройки);
	
	Если Ответ = Неопределено Тогда
		ВызватьИсключение "Не удалось получить ответ!";
	КонецЕсли;
	
	СтрокаЧата = ЧатИИ.Добавить();
	СтрокаЧата.Сообщение = ЗапросИИ;
	ЗапросИИ = "";
	
	СтрокаЧата = ЧатИИ.Добавить();
	СтрокаЧата.Сообщение = Ответ;
	СтрокаЧата.Входящее = Истина;
	
	Элементы.ЧатИИ.ТекущаяСтрока = СтрокаЧата.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИИ(Команда)
	ЧатИИ.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьИИ(Команда)
	ТекущаяСтрока = Элементы.ЧатИИ.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.Входящее Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Сообщение = Редактор;
КонецПроцедуры

#КонецОбласти

#Область Подвал

&НаКлиенте
Процедура ПоказатьСкрытьПодвал(Команда)
	ПоказыватьПодвал = НЕ ПоказыватьПодвал;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьВсеСвойства(Команда)
	ЭтотОбъект.ПоказыватьВсеСвойства = НЕ ЭтотОбъект.ПоказыватьВсеСвойства;
	ОбновитьОтборПалитрыСвойств();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область Обозреватель

&НаКлиенте
Процедура СохранитьФайл(Команда)
	
	ВыполнитьСохранениеФайла();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура НовыйФайл(Команда)
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		ТаймаутДиалога = 30;
		Ответ = Ждать ВопросАсинх(
				НСтр("ru = 'Файл не сохранен, сохранить?'"),
				Режим,
				ТаймаутДиалога,
				КодВозвратаДиалога.Да,
				"Сохранение файла",
				КодВозвратаДиалога.Отмена);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыполнитьСохранениеФайла();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Ложь;
	УстановитьТекстРедактора("", Ложь);
	УстановитьТекущийФайл(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область Просмотр

&НаКлиенте
Процедура ПоказатьСправку(Команда)
	ЭтотОбъект.ПоказыватьСправку = Истина;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументацию(Команда)
	ПерейтиПоНавигационнойСсылке("https://crimsongoldteam.github.io/md_design");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТелеграмКанал(Команда)
	ПерейтиПоНавигационнойСсылке("https://t.me/overlay1c");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТелеграмЧат(Команда)
	ПерейтиПоНавигационнойСсылке("https://t.me/+dq7AG3MMofU0YWUy");
КонецПроцедуры

#КонецОбласти

#Область ДеревоРеквизитов

&НаКлиенте
Процедура ЗаполнитьТипыРеквизитовИИ(Команда)  
	СоответствиеСтрок = Новый Соответствие;
	
	МассивИменРеквизитов = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоРеквизитов.ВыделенныеСтроки Цикл
		СтрокаДерева = ДеревоРеквизитов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если СтрокаДерева.ЭтоТаблица Тогда
			Продолжить;
		КонецЕсли;
		МассивИменРеквизитов.Добавить(СтрокаДерева.Имя);
		СоответствиеСтрок.Вставить(СтрокаДерева.Имя, СтрокаДерева);
	КонецЦикла;
	
	Если МассивИменРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РаботаСИИ().ПолучитьНастройки();
	Настройки.ПровайдерИИ = ПровайдерИИ;
	Настройки.МодельИИ = МодельИИ;
	Настройки.ТокенИИ = ТокенИИ;  
	
	ЗапросИИ = СтрСоединить(МассивИменРеквизитов, ",");
	
	Ответ = РаботаСИИ().ПолучитьВозможныеТипы(ЗапросИИ, Настройки);
	
	Если Ответ = Неопределено Тогда
		ВызватьИсключение "Не удалось получить ответ!";
	КонецЕсли;
	
	ЗапросыКМетаданным = СлужебныеФункции().JSONВСтруктуру(Ответ);
	
	ПередатьМетаданные();
	
	Результат = АПИ_НайтиВМетаданных(ЗапросыКМетаданным);    
	
	Для Каждого Элемент Из Результат Цикл
		МассивТипов = Новый Массив;
		Если мТипыПоИменамАтрибутов.Свойство(Элемент.Идентификатор) Тогда
			МассивТипов = мТипыПоИменамАтрибутов[Элемент.Идентификатор];
			МассивТипов.Очистить();
		Иначе
			МассивТипов = Новый Массив;
			мТипыПоИменамАтрибутов.Вставить(Элемент.Идентификатор, МассивТипов);
		КонецЕсли;
		
		Индекс = 0;
		Для Каждого ПредставлениеОписанияТипа Из Элемент.ПредставлениеОписаниеТипов Цикл
			ЭтоНовый = Элемент.ОписаниеТипов[Индекс].ЭтоНовый;
			ЭлементТип = Новый Структура("Тип, ЭтоНовый", ПредставлениеОписанияТипа, ЭтоНовый);
			МассивТипов.Добавить(ЭлементТип);
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоРеквизитов.ВыделенныеСтроки Цикл
		СтрокаДереваРеквизитов = ДеревоРеквизитов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если НЕ мТипыПоИменамАтрибутов.Свойство(СтрокаДереваРеквизитов.Имя) Тогда
			Продолжить;
		КонецЕсли;     
		МассивТипов = мТипыПоИменамАтрибутов[СтрокаДереваРеквизитов.Имя];
		
		Если МассивТипов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДереваРеквизитов.ОдиночныйТип = МассивТипов[0].Тип;
		СтрокаДереваРеквизитов.ЭтоНовый = МассивТипов[0].ЭтоНовый;   
		
		ЭлементСД = НайтиВСемантическомДеревеПоИмениРеквизита(СтрокаДереваРеквизитов.Имя);
		Если ЭлементСД = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеТипов = АПИ_ПарсингОписанияТипов(СтрокаДереваРеквизитов.ОдиночныйТип);
		
		ЭлементСД.ОписаниеТипов = ОписаниеТипов;
		
		ПараметрыПередачи = АПИ_ПолучитьПараметрыПередачиЭлемента(
				ЭлементСД,
				ЭлементСД.Путь,
				Ложь);
		АПИ_СоздатьОбновитьЭлемент(ПараметрыПередачи);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомандаЗаглушка(Команда)
	// Ничего не делаем
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НоваяВерсияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке("https://github.com/crimsongoldteam/md_design/releases");
КонецПроцедуры

&НаКлиенте
Процедура РедакторПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ВходящиеПараметры = АПИ_ПолучитьПараметрыСобытия(ДанныеСобытия);
	
	Если ВходящиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВходящиеПараметры.ВидСобытия = мСобытиеПриИзмененииСодержимогоРедактора Тогда
		Если мОтключитьОбработчикОбновленияСодержимогоРедактора Тогда
			мОтключитьОбработчикОбновленияСодержимогоРедактора = Ложь;
			Возврат;
		КонецЕсли;
		
		УстановитьМодфицированность = НЕ мОтключитьОбработчикОбновленияСодержимогоРедактора И Редактор <> ВходящиеПараметры.Текст;
		Редактор = ВходящиеПараметры.Текст;
		
		мСемантическоеДерево = ВходящиеПараметры.СемантическоеДерево;
		мАтрибуты = ВходящиеПараметры.Атрибуты;
		
		Если УстановитьМодфицированность Тогда
			УстановитьМодифицированность();
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("ИзменениеСодержимогоРедактораЗавершение");
		
		Таймаут = 0.1;
		ПодключитьОбработчикОжидания("ИзменениеСодержимогоРедактораЗавершение", Таймаут, Истина);
		
		Возврат;
	КонецЕсли;
	
	Если ВходящиеПараметры.ВидСобытия = мСобытиеПриИзмененииТекущегоЭлементаРедактора Тогда
		Если мОтключитьОбработчикОбновленияТекущегоЭлементаРедактора Тогда
			мОтключитьОбработчикОбновленияТекущегоЭлементаРедактора = Ложь;
			Возврат;
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("ИзменениеПозицииКурсораЗавершение");
		
		мДанныеТекущегоЭлемента = ВходящиеПараметры.Элемент;
		
		Таймаут = 0.1;
		ПодключитьОбработчикОжидания("ИзменениеПозицииКурсораЗавершение", Таймаут, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПозицииКурсораЗавершение()
	ОбновитьОтборПалитрыСвойств();
	
	Если мДанныеТекущегоЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборСвойств = мДанныеТекущегоЭлемента.Элемент.НаборСвойств;
	
	Для Каждого СтрокаТаблица Из ПалитраСвойств Цикл
		ОбработатьСтрокуПалитрыСвойств(СтрокаТаблица, НаборСвойств);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСодержимогоРедактораЗавершение()
	СтрокиДерева = ДеревоРеквизитов.ПолучитьЭлементы();
	СтрокиДерева.Очистить();   
	
	Для Каждого КлючЗначение Из мАтрибуты Цикл
		ОписаниеАтрибута = КлючЗначение.Значение;
		
		СтрокаДерева = СтрокиДерева.Добавить();
		СтрокаДерева.Имя = КлючЗначение.Ключ;
		Если ОписаниеАтрибута.ОписаниеТипов.Типы.Количество() = 1 Тогда
			СтрокаДерева.ОдиночныйТип = АПИ_ФорматироватьОписаниеТипов(ОписаниеАтрибута.ОписаниеТипов);
		КонецЕсли; 
		
		СтрокаДерева.ЭтоТаблица = Ложь;
		
		Если НЕ ОписаниеАтрибута.Свойство("Значения") Тогда
			Продолжить;
		КонецЕсли;
		
		Подэлементы = ОписаниеАтрибута.Значения;
		
		Подстроки = СтрокаДерева.ПолучитьЭлементы();
		СтрокаДерева.ЭтоТаблица = Истина;
		
		Для Каждого Подэлемент Из Подэлементы Цикл   
			ОписаниеАтрибутаПодэлемента = КлючЗначение.Значение;
			
			ПодстрокаДерева = Подстроки.Добавить();
			ПодстрокаДерева.Имя = Подэлемент.Ключ;
			Если ОписаниеАтрибутаПодэлемента.ОписаниеТипов.Типы.Количество() = 1 Тогда
				ПодстрокаДерева.ОдиночныйТип = АПИ_ФорматироватьОписаниеТипов(ОписаниеАтрибутаПодэлемента.ОписаниеТипов);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторДокументСформирован(Элемент)
	КонтекстДокументаHTML = Элемент.Документ;
	
	мКонтекстОкнаРедактораHTML = КонтекстДокументаHTML.parentWindow;
	Если мКонтекстОкнаРедактораHTML = Неопределено Тогда
		мКонтекстОкнаРедактораHTML = КонтекстДокументаHTML.defaultView;
	КонецЕсли;
	
	УстановитьТекстРедактора(Редактор);
	Элементы.ПолеHTMLРедактора.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПримерНажатие(Элемент)
	МассивСтрок = Новый Массив;
	Если НЕ ПустаяСтрока(Редактор) Тогда
		МассивСтрок.Добавить(Редактор);
	КонецЕсли;
	МассивСтрок.Добавить(Элемент.Заголовок);
	
	УстановитьТекстРедактора(СтрСоединить(МассивСтрок, Символы.ПС + Символы.ПС));
КонецПроцедуры

&НаКлиенте
Процедура СтраницыЛевоПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЭтотОбъект.ПоказыватьГруппуЛево = Сред(ТекущаяСтраница.Имя, СтрДлина("Страница") + 1);
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКПапкеСФайламиПриИзменении(Элемент)
	ОбновитьДеревоФайлов();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПутьКПапкеСФайламиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = ПутьКПапкеСФайлами;
	ВыбранныеФайлы = Ждать ДиалогОткрытияФайла.ВыбратьАсинх();
	Если НЕ ВыбранныеФайлы = Неопределено Тогда
		ПутьКПапкеСФайлами = ВыбранныеФайлы[0];
		ОбновитьДеревоФайлов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайла(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьДеревоФайлов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЧатИИ

&НаКлиенте
Процедура ЧатИИВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.ЧатИИ.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.Входящее Тогда
		Возврат;
	КонецЕсли;
	
	Текст = ТекущаяСтрока.Сообщение;
	УстановитьТекстРедактора(Текст);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРеквизитов

&НаКлиенте
Процедура ДеревоРеквизитовОписаниеТиповПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева = НайтиВСемантическомДеревеПоИмениРеквизита(ТекущаяСтрока.Имя);
	Если ЭлементДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева.ОписаниеТипов = СлужебныеФункции().СоздатьОписаниеТипов();
	
	Для Каждого ЭлементТипы Из ТекущаяСтрока.СписокТипов Цикл
		ЭлементДерева.ОписаниеТипов.Типы.Добавить(ЭлементТипы.Значение);
	КонецЦикла;
	
	ПараметрыПередачи = АПИ_ПолучитьПараметрыПередачиЭлемента(
			ЭлементДерева,
			ЭлементДерева.Путь,
			Ложь);
	АПИ_СоздатьОбновитьЭлемент(ПараметрыПередачи);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовОписаниеТиповОткрытиеМножественногоЗначения(Элемент, Идентификатор, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовОдиночныйТипПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева = НайтиВСемантическомДеревеПоИмениРеквизита(ТекущаяСтрока.Имя);
	Если ЭлементДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипов = АПИ_ПарсингОписанияТипов(ТекущаяСтрока.ОдиночныйТип);
	
	ЭлементДерева.ОписаниеТипов = ОписаниеТипов;
	
	ПараметрыПередачи = АПИ_ПолучитьПараметрыПередачиЭлемента(
			ЭлементДерева,
			ЭлементДерева.Путь,
			Ложь);
	АПИ_СоздатьОбновитьЭлемент(ПараметрыПередачи);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовОдиночныйТипАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ мТипыПоИменамАтрибутов.Свойство(ТекущаяСтрока.Имя) Тогда
		Возврат;
	КонецЕсли;
		
	МассивТипов = мТипыПоИменамАтрибутов[ТекущаяСтрока.Имя];

	ДанныеВыбора = Новый СписокЗначений;    
	Для Каждого ЭлементТип Из МассивТипов Цикл
		ПредставлениеСтроки = ?(ЭлементТип.ЭтоНовый, "(Новый) ","") + ЭлементТип.Тип;
		ДанныеВыбора.Добавить(ЭлементТип.Тип, ПредставлениеСтроки);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПалитраСвойств

&НаКлиенте
Процедура ПалитраСвойствПриАктивизацииСтроки(Элемент)
	Если мДанныеТекущегоЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АктивныйЭлемент = мДанныеТекущегоЭлемента.Элемент;
	
	ТекущаяСтрока = Элементы.ПалитраСвойств.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Категория = "СписокЗначений" Тогда
		ТекущаяСтрока.ЗначениеСписокЗначений.ТипЗначения = Новый ОписаниеТипов("Строка");
		Возврат;
	КонецЕсли;
	
	Элементы.ПалитраСвойствЗначениеСтрока.КнопкаВыпадающегоСписка = Неопределено;
	Если ТекущаяСтрока.ИмяПоля = "Тип" Тогда
		Элементы.ПалитраСвойствЗначениеСтрока.КнопкаВыпадающегоСписка = Истина;
		Возврат;
	КонецЕсли;
	
	СписокСвойств = УправлениеСвойствами().ПолучитьСписокСвойствПоТипу(
			АктивныйЭлемент.ТипЭлемента,
			АктивныйЭлемент.ВидЭлемента,
			ТекущаяСтрока.ИмяПоля);
	
	Элементы.ПалитраСвойствЗначениеСписок.СписокВыбора.Очистить();
	Для Каждого КлючЗначение Из СписокСвойств Цикл
		Элементы.ПалитраСвойствЗначениеСписок.СписокВыбора.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если мДанныеТекущегоЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборСвойств = мДанныеТекущегоЭлемента.Элемент.НаборСвойств;
	
	Если НЕ НаборСвойств.Свойство("Заголовок") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ПалитраСвойств.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.ИмяПоля <> "Тип" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеСписокПриИзменении(Элемент)
	ИзменитьЗначениеСвойстваПалитры();
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеБулевоПриИзменении(Элемент)
	ИзменитьЗначениеСвойстваПалитры();
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеЧислоПриИзменении(Элемент)
	ИзменитьЗначениеСвойстваПалитры();
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеСтрокаПриИзменении(Элемент)
	ИзменитьЗначениеСвойстваПалитры();
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеСписокЗначенийПриИзменении(Элемент)
	ИзменитьЗначениеСвойстваПалитры();
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.ПалитраСвойств.ТекущиеДанные;
	
	Если ТекущаяСтрока.Категория = "Булево" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока.ЗначениеБулево = НЕ ТекущаяСтрока.ЗначениеБулево;
		ИзменитьЗначениеСвойстваПалитры();
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Категория = "Цвет" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбораЦвета();
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПалитраСвойствЗначениеЦветНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуВыбораЦвета();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДеревоФайлов

&НаКлиенте
Асинх Процедура ДеревоФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = ДеревоФайлов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущаяСтрока.ЭтоПапка Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Ждать ВопросАсинх(НСтр("ru = 'Файл не сохранен, сохранить?'"), Режим, , КодВозвратаДиалога.Да, "Сохранение файла");
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыполнитьСохранениеФайла();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	УстановитьТекущийФайл(ТекущаяСтрока.ПолныйПуть);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Ждать ТекстовыйДокумент.ПрочитатьАсинх(мПутьКФайлу, "UTF-8");
	УстановитьТекстРедактора(ТекстовыйДокумент.ПолучитьТекст(), Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Модули

&НаКлиенте
Функция ПостроительСхемФормы() Экспорт
	Возврат ПолучитьМодуль("ПостроительСхемФормы");
КонецФункции

&НаКлиенте
Функция ПостроительТекстаМодуля() Экспорт
	Возврат ПолучитьМодуль("ПостроительТекстаМодуля");
КонецФункции

&НаКлиенте
Функция ГенераторКода() Экспорт
	Возврат ПолучитьМодуль("ГенераторКода");
КонецФункции

&НаКлиенте
Функция РаботаСИИ() Экспорт
	Возврат ПолучитьМодуль("РаботаСИИ");
КонецФункции

&НаКлиенте
Функция ПолучитьМодуль(ИмяМодуля)
	ФормаМодуля = Неопределено;
	
	Если НЕ мМодули.Свойство(ИмяМодуля, ФормаМодуля) Тогда
		ФормаМодуля = ИнициализироватьМодуль(ИмяМодуля);
		мМодули.Вставить(ИмяМодуля, ФормаМодуля);
	КонецЕсли;
	Возврат ФормаМодуля;
КонецФункции

&НаКлиенте
Функция УправлениеСвойствами() Экспорт
	Возврат ПолучитьМодуль("УправлениеСвойствами");
КонецФункции

&НаКлиенте
Функция СлужебныеФункции() Экспорт
	Возврат ПолучитьМодуль("СлужебныеФункции");
КонецФункции

&НаКлиенте
Функция ЗаполнениеСФормы()
	Возврат ПолучитьМодуль("ЗаполнениеСФормы");
КонецФункции

&НаКлиенте
Процедура ИнициализироватьМодули(ИменаМодулей)
	
	МассивМодулей = СтрРазделить(ИменаМодулей, Символы.ПС);
	Для Каждого Модуль Из МассивМодулей Цикл
		ИнициализироватьМодуль(Модуль);
	КонецЦикла;
	
	мМодули.УправлениеСвойствами.Инициализировать();
	мМодули.БиблиотекаJS.Инициализировать(ЭтотОбъект, "ПолеHTMLРедактора", ТекущаяВерсия);
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьМодуль(ИмяМодуля)
	ТекИмя = СтрШаблон("%1.Форма.%2", ИдентификаторОбработки, ИмяМодуля);
	
	// BSLLS:GetFormMethod-off
	Результат = ПолучитьФорму(ТекИмя, , ЭтотОбъект);
	// BSLLS:GetFormMethod-on
	мМодули.Вставить(ИмяМодуля, Результат);
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ПалитраСвойств

&НаКлиенте
Процедура ОбновитьОтборПалитрыСвойств()
	Для Каждого СтрокаТаблица Из ПалитраСвойств Цикл
		СтрокаТаблица.Отбор =
			мДанныеТекущегоЭлемента <> Неопределено И
			(мДанныеТекущегоЭлемента.Элемент.ТипЭлемента = СтрокаТаблица.ТипЭлемента) И
			(мДанныеТекущегоЭлемента.Элемент.ВидЭлемента = СтрокаТаблица.ВидЭлемента) И
			(ЭтотОбъект.ПоказыватьВсеСвойства ИЛИ СтрокаТаблица.Основное);
	КонецЦикла;
	
	Элементы.ПалитраСвойств.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Отбор", Истина));
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуПалитрыСвойств(СтрокаТаблица, НаборСвойств)
	Если НЕ СтрокаТаблица.Отбор Тогда
		Возврат;
	КонецЕсли;
	
	ПрефиксЗначения = "Значение" + СтрокаТаблица.Категория;
	
	Если СтрокаТаблица.ИмяПоля = "Имя" Тогда
		Если НаборСвойств.Свойство(СтрокаТаблица.ИмяПоля) Тогда
			СтрокаТаблица[ПрефиксЗначения] = НаборСвойств[СтрокаТаблица.ИмяПоля];
			СтрокаТаблица.Изменено = Истина;
		Иначе
			СтрокаТаблица[ПрефиксЗначения] = мДанныеТекущегоЭлемента.Элемент.УИД;
			СтрокаТаблица.Изменено = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблица.ИмяПоля = "Путь" Тогда
		Если НаборСвойств.Свойство(СтрокаТаблица.ИмяПоля) Тогда
			СтрокаТаблица[ПрефиксЗначения] = НаборСвойств[СтрокаТаблица.ИмяПоля];
			СтрокаТаблица.Изменено = Истина;
		Иначе
			СтрокаТаблица[ПрефиксЗначения] = мДанныеТекущегоЭлемента.Элемент.УИДАтрибута;
			СтрокаТаблица.Изменено = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НаборСвойств.Свойство(СтрокаТаблица.ИмяПоля) Тогда
		Если СтрокаТаблица.Категория = "Цвет" Тогда
			СтрокаТаблица[ПрефиксЗначения] = WebЦвета[НаборСвойств[СтрокаТаблица.ИмяПоля]];
		ИначеЕсли СтрокаТаблица.Категория = "СписокЗначений" Тогда  
			Если СлужебныеФункции().ЭтоМассив(НаборСвойств[СтрокаТаблица.ИмяПоля]) Тогда
				СтрокаТаблица[ПрефиксЗначения].ЗагрузитьЗначения(НаборСвойств[СтрокаТаблица.ИмяПоля]);
			Иначе
				СтрокаТаблица[ПрефиксЗначения].Добавить(НаборСвойств[СтрокаТаблица.ИмяПоля]);
			КонецЕсли;
		Иначе
			СтрокаТаблица[ПрефиксЗначения] = НаборСвойств[СтрокаТаблица.ИмяПоля];
		КонецЕсли;
		
		СтрокаТаблица.Изменено = Истина;
		Возврат;
	КонецЕсли;
	СтрокаТаблица[ПрефиксЗначения] = СтрокаТаблица.ЗначениеПоУмолчанию;
	СтрокаТаблица.Изменено = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбозревательФайлов

&НаКлиенте
Асинх Процедура ВыполнитьСохранениеФайла()
	
	Если НЕ ПустаяСтрока(мПутьКФайлу) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(Редактор);
		ТекстовыйДокумент.НачатьЗапись( , мПутьКФайлу, "UTF-8");
	Иначе
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогСохраненияФайла.Фильтр = "Файл Накидки (*.txt)|*.txt";
		ДиалогСохраненияФайла.Расширение = РасширениеФайлаНакидка();
		ВыбранныеФайлы = Ждать ДиалогСохраненияФайла.ВыбратьАсинх();
		Если НЕ ВыбранныеФайлы = Неопределено Тогда
			ПослеЗаписиФайла = Новый ОписаниеОповещения("ПослеЗаписиФайла", ЭтотОбъект);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(Редактор);
			ТекстовыйДокумент.НачатьЗапись(ПослеЗаписиФайла, ВыбранныеФайлы[0], "UTF-8");
			УстановитьТекущийФайл(ВыбранныеФайлы[0]);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ЭтотОбъект.Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоРеквизитов

&НаКлиенте
Процедура ПередатьМетаданные()        
	Результат = Новый Массив;
	ДеревоКонфигурации = УправлениеСвойствами().ПолучитьМетаданныеПоРазделам();
	Для Каждого КЗРаздел Из ДеревоКонфигурации Цикл  
		ОписаниеРаздела = УправлениеСвойствами().ПолучитьРазделМетаданныхПоИмени(КЗРаздел.Ключ);
		Если НЕ ОписаниеРаздела.ДоступенКакВыбираемаяСсылка Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементМетаданных Из КЗРаздел.Значение Цикл 
			Если ЭлементМетаданных.ЭтоПрисоединенныеФайлы ИЛИ ЭлементМетаданных.ЭтоНедействительный Тогда
				Продолжить;
			КонецЕсли; 
			
			ОписаниеМетаданных = АПИ_ПолучитьПараметрыПередачиМетаданных();
			ОписаниеМетаданных.Раздел = КЗРаздел.Ключ;
			ОписаниеМетаданных.Имя = ЭлементМетаданных.Имя;
			ОписаниеМетаданных.Синоним = ЭлементМетаданных.Синоним;
			
			
			Результат.Добавить(ОписаниеМетаданных);
		КонецЦикла;
	КонецЦикла;    
	
	АПИ_ДобавитьМетаданные(Результат);
КонецПроцедуры

&НаКлиенте
Функция РазделитьСтрокуПаскаль(Знач ИсходнаяСтрока)
	ПозРазделитель = СтрНайти(ИсходнаяСтрока, "_");
	Если ПозРазделитель <> 0 Тогда
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозРазделитель + 1);
	КонецЕсли;
    
    Результат = "";
    ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	
	ПрошлыйСимволВРег = Ложь;
    Для НомерСимвола = 1 По ДлинаСтроки Цикл
        ТекущийСимвол = Сред(ИсходнаяСтрока, НомерСимвола, 1);  
		
		СледующийСимволВРег = Истина;
		Если НомерСимвола < ДлинаСтроки Тогда
			СледующийСимвол = Сред(ИсходнаяСтрока, НомерСимвола + 1, 1);
			СледующийСимволВРег = ВРег(СледующийСимвол) = СледующийСимвол;
		КонецЕсли;
		
		ТекущийСимволВРег = ВРег(ТекущийСимвол) = ТекущийСимвол;
        Если ТекущийСимволВРег И (НЕ ПрошлыйСимволВРег ИЛИ НЕ СледующийСимволВРег) И НомерСимвола > 1 Тогда
            Результат = Результат + " ";
        КонецЕсли;
        
        Результат = Результат + ТекущийСимвол;   
		ПрошлыйСимволВРег = ТекущийСимволВРег;
    КонецЦикла;
    Возврат НРег(Результат);
    
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОткрытьГенераторКода()
	УправлениеСвойствами().ЗаполнитьНеизвестныеСвойства(мСемантическоеДерево);
	
	ПараметрыВыполнения = ПостроительСхемФормы().СоздатьПараметрыВыполнения();
	ПараметрыВыполнения.ПреобразоватьВРеквизитыФормы = Истина;
	ДанныеГенератора = ПостроительСхемФормы().Получить(мСемантическоеДерево, ПараметрыВыполнения);
	
	ФормаПросмотр = ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаКода", , ЭтаФорма);
	
	ФормаПросмотр.Результат = ГенераторКода().Получить(ДанныеГенератора);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГенераторXML()
	УправлениеСвойствами().ЗаполнитьНеизвестныеСвойства(мСемантическоеДерево);
	
	ПараметрыВыполнения = ПостроительСхемФормы().СоздатьПараметрыВыполнения();
	//ПараметрыВыполнения.ДеревоМетаданных = ПолучитьДеревоКонфигурацииНаСервере();
	
	ДанныеГенератора = ПостроительСхемФормы().Получить(мСемантическоеДерево, ПараметрыВыполнения);
	
	СхемыФормы = Новый Структура("СхемаЭлементы, СхемаРеквизиты, СхемаМетаданные",
			ДанныеГенератора.Элементы[0],
			ДанныеГенератора.Реквизиты,
			ДанныеГенератора.Метаданные);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("СхемыФормы", СхемыФормы);
	
	СлужебныеФункции().СтруктураВJSON(ПараметрыОткрытия);
	
	ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаГенераторXML", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеСвойстваПалитры()
	Если мДанныеТекущегоЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ПалитраСвойств.ТекущиеДанные;
	
	ТекущееЗначение = ТекущаяСтрока["Значение" + ТекущаяСтрока.Категория];
	
	НаборСвойств = мДанныеТекущегоЭлемента.Элемент.НаборСвойств;
	
	Если ТекущееЗначение <> ТекущаяСтрока.ЗначениеПоУмолчанию Тогда
		ТекущаяСтрока.Изменено = Истина;
		
		Если ТекущаяСтрока.Категория = "Цвет" Тогда
			НаборСвойств.Вставить(ТекущаяСтрока.ИмяПоля, ТекущаяСтрока.ЗначениеСтрока);
		Иначе
			НаборСвойств.Вставить(ТекущаяСтрока.ИмяПоля, ТекущееЗначение);
		КонецЕсли;
		
	Иначе
		ТекущаяСтрока.Изменено = Ложь;
		НаборСвойств.Удалить(ТекущаяСтрока.ИмяПоля);
	КонецЕсли;
	
	мОтключитьОбработчикОбновленияТекущегоЭлементаРедактора = Истина;
	
	УстановитьСвойства();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойства()
	АПИ_СоздатьОбновитьЭлемент(мДанныеТекущегоЭлемента);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеДляГенерацииФормы(Префикс = "")
	УправлениеСвойствами().ЗаполнитьНеизвестныеСвойства(мСемантическоеДерево);
	
	ПараметрыВыполнения = ПостроительСхемФормы().СоздатьПараметрыВыполнения();
	ПараметрыВыполнения.ПреобразоватьВРеквизитыФормы = Истина;
	ПараметрыВыполнения.Префикс = Префикс;
	ДанныеГенератора = ПостроительСхемФормы().Получить(мСемантическоеДерево, ПараметрыВыполнения);
	Возврат ДанныеГенератора;
КонецФункции

&НаКлиенте
Процедура ДобавитьВставитьЭлемент(ПараметрыДобавления, НовыйЭлемент)
	РодительЭлементы = ПараметрыДобавления.Родитель.Элементы;
	
	Если ЗначениеЗаполнено(ПараметрыДобавления.Перед) Тогда
		ИндексЭлемента = РодительЭлементы.Найти(ПараметрыДобавления.Перед);
		РодительЭлементы.Вставить(ИндексЭлемента, НовыйЭлемент);
		Возврат;
	КонецЕсли;
	
	РодительЭлементы.Добавить(НовыйЭлемент);
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьВнешнийПарсинг(Знач Текст) Экспорт
	Результат = мКонтекстОкнаРедактораHTML.parseInputInner(Текст);
	
	Если СтрНачинаетсяС(Результат, "Ошибка:") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат;
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Неизвестная ошибка парсинга!";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатСтруктура = СлужебныеФункции().JSONВСтруктуру(Результат);
	Возврат РезультатСтруктура;
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторОбработки() Экспорт
	Возврат ИдентификаторОбработки;
КонецФункции

&НаКлиенте
Функция ЗначениеВМассиве(Знач Значение)
	Результат = Новый Массив;
	Результат.Добавить(Значение);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Построить(ДанныеГенератора) Экспорт
	ПостроитьНаСервере(ДанныеГенератора);
КонецПроцедуры

&НаСервере
Процедура ПостроитьНаСервере(Знач ДанныеГенератора) Экспорт
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПостроитьНаСервере(
		ЭтотОбъект,
		Элементы.ГруппаПросмотр,
		ДанныеГенератора);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальнуюВерсию()
	АктуальнаяВерсия = ПолучитьАктуальнуюВерсию();
	
	Если АктуальнаяВерсия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СравнитьВерсии(АктуальнаяВерсия, ТекущаяВерсия) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.НоваяВерсия = СтрШаблон("Доступна новая версия: %1", АктуальнаяВерсия);
КонецПроцедуры

&НаКлиенте
Функция СравнитьВерсии(АктуальнаяВерсия, ТекущаяВерсия)
	МассивАктуальнаяВерсия = СтрРазделить(АктуальнаяВерсия, ".");
	МассивТекущаяВерсия = СтрРазделить(ТекущаяВерсия, ".");
	Индекс = 0;
	Пока Индекс <= 2 Цикл
		НомерАктуальная = Число(МассивАктуальнаяВерсия[Индекс]);
		НомерТекущая = Число(МассивТекущаяВерсия[Индекс]);
		Если НомерТекущая > НомерАктуальная Тогда
			Возврат Ложь;
		КонецЕсли;
		Если НомерТекущая < НомерАктуальная Тогда
			Возврат Истина;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ПолучитьАктуальнуюВерсию()
	URL = "repos/crimsongoldteam/md_design/releases";
	
	Попытка
		Запрос = Новый HTTPЗапрос(URL);
		Таймаут = 30;
		КодВозвратаУспех = 200;
		Соединение = Новый HTTPСоединение("api.github.com", , , , , Таймаут, Новый ЗащищенноеСоединениеOpenSSL);
		Результат = Соединение.Получить(Запрос);
		
		Если Результат.КодСостояния <> КодВозвратаУспех Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Тело = Результат.ПолучитьТелоКакСтроку();
		Результат = СлужебныеФункции().JSONВСоответствие(Тело);
		Если Результат.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Версия = Сред(Результат[0]["tag_name"], 2);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Версия;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	УстановитьВидимостьДоступностьПодвала();
	УстановитьВидимостьГруппыЛево();
	
	Элементы.ГруппаСправка.Видимость = ПоказыватьСправку;
	Элементы.ГруппаПросмотр.Видимость = НЕ ПоказыватьСправку;
	Элементы.ПоказатьСправку.Видимость = НЕ ПоказыватьСправку;
	Элементы.Заполнить.Видимость = НЕ ПоказыватьСправку;
	Элементы.ЗаголовокФормы.Видимость = НЕ ПоказыватьСправку;
	
	Элементы.ПоказатьСкрытьВсеСвойства.Пометка = ПоказыватьВсеСвойства;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьПодвала()
	Элементы.ПоказатьСкрытьПодвал.Пометка = ПоказыватьПодвал;
	Элементы.ПалитраСвойств.Видимость = ПоказыватьПодвал;
	Элементы.ПоказатьСкрытьВсеСвойства.Видимость = ПоказыватьПодвал;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыЛево()
	ЭтоСтраницаЧатИИ = ПоказыватьГруппуЛево = "ЧатИИ";
	ЭтоСтраницаПроект = ПоказыватьГруппуЛево = "Проект";
	
	Элементы.ПоказатьСкрытьПроект.Пометка = ЭтоСтраницаПроект;
	Элементы.ПоказатьСкрытьЧатИИ.Пометка = ЭтоСтраницаЧатИИ;
	
	Элементы.ГруппаЛево.Видимость = ПоказыватьГруппуЛево <> "";
	
	Если ПоказыватьГруппуЛево <> "" Тогда
		Элементы.СтраницыЛево.ТекущаяСтраница = Элементы["Страница" + ПоказыватьГруппуЛево];
	КонецЕсли;
	
	Элементы.ПостроитьФорму.КнопкаПоУмолчанию = НЕ ЭтоСтраницаЧатИИ;
	Элементы.ОтправитьИИ.КнопкаПоУмолчанию = ЭтоСтраницаЧатИИ;
КонецПроцедуры

&НаКлиенте
Функция ЛевоеИмяГруппыККнопке()
	
	Результат = Новый Соответствие();
	Результат.Вставить("ГруппаИИ", "РедакторИИ");
	Результат.Вставить("ГруппаДеревоФайлов", "ПоказатьДеревоФайлов");
	Результат.Вставить("ГруппаДеревоЭлементов", "ПоказатьДеревоЭлементов");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДеревоФайлов()
	
	ДеревоФайлов.ПолучитьЭлементы().Очистить();
	
	ПутьКПапкеСФайлами = СлужебныеФункции().ПреобразоватьПуть(ПутьКПапкеСФайлами, ЭтоLinux);
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДеревоФайловОбработчикНачатьПоискФайлов",
			ЭтаФорма, ДополнительныеПараметры);
	НачатьПоискФайлов(ОписаниеОповещения, ПутьКПапкеСФайлами, СтрШаблон("*.%1", РасширениеФайлаНакидка()), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоФайловОбработчикНачатьПоискФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	СтруктураКартинок = СтруктураКартинокДляДереваФайлов();
	БазовыйПуть = УниверсальноеПолноеИмяФайла(ДополнитьСлешВПуть(ПутьКПапкеСФайлами));
	
	СписокФайлов = ПодготовитьСписокФайлов(НайденныеФайлы);
	Каталоги = СобратьКаталоги(НайденныеФайлы, БазовыйПуть);
	СписокКаталогов = СоздатьСписокКаталогов(Каталоги);
	
	СписокФайлов.СортироватьПоПредставлению();
	СписокКаталогов.СортироватьПоЗначению();
	
	СозданныеКаталоги = СоздатьДеревоКаталогов(СписокКаталогов, СтруктураКартинок);
	ДобавитьФайлыВДерево(СписокФайлов, СозданныеКаталоги, СтруктураКартинок);
	
	СозданныеКаталоги.Очистить();
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСписокФайлов(НайденныеФайлы)
	СписокФайлов = Новый СписокЗначений;
	Для Каждого ТекФайл Из НайденныеФайлы Цикл
		СписокФайлов.Добавить(ТекФайл, ТекФайл.ПолноеИмя);
	КонецЦикла;
	Возврат СписокФайлов;
КонецФункции

&НаКлиенте
Функция СобратьКаталоги(НайденныеФайлы, БазовыйПуть)
	Каталоги = Новый Соответствие;
	Для Каждого ТекФайл Из НайденныеФайлы Цикл
		ОтносительныйПуть = ПолучитьОтносительныйПуть(ТекФайл, БазовыйПуть);
		ДобавитьКаталогиВСтруктуру(Каталоги, ОтносительныйПуть);
	КонецЦикла;
	Возврат Каталоги;
КонецФункции

&НаКлиенте
Функция ПолучитьОтносительныйПуть(ТекФайл, БазовыйПуть)
	Путь = УниверсальноеПолноеИмяФайла(ТекФайл.Путь);
	Поз = СтрНайти(Путь, БазовыйПуть);
	ОтносительныйПуть = Сред(Путь, Поз + СтрДлина(БазовыйПуть));
	Если Прав(ОтносительныйПуть, 1) = "/" Тогда
		ОтносительныйПуть = Лев(ОтносительныйПуть, СтрДлина(ОтносительныйПуть) - 1);
	КонецЕсли;
	Возврат ОтносительныйПуть;
КонецФункции

&НаКлиенте
Процедура ДобавитьКаталогиВСтруктуру(Каталоги, ОтносительныйПуть)
	Если СтрНайти(ОтносительныйПуть, "/") > 0 Тогда
		МассивСтрок = СтрРазделить(ОтносительныйПуть, "/");
		Стр = "";
		Для Каждого Элем Из МассивСтрок Цикл
			Если НЕ ПустаяСтрока(Стр) Тогда
				Стр = Стр + "/";
			КонецЕсли;
			Стр = Стр + Элем;
			
			Если НЕ ПустаяСтрока(Стр) Тогда
				Каталоги.Вставить(Стр, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОтносительныйПуть) Тогда
		Каталоги.Вставить(ОтносительныйПуть, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СоздатьСписокКаталогов(Каталоги)
	СписокКаталогов = Новый СписокЗначений;
	Для Каждого Элем Из Каталоги Цикл
		СписокКаталогов.Добавить(Элем.Ключ);
	КонецЦикла;
	Возврат СписокКаталогов;
КонецФункции

&НаКлиенте
Функция СоздатьДеревоКаталогов(СписокКаталогов, СтруктураКартинок)
	СозданныеКаталоги = Новый Соответствие;
	Для Каждого Элем Из СписокКаталогов Цикл
		СоздатьКаталогВДереве(Элем.Значение, СозданныеКаталоги, СтруктураКартинок);
	КонецЦикла;
	Возврат СозданныеКаталоги;
КонецФункции

&НаКлиенте
Процедура СоздатьКаталогВДереве(ПутьКаталога, СозданныеКаталоги, СтруктураКартинок)
	МассивСтрок = СтрРазделить(ПутьКаталога, "/");
	ЭлРодителя = ДеревоФайлов;
	ЭтоПапка = Истина;
	ПолныйПуть = ПутьКПапкеСФайлами;
	Для Каждого СтрКаталога Из МассивСтрок Цикл
		ПолныйПуть = ДополнитьСлешВПуть(ДополнитьСлешВПуть(ПолныйПуть) + СтрКаталога);
		ЭлементДерева = СозданныеКаталоги[ПолныйПуть];
		
		Если ЭлементДерева = Неопределено Тогда
			СоздатьНовыйЭлементДерева(СтрКаталога, ПолныйПуть, ЭтоПапка, СтруктураКартинок, ЭлРодителя, СозданныеКаталоги);
		Иначе
			ЭлРодителя = ЭлементДерева;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЭлементДерева(ИмяКаталога, ПолныйПуть, ЭтоПапка, СтруктураКартинок, ЭлРодителя, СозданныеКаталоги)
	ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
	СтрокаДереваКаталог = ОснЭлементы.Добавить();
	СтрокаДереваКаталог.Имя = ИмяКаталога;
	СтрокаДереваКаталог.ПолныйПуть = ПолныйПуть;
	СтрокаДереваКаталог.Картинка = ?(ЭтоПапка, СтруктураКартинок.Папка, СтруктураКартинок.Файл);
	СтрокаДереваКаталог.ЭтоПапка = ЭтоПапка;
	
	СозданныеКаталоги.Вставить(ПолныйПуть, СтрокаДереваКаталог);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыВДерево(СписокФайлов, СозданныеКаталоги, СтруктураКартинок)
	Для Каждого Элем Из СписокФайлов Цикл
		Файл = Элем.Значение;
		ЭлРодителя = СозданныеКаталоги[Файл.Путь];
		
		Если ЭлРодителя = Неопределено Тогда
			ЭлРодителя = ДеревоФайлов;
		КонецЕсли;
		
		ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
		Нов = ОснЭлементы.Добавить();
		Нов.Имя = Файл.Имя;
		Нов.ПолныйПуть = Файл.ПолноеИмя;
		Нов.Картинка = СтруктураКартинок.Файл;
		Нов.ЭтоПапка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция УниверсальноеПолноеИмяФайла(Знач ПолноеИмяФайлаИлиФайл, Знач ВНРегистр = Ложь)
	
	Если ТипЗнч(ПолноеИмяФайлаИлиФайл) = Тип("Файл") Тогда
		УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайлаИлиФайл.ПолноеИмя, "\", "/");
	Иначе
		УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайлаИлиФайл, "\", "/");
	КонецЕсли;
	
	Если ВНРегистр Тогда
		УниверсальноеПолноеИмя = НРег(УниверсальноеПолноеИмя);
	КонецЕсли;
	
	Возврат УниверсальноеПолноеИмя;
	
КонецФункции

&НаКлиенте
Функция СтруктураКартинокДляДереваФайлов()
	
	СтруктураКартинок = Новый Структура;
	
	БинДата = Base64Значение("PHN2ZyB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIHZpZXdCb3g9IjAgMCAxNiAxNiIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTEgNEwzIDJIN0w5IDRIMTRDMTQuNTUyMyA0IDE1IDQuNDQ3NzIgMTUgNVYxM0MxNSAxMy41NTIzIDE0LjU1MjMgMTQgMTQgMTRIMkMxLjQ0NzcgMTQgMSAxMy41NTIzIDEgMTNWNFoiIGZpbGw9IiNCQjg3NDQiLz4KPHBhdGggZD0iTTE0IDdIMlYxM0gxNFY3WiIgZmlsbD0iI0Y3REE3RCIvPgo8cGF0aCBkPSJNMTQgNUgyVjZIMTRWNVoiIGZpbGw9IiNGRkUwNjkiLz4KPHBhdGggZD0iTTQgM0wyIDVIOEw2IDNINFoiIGZpbGw9IiNGRkUwNjkiLz4KPC9zdmc+Cg==");
	КартинкаПапки = Новый Картинка(БинДата);
	СтруктураКартинок.Вставить("Папка", КартинкаПапки);
	
	БинДата = Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABS2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxMzggNzkuMTU5ODI0LCAyMDE2LzA5LzE0LTAxOjA5OjAxICAgICAgICAiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIi8+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgo8P3hwYWNrZXQgZW5kPSJyIj8+IEmuOgAAAGhJREFUOI1jYKAQMDIwMDD4ZNUXMDAw+JOgb+OWaY0T4DyfrPr9/0kAPln1+2F6mSj1AsUGsKALLFy3nUFLRQGrYlM9TcIGxAd5UtcF2GylrwuQwcCEAc1dQLWEtNE3u4EUfRsptRgOALn3R2pxdRrxAAAAAElFTkSuQmCC");
	КартинкаФайла = Новый Картинка(БинДата);
	СтруктураКартинок.Вставить("Файл", КартинкаФайла);
	
	Возврат СтруктураКартинок;
	
КонецФункции

&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог) Экспорт
	
	Разделитель = "\";
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	Если ЭтоLinux Тогда
		Разделитель = "/";
		Каталог = СтрЗаменить(Каталог, "\", "/");
	КонецЕсли;
	
	Если Прав(Каталог, 1) <> Разделитель Тогда
		Каталог = Каталог + Разделитель;
	КонецЕсли;
	Возврат Каталог;
	
КонецФункции

&НаКлиенте
Функция РасширениеФайлаНакидка()
	
	Возврат "txt";
	
КонецФункции

&НаКлиенте
Процедура УстановитьМодифицированность()
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЦвета()
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗначениеЦветНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму(ИдентификаторОбработки + ".Форма.ФормаВыбораЦвета", , ЭтаФорма, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеЦветНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = Элементы.ПалитраСвойств.ТекущиеДанные;
	
	ТекущаяСтрока.ЗначениеЦвет = РезультатЗакрытия.Цвет;
	ТекущаяСтрока.ЗначениеСтрока = РезультатЗакрытия.ИмяЦвета;
	ИзменитьЗначениеСвойстваПалитры();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	Шаблон = "Накидка. v%1. %2";
	ИмяФайла = ?(ПустаяСтрока(мТекущееИмяФайла), "Новый", мТекущееИмяФайла);
	ЭтаФорма.Заголовок = СтрШаблон(Шаблон, ЭтотОбъект.ТекущаяВерсия, ИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийФайл(ПутьКФайлу)
	Если ПутьКФайлу = Неопределено Тогда
		мПутьКФайлу = "";
		мТекущееИмяФайла = "";
	Иначе
		мПутьКФайлу = ПутьКФайлу;
		СтруктураИмени = СлужебныеФункции().РазложитьПолноеИмяФайла(ПутьКФайлу);
		мТекущееИмяФайла = СтруктураИмени.ИмяБезРасширения;
	КонецЕсли;
	ОбновитьЗаголовокФормы();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьДеревоЭлементов(ЭлементыСД, ЭлементыДерева)
	Для Каждого ЭлементСД Из ЭлементыСД Цикл
		НовыйЭлементДерева = ЭлементыДерева.Добавить();
		
		Если ЭлементСД.НаборСвойств.Свойство("Заголовок") Тогда
			НовыйЭлементДерева.Представление = ЭлементСД.НаборСвойств.Заголовок;
		Иначе
			НовыйЭлементДерева.Представление = ЭлементСД.Тип;
		КонецЕсли;
		
		Если НЕ ЭлементСД.Свойство("Элементы") Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьДеревоЭлементов(ЭлементСД.Элементы, НовыйЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

#Область РедакторТаблицы

&НаКлиенте
Процедура ПостроитьКолонкиПоОписаниюТаблицы(ОписаниеЭлемента, ТаблицаКолонкиЭлементы)
	Для Каждого ОписаниеКолонки Из ОписаниеЭлемента.Колонки Цикл
		СтрокаТаблицы = ТаблицаКолонкиЭлементы.Добавить();
		СтрокаТаблицы.УИД = ОписаниеКолонки.УИД;
		
		Если ОписаниеКолонки.НаборСвойств.Свойство("Заголовок") Тогда
			СтрокаТаблицы.Заголовок = ОписаниеКолонки.НаборСвойств.Заголовок;
		КонецЕсли;
		
		Если ОписаниеКолонки.НаборСвойств.Свойство("ГоризонтальноеПоложение") Тогда
			СтрокаТаблицы.ГоризонтальноеПоложение = ОписаниеКолонки.НаборСвойств.ГоризонтальноеПоложение;
		Иначе
			СтрокаТаблицы.ГоризонтальноеПоложение = "Лево";
		КонецЕсли;
		СтрокаТаблицы.ЭтоГруппа = (ОписаниеКолонки.Тип = "ГруппаКолонокТаблицы");
		
		ПостроитьКолонкиПоОписаниюТаблицы(ОписаниеКолонки, СтрокаТаблицы.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоответствиеТекущихКолонок(СоответствиеКолонок, ОписаниеЭлемента)
	Для Каждого Колонка Из ОписаниеЭлемента.Колонки Цикл
		СоответствиеКолонок.Вставить(Колонка.УИД, Колонка);
		ЗаполнитьСоответствиеТекущихКолонок(СоответствиеКолонок, Колонка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКолонкиВРезультате(ОписаниеЭлемента, СоответствиеКолонок, ТаблицаКолонкиЭлементы)
	
КонецПроцедуры

#КонецОбласти

#Область ВыборТипа

&НаКлиенте
Процедура ПостроитьДеревоМетаданных()
	
КонецПроцедуры

&НаКлиенте
Функция НайтиВСемантическомДеревеПоИмениРеквизита(ИмяРеквизита)
	Очередь = Новый Массив;
	
	СлужебныеФункции().ДополнитьМассив(Очередь, мСемантическоеДерево.Элементы);
	
	Пока Очередь.Количество() > 0 Цикл
		Элемент = Очередь[0];
		
		Если Элемент.Свойство("УИДАтрибута") И Элемент.УИДАтрибута = ИмяРеквизита Тогда
			Возврат Элемент;
		КонецЕсли;
		
		Если Элемент.Свойство("Элементы") Тогда
			СлужебныеФункции().ДополнитьМассив(Очередь, Элемент.Элементы);
		КонецЕсли;
		
		Если Элемент.Свойство("Колонки") Тогда
			СлужебныеФункции().ДополнитьМассив(Очередь, Элемент.Колонки);
		КонецЕсли;
		
		Очередь.Удалить(0);
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область АПИ     

&НаКлиенте
Функция АПИ_ПолучитьПараметрыЗапросаКМетаданным(Идентификатор, ПредпочтительныйРаздел)
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", Идентификатор);
	//Результат.Вставить("ПредпочтительныйРаздел", ПредпочтительныйРаздел);
	//Результат.Вставить("БазовыйТип");
	//Результат.Вставить("ДлинаЧисла", 0);
	//Результат.Вставить("ТочностьЧисла", 0);
	//Результат.Вставить("ДлинаСтроки", 0);
	//Результат.Вставить("ЧастиДаты", 0);
	Результат.Вставить("Варианты", Новый Массив);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция АПИ_ДобавитьВариантВЗапросКМетаданным(ПараметрыЗапроса, ЕдинственноеЧисло, МножественноеЧисло)
	Результат = Новый Структура("ЕдинственноеЧисло,МножественноеЧисло", ЕдинственноеЧисло, МножественноеЧисло);
	ПараметрыЗапроса.Варианты.Добавить(Результат);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция АПИ_ПолучитьПараметрыПередачиМетаданных()
	Возврат Новый Структура("Имя,Синоним,Раздел");
КонецФункции

&НаКлиенте
Функция АПИ_ПолучитьПараметрыПередачиЭлемента(Элемент, Путь, ЭтоНовый)
	Возврат Новый Структура("Элемент,Путь,ЭтоНовый", Элемент, Путь, ЭтоНовый);
КонецФункции

&НаКлиенте
Функция АПИ_ПолучитьПараметрыСобытия(ДанныеСобытия)
	Событие = ДанныеСобытия.Event.eventData1C;
	
	Если Событие = Неопределено ИЛИ ТипЗнч(Событие) = Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("ВидСобытия", Событие.event);
	
	Если Результат.ВидСобытия = мСобытиеПриИзмененииСодержимогоРедактора Тогда
		Результат.Вставить("Текст", Событие.params.text);
		Данные = СлужебныеФункции().JSONВСтруктуру(Событие.params.data);
		Результат.Вставить("СемантическоеДерево", Данные.СемантическоеДерево);
		Результат.Вставить("Атрибуты", Данные.Атрибуты);
		Возврат Результат;
	КонецЕсли;
	
	Если Результат.ВидСобытия = мСобытиеПриИзмененииТекущегоЭлементаРедактора Тогда
		Результат.Вставить("Элемент", СлужебныеФункции().JSONВСтруктуру(Событие.params.element));
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура АПИ_Форматировать()
	мКонтекстОкнаРедактораHTML.formatText();
КонецПроцедуры

&НаКлиенте
Процедура АПИ_УстановитьТекст(Текст)
	мКонтекстОкнаРедактораHTML.setText(Текст);
КонецПроцедуры

&НаКлиенте
Процедура АПИ_ВставитьТекстВПозицию(Текст)
	мКонтекстОкнаРедактораHTML.insertText(Текст);
КонецПроцедуры

&НаКлиенте
Функция АПИ_ПолучитьТаблицу()
	Данные = мКонтекстОкнаРедактораHTML.getTable();
	Возврат СлужебныеФункции().JSONВСтруктуру(Данные);
КонецФункции

&НаКлиенте
Процедура АПИ_СоздатьОбновитьЭлемент(ДанныеЭлемента)
	Текст = СлужебныеФункции().СтруктураВJSON(ДанныеЭлемента);
	мКонтекстОкнаРедактораHTML.createOrUpdateElement(Текст);
КонецПроцедуры

&НаКлиенте
Функция АПИ_ПолучитьНовоеЗначение(Тип)
	Данные = мКонтекстОкнаРедактораHTML.getNewValue(Тип);
	Возврат СлужебныеФункции().JSONВСтруктуру(Данные);
КонецФункции

&НаКлиенте
Функция АПИ_ПолучитьТекст()
	Возврат мКонтекстОкнаРедактораHTML.getText();
КонецФункции

&НаКлиенте
Функция АПИ_ФорматироватьОписаниеТипов(ОписаниеТипов)
	Текст = СлужебныеФункции().СтруктураВJSON(ОписаниеТипов);
	Возврат мКонтекстОкнаРедактораHTML.formatTypeDescription(Текст);
КонецФункции

&НаКлиенте
Функция АПИ_ПарсингОписанияТипов(Текст)
	Результат = мКонтекстОкнаРедактораHTML.parseTypeDescription(Текст);
	Возврат СлужебныеФункции().JSONВСтруктуру(Результат);
КонецФункции

&НаКлиенте
Функция АПИ_ДобавитьМетаданные(ОписаниеМетаданных)     
	ПередаваемыйТекст = СлужебныеФункции().СтруктураВJSON(ОписаниеМетаданных);	
	мКонтекстОкнаРедактораHTML.addMetadata(ПередаваемыйТекст);
КонецФункции

&НаКлиенте
Функция АПИ_НайтиВМетаданных(ЗапросКМетаданным)     
	ПередаваемыйТекст = СлужебныеФункции().СтруктураВJSON(ЗапросКМетаданным);	
	Результат = мКонтекстОкнаРедактораHTML.searchTypeInMetadata(ПередаваемыйТекст);
	Возврат СлужебныеФункции().JSONВСтруктуру(Результат);
КонецФункции

#КонецОбласти     

#Область ИнициализацияДанных

СистемнаяИнформация = Новый СистемнаяИнформация;

ЭтоLinux = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64;

мПрефикс = "__";

мСобытиеПриИзмененииСодержимогоРедактора = "EVENT_CHANGE_CONTENT";
мСобытиеПриИзмененииТекущегоЭлементаРедактора = "EVENT_SELECT_ELEMENT";

#КонецОбласти

