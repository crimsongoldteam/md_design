// MIT License

// Copyright (c) 2025 Zherebtsov Nikita <nikita@crimsongold.ru>

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/crimsongoldteam/md_design

// MIT License

// Copyright (c) 2020 Alexander Shkuraev

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#Область ОписаниеПеременных

// Кэш пространств имен файлов конфигурации
&НаКлиенте
Перем мКэшПространствИмен;

// Соответствие разделов метаданных элементам дерева
&НаКлиенте
Перем мЭлементыДереваРазделы;

// Открытые на изменение файлы конфигурации
&НаКлиенте
Перем мФайлыКонфигурацииВРаботе;

// Открытые на изменение модули конфигурации
&НаКлиенте
Перем мМодулиКонфигурацииВРаботе;

// Основная форма, строка таблицы ДеревоИзменений
&НаКлиенте
Перем мОсновнаяФорма;

// Основной объект, владелец основной формы
&НаКлиенте
Перем мОсновнойОбъект;

// Флаг пропуска обработчика изменения скрипта
&НаКлиенте
Перем мОтключитьОбработчикАктивацииТаблицыСкриптов;

&НаКлиенте
Перем мПрефиксРасширения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

#Область ПрограммныйИнтерфейс

// Получает раздел метаданных конфигурации по имени
//
// Параметры:
//  Имя - Строка - имя раздела метаданных
//
// Возвращаемое значение:
//  Структура - раздел метаданных конфигурации со следующими полями:
//   - Имя - Строка - имя раздела метаданных (например, "Справочник", "Документ")
//   - ИмяМнож - Строка - имя раздела во множественном числе (например, "Справочники", "Документы")
//   - Представление - Строка - представление раздела для отображения
//   - ОсновнаяФорма - Строка - имя основной формы раздела
//   - ВнутреннееИмя - Строка - внутреннее имя раздела на английском языке
//   - ВнутреннееИмяМнож - Строка - внутреннее имя раздела во множественном числе
//   - Картинка - Картинка - картинка для отображения раздела
//   - ДоступенКакОсновнойОбъект - Булево - признак доступности как основного объекта
//   - СтандартныеРеквизиты - Структура - стандартные реквизиты раздела
// Пример:
//   Раздел = ПолучитьРазделМетаданныхПоИмени("Справочники");
&НаКлиенте
Функция ПолучитьРазделМетаданныхПоИмени(Имя)
	Возврат УправлениеСвойствами().ПолучитьРазделМетаданныхПоИмени(Имя);
КонецФункции

// Возвращает перечень типов модулей конфигурации
//
// Возвращаемое значение:
//  Структура - перечень типов модулей с ключами и значениями
// Пример:
//   ТипыМодулей().МодульФормы
&НаКлиенте
Функция ТипыМодулей()
	Результат = Новый Структура;
	Результат.Вставить("МодульФормы", "МодульФормы");
	Результат.Вставить("МодульОбъекта", "МодульОбъекта");
	Результат.Вставить("МодульМенеджера", "МодульМенеджера");
	Результат.Вставить("ОбщийМодуль", "ОбщийМодуль");
	Возврат Результат;
КонецФункции

// Возвращает перечениь обработчиков событий элемента формы (пока поддерживается только для форм)
//
// Параметры:
//  СтрокаЭлемент - ДанныеФормыЭлементДерева - строка дерева изменений элемента формы
//
// Возвращаемое значение:
//  Структура - перечень обработчиков событий
// Пример:
//   ОбработчикиСобытийЭлементовФормы(СтрокаФорма).ПриСозданииНаСервере
//
&НаКлиенте
Функция ОбработчикиСобытийЭлементовФормы(СтрокаЭлемент)
	Результат = Новый Структура;
	ВсеОбработчики = ОбработчикиСобытийЭлементовФормыВнутренний(СтрокаЭлемент);
	Для Каждого КлючЗначение Из ВсеОбработчики Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Ключ);
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Создает или получает метод в модуле конфигурации
//
// Параметры:
//  СтрокаМодуль - ДанныеФормыЭлементДерева - строка дерева изменений модуля
//  Имя - Строка - имя метода
//  Область - Строка - область модуля для размещения метода
//  ЭтоФункция - Булево - признак функции/процедуры (по умолчанию Ложь)
//
// Возвращаемое значение:
//  Структура - параметры созданного или найденного метода
// Пример:
//   Метод = СоздатьПолучитьМетод(СтрокаМодуля, "ПриСозданииНаСервере", "ОбработчикиСобытийФормы", Ложь);
&НаКлиенте
Функция СоздатьПолучитьМетод(СтрокаМодуль, Имя, Область, ЭтоФункция = Ложь)
	СтруктураМодуля = СтрокаМодуль.Данные.СтруктураМодуля;
	
	СуществующийМетод = ПолучитьМетод(СтруктураМодуля.СемантическоеДерево, Имя);
	Если СуществующийМетод = Неопределено Тогда
		ПараметрыМетода = ПолучитьПараметрыМетода();
		ПараметрыМетода.Содержимое.Имя = Имя;
		ПараметрыМетода.Содержимое.ЭтоФункция = ЭтоФункция;
		ПараметрыМетода.Область = Область;
		
		ДобавитьМетодВОбласть(СтруктураМодуля.СтруктураОбластей, ПараметрыМетода);
		Возврат ПараметрыМетода;
	КонецЕсли;
	
	ПараметрыМетода = ПолучитьПараметрыМетода();
	ПараметрыМетода.Существует = Истина;
	ПараметрыМетода.Содержимое = СуществующийМетод.Содержимое;
	ПараметрыМетода.Позиция = СуществующийМетод.Позиция;
	ПараметрыМетода.Область = Область;
	
	СтруктураМодуля.ИзмененныеМетоды.Добавить(ПараметрыМетода);
	
	Возврат ПараметрыМетода;
КонецФункции

// Добавляет параметр в метод
//
// Параметры:
//  Метод - Структура - параметры метода
//  Имя - Строка - имя параметра
//  ЗначениеПоУмолчанию - Строка - значение по умолчанию (необязательный)
//  ПоЗначению - Булево - передача по значению или ссылке (по умолчанию Ложь)
//  Описание - Строка - описание параметра (необязательный)
//
// Возвращаемое значение:
//  Структура - описание добавленного параметра
// Пример:
//  ДобавитьПараметрВМетод(Метод, "Отказ");
&НаКлиенте
Функция ДобавитьПараметрВМетод(Метод, Имя, ЗначениеПоУмолчанию = Неопределено, ПоЗначению = Ложь, Описание = Неопределено)
	Результат = Новый Структура;
	Результат.Вставить("Имя", Имя);
	Результат.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
	Результат.Вставить("ПоЗначению", ПоЗначению);
	Результат.Вставить("Описание", Описание);
	Результат.Вставить("Тип", Неопределено);
	
	Метод.Содержимое.Параметры.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

// Получает или создает модуль конфигурации
//
// Параметры:
//  ТипМодуля - Строка - тип модуля
//  Источник - ДанныеФормыЭлементДерева, Строка - источник для создания модуля. Для общего модуля источником является строка с названием модуля
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений
// Пример:
//   МодульФормы = ПолучитьМодуль(ТипыМодулей().МодульФормы, ОсновнаяФорма);
&НаКлиенте
Функция ПолучитьМодуль(ТипМодуля, Источник, ЭтоРасширение)
	Если ТипМодуля = ТипыМодулей().ОбщийМодуль Тогда
		СтрокаМодуль = СоздатьПолучитьОбъектКонфигурации(ТипМодуля, Источник);
	Иначе
		Если Источник.Данные[ТипМодуля] <> Неопределено Тогда
			Возврат ДеревоИзменений.НайтиПоИдентификатору(Источник.Данные[ТипМодуля]);
		КонецЕсли;
		
		СтрокаМодуль = ДобавитьСтрокуВДеревоИзменений(
				Источник,
				ТипМодуля,
				,
				Истина);
		
		Источник.Данные[ТипМодуля] = СтрокаМодуль.ПолучитьИдентификатор();
	КонецЕсли;
	
	Путь = ПолучитьПутьКФайлуМодуля(СтрокаМодуль, ЭтоРасширение);
	
	Текст = ПолучитьТекстМодуля(Путь);
	СемантическоеДерево = ПостроительТекстаМодуля().РазобратьМодуль(Текст);
	СтрокаМодуль.Данные.Вставить("СтруктураМодуля", ПолучитьСтруктуруМодуля(СемантическоеДерево, Текст));
	
	мМодулиКонфигурацииВРаботе.Вставить(СтрокаМодуль, Путь);
	
	Возврат СтрокаМодуль;
КонецФункции

// Создает или получает объект конфигурации в дереве изменений
//
// Параметры:
//  Тип - Строка - тип объекта конфигурации (Справочник, Документ, и т.д.)
//  Имя - Строка - имя объекта конфигурации
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений объекта конфигурации
// Пример:
//   СправочникКонтрагенты = СоздатьПолучитьОбъектКонфигурации("Справочник", "Контрагенты");
&НаКлиенте
Функция СоздатьПолучитьОбъектКонфигурации(Знач Тип, Знач Имя, ЭтоРасширение = Ложь)
	СтрокаРаздел = СоздатьПолучитьРазделВДеревеИзменений(Тип);
	
	ЭлементыРаздела = СтрокаРаздел.ПолучитьЭлементы();
	Для Каждого ЭлементРаздела Из ЭлементыРаздела Цикл
		Если ЭлементРаздела.Имя = Имя Тогда
			Возврат ЭлементРаздела;
		КонецЕсли;
	КонецЦикла;         

	ОбъектКонфигурации = ПолучитьОбъектКонфигурации(Тип, Имя, ЭтоРасширение);
	ЭтоНовый = (ОбъектКонфигурации = Неопределено);
	ИсходныйОбъектКонфигурации = Неопределено;
	Если ЭтоРасширение И ЭтоНовый Тогда
		ИсходныйОбъектКонфигурации = ПолучитьОбъектКонфигурации(Тип, Имя, Ложь);
	КонецЕсли;
	
	СтрокаОбъект = ДобавитьСтрокуВДеревоИзменений(
		СтрокаРаздел,
		Тип,
		Имя,
		ЭтоНовый);
	
	СтрокаОбъект.Данные.УИД = Новый УникальныйИдентификатор;
	СтрокаОбъект.Данные.НаборСвойств = Новый Структура;
	
	Если ИсходныйОбъектКонфигурации <> Неопределено Тогда
		СтрокаОбъект.Данные.НаборСвойств.Вставить("ОбъектРасширяемойКонфигурации", ИсходныйОбъектКонфигурации.УИД);
		СтрокаОбъект.Данные.НаборСвойств.Вставить("ПринадлежностьОбъекта", "Заимствованный");
	КонецЕсли;
	
	Возврат СтрокаОбъект;
КонецФункции

//&НаКлиенте
//Функция ПолучитьПрефиксРасширения(Имя, ЭтоРасширение)
//	Результат = Новый Структура("Имя,Префикс,ЕстьПрефикс", "", "", Ложь);
//	Если НЕ ЭтоРасширение Тогда 
//		Результат.Имя = Имя;
//		Возврат Результат;
//	КонецЕсли;
//	
//	Если НЕ СтрНачинаетсяС(Имя, мПрефиксРасширения) Тогда
//		Результат.Имя = Имя;
//		Возврат Результат;
//	КонецЕсли;
//	
//	Результат.ЕстьПрефикс = Истина;
//	Результат.Префикс = мПрефиксРасширения;
//	Результат.Имя = Сред(Имя, СтрДлина(мПрефиксРасширения) + 1);
//	Возврат Результат;
//КонецФункции

// Создает значение перечисления
//
// Параметры:
//  СтрокаОбъект - ДанныеФормыЭлементДерева - строка объекта конфигурации
//  Имя - Строка - имя значения
//  Представление - Строка - представление значения (необязательный)
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений
// Пример:
//   ЗначениеПеречисления = СоздатьЗначениеОбъектаКонфигурации(СтрокаПеречислениеПол, "Мужской");
&НаКлиенте
Функция СоздатьЗначениеОбъектаКонфигурации(СтрокаОбъект, Знач Имя, Знач Представление = Неопределено)
	ИДСтрокиЗначения = СтрокаОбъект.Данные.Значения;
	Если ИДСтрокиЗначения = Неопределено Тогда
		СтрокаЗначения = ДобавитьСтрокуВДеревоИзменений(СтрокаОбъект, ТипыСтрокДереваИзменений().Значения);
		
		СтрокаОбъект.Данные.Значения = СтрокаЗначения.ПолучитьИдентификатор();
	Иначе
		СтрокаЗначения = ДеревоИзменений.НайтиПоИдентификатору(ИДСтрокиЗначения);
	КонецЕсли;
	
	СтрокаРеквизит = ДобавитьСтрокуВДеревоИзменений(
			СтрокаЗначения,
			ТипыСтрокДереваИзменений().Значение,
			Имя,
			Истина);
	СтрокаРеквизит.Данные.УИД = Новый УникальныйИдентификатор;
	СтрокаРеквизит.Данные.НаборСвойств = Новый Структура;
	Если Представление <> Неопределено Тогда
		СтрокаРеквизит.Данные.НаборСвойств.Вставить("Синоним", Представление);
	КонецЕсли;
	
	Возврат СтрокаРеквизит;
КонецФункции

// Создает или получает реквизит объекта конфигурации
//
// Параметры:
//  СтрокаОбъект - ДанныеФормыЭлементДерева - строка объекта конфигурации
//  Имя - Строка - имя реквизита
//  ОписаниеТипов - Структура - описание типов реквизита, см СоздатьОписаниеТипов
//  СтрокаРодитель - ДанныеФормыЭлементДерева - строка табличной части
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений
// Пример:
//   Реквизит = СоздатьПолучитьРеквизитОбъектаКонфигурации(СтрокаКонтрагент, "ПолноеНаименование", СоздатьОписаниеТипов("Строка"));
&НаКлиенте
Функция СоздатьПолучитьРеквизитОбъектаКонфигурации(СтрокаОбъект, Знач Имя, ОписаниеТипов, СтрокаРодитель = Неопределено)
	
	ИмяТабличнойЧасти = Неопределено;
	Если СтрокаРодитель <> Неопределено Тогда
		СтрокаРеквизиты = СтрокаРодитель;
		ИмяТабличнойЧасти = СтрокаРодитель.Имя;
	Иначе
		ИДСтрокиРеквизиты = СтрокаОбъект.Данные.Реквизиты;
		Если ИДСтрокиРеквизиты = Неопределено Тогда
			СтрокаРеквизиты = ДобавитьСтрокуВДеревоИзменений(СтрокаОбъект, ТипыСтрокДереваИзменений().Реквизиты);
			
			СтрокаОбъект.Данные.Реквизиты = СтрокаРеквизиты.ПолучитьИдентификатор();
		Иначе
			СтрокаРеквизиты = ДеревоИзменений.НайтиПоИдентификатору(ИДСтрокиРеквизиты);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРеквизит = ПолучитьЭлементДереваИзмененийПоИмени(СтрокаРеквизиты, Имя);
	
	Если СтрокаРеквизит <> Неопределено Тогда
		Возврат СтрокаРеквизит;
	КонецЕсли;
	
	Тип = ТипыСтрокДереваИзменений().Реквизит;
	Если ОписаниеТипов.Типы.Найти("ДеревоЗначений") <> Неопределено Тогда
		Тип = ТипыСтрокДереваИзменений().РеквизитДеревоЗначений;
	ИначеЕсли ОписаниеТипов.Типы.Найти("ТаблицаЗначений") <> Неопределено Тогда
		Тип = ТипыСтрокДереваИзменений().РеквизитТаблицаЗначений;
	Иначе
		Тип = ТипыСтрокДереваИзменений().Реквизит;
	КонецЕсли;
	
	ЭтоТаблицаДерево = ЭтоРеквизитТабличнаяЧасть(Тип);
	
	ЭтоНовый = СтрокаОбъект.ЭтоНовый ИЛИ
		НЕ ЕстьРеквизитОбъектаКонфигурации(СтрокаОбъект.Тип, СтрокаОбъект.Имя, Имя, ЭтоТаблицаДерево, ИмяТабличнойЧасти);
	СтрокаРеквизит = ДобавитьСтрокуВДеревоИзменений(
			СтрокаРеквизиты,
			Тип,
			Имя,
			ЭтоНовый);
	
	СтрокаРеквизит.Данные.УИД = Новый УникальныйИдентификатор;
	
	Если НЕ ЭтоТаблицаДерево Тогда
		СтрокаРеквизит.Данные.ОписаниеТипов = ОписаниеТипов;
	КонецЕсли;
	
	Возврат СтрокаРеквизит;
КонецФункции

// Создает форму
//
// Параметры:
//  СтрокаОбъект - ДанныеФормыЭлементДерева - строка объекта конфигурации
//  Имя - Строка - имя формы
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений
// Пример:
//   ОсновнаяФорма = СоздатьФорму(СтрокаОбъект, "ОсновнаяФорма");
&НаКлиенте
Функция СоздатьФорму(СтрокаОбъект, Имя)
	ИДСтрокиФормы = СтрокаОбъект.Данные.Формы;
	Если ИДСтрокиФормы = Неопределено Тогда
		СтрокаФормы = ДобавитьСтрокуВДеревоИзменений(СтрокаОбъект, ТипыСтрокДереваИзменений().Формы);
		СтрокаОбъект.Данные.Формы = СтрокаФормы.ПолучитьИдентификатор();
	Иначе
		СтрокаФормы = ДеревоИзменений.НайтиПоИдентификатору(ИДСтрокиФормы);
	КонецЕсли;
	
	СтрокаФорма = ДобавитьСтрокуВДеревоИзменений(
			СтрокаФормы,
			ТипыСтрокДереваИзменений().Форма,
			Имя,
			Истина);
	
	СтрокаФорма.Данные.НаборСвойств = Новый Структура;
	СтрокаФорма.Данные.УИД = Новый УникальныйИдентификатор;
	СтрокаФорма.Данные.ОбработчикиСобытий = Новый Структура;
	
	Возврат СтрокаФорма;
КонецФункции

// Возвращает основную форму
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений
&НаКлиенте
Функция ПолучитьОсновнуюФорму()
	Возврат мОсновнаяФорма;
КонецФункции

// Возвращает основной объект, владелец основной формы
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений
&НаКлиенте
Функция ПолучитьОсновнойОбъект()
	Возврат мОсновнойОбъект;
КонецФункции

// Устанавливает обработчик события формы
//
// Параметры:
//  СтрокаФорма - ДанныеФормыЭлементДерева - строка формы
//  ИмяСобытия - Строка - имя события формы
//  ИмяМетода - Строка - имя метода-обработчика (необязательный, если не указан, то будет использовано имя события)
// Пример:
//   УстановитьОбработчикСобытияФормы(ОсновнаяФорма, ОбработчикиСобытийЭлементовФормы(ОсновнаяФорма).ПриСозданииНаСервере, "ПриСозданииНаСервере");
&НаКлиенте
Процедура УстановитьОбработчикСобытияФормы(СтрокаФорма, ИмяСобытия, ИмяМетода = Неопределено)
	СтрокаФорма.Данные.ОбработчикиСобытий.Вставить(ИмяСобытия, ?(ИмяМетода = Неопределено, ИмяСобытия, ИмяМетода));
КонецПроцедуры

// Устанавливает свойство объекта конфигурации (пока не реализовано)
//
// Параметры:
//  СтрокаОбъект - ДанныеФормыЭлементДерева - строка объекта конфигурации
//  Имя - Строка - имя свойства
//  Значение - ДанныеФормыЭлементДерева - строка формы
// Пример:
//   УстановитьСвойствоОбъектаКонфигурации(СтрокаКонтрагент, ТипыФорм().ОсновнаяФормаОбъекта, СтрокаОсновнаяФорма);
&НаКлиенте
Процедура УстановитьСвойствоОбъектаКонфигурации(СтрокаОбъект, Имя, Значение)
	Если ТипыФорм().Свойство(Имя) Тогда
		ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(СтрокаОбъект.Тип);
		ПолноеИмя = ОписаниеРаздела.ВнутреннееИмя + "."
			+ СтрокаОбъект.Имя + "."
			+ "Form."
			+ Значение.Имя;
		СтрокаОбъект.Данные.НаборСвойств.Вставить(ТипыФормВнутренний()[Имя], ПолноеИмя);
	КонецЕсли;
КонецПроцедуры

// Создает элемент формы
//
// Параметры:
//  СтрокаРодитель - ДанныеФормыЭлементДерева - строка формы
//  ИмяЭлемента - Строка - имя элемента формы
//  ТипЭлемента - Строка - тип элемента формы
//  ВидЭлемента - Строка - вид элемента формы (необязательный)
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка элемента формы
// Пример:
//   ЭлементФамилия = СоздатьЭлементФормы(ОсновнаяФорма, "Фамилия", "ПолеФормы", "ПолеВвода");
&НаКлиенте
Функция СоздатьЭлементФормы(СтрокаРодитель, Знач ИмяЭлемента, Знач ТипЭлемента, Знач ВидЭлемента = Неопределено)
	Если СтрокаРодитель.Тип = "Форма" Тогда
		ИДСтрокиФормы = СтрокаРодитель.Данные.Элементы;
		Если ИДСтрокиФормы = Неопределено Тогда
			СтрокаЭлементы = ДобавитьСтрокуВДеревоИзменений(СтрокаРодитель, ТипыСтрокДереваИзменений().Элементы);
			СтрокаРодитель.Данные.Элементы = СтрокаЭлементы.ПолучитьИдентификатор();
		Иначе
			СтрокаЭлементы = ДеревоИзменений.НайтиПоИдентификатору(ИДСтрокиФормы);
		КонецЕсли;
	Иначе
		СтрокаЭлементы = СтрокаРодитель;
	КонецЕсли;
	
	СтрокаЭлемент = ДобавитьСтрокуВДеревоИзменений(
			СтрокаЭлементы,
			ТипыСтрокДереваИзменений().Элемент,
			ИмяЭлемента,
			Истина);
	
	СтрокаЭлемент.Данные.ТипЭлемента = ТипЭлемента;
	
	ТекВидЭлемента = ВидЭлемента;
	Если ТипЭлемента = "КнопкаФормы" Тогда
		ТекВидЭлемента = Неопределено;
	КонецЕсли;
	
	СтрокаЭлемент.Данные.ВидЭлемента = ?(ТекВидЭлемента = Неопределено, "БезВида", ТекВидЭлемента);
	
	ТипВидЭлемента = ПолучитьТипВидЭлемента(ТипЭлемента, ТекВидЭлемента);
	ТипВнутренний = ПолучитьВнутреннееИмяТипаЭлемента(ТипВидЭлемента);
	Если ТипВнутренний = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Для типа элемента ""%1"" в макете ""ТипыЭлементов"" не указано внутреннее название.'"), ТипЭлемента);
		Сообщение.Сообщить();
	КонецЕсли;
	СтрокаЭлемент.Данные.ТипЭлементаВнутренний = ТипВнутренний;
	
	СтрокаЭлемент.Данные.НаборСвойств = Новый Структура;
	
	Возврат СтрокаЭлемент;
КонецФункции

// Создает реквизит формы
//
// Параметры:
//  СтрокаФорма - ДанныеФормыЭлементДерева - строка формы
//  Имя - Строка - имя реквизита формы
//  ОписаниеТипов - Структура - описание типов реквизита, см СоздатьОписаниеТипов
//  СтрокаРодитель - ДанныеФормыЭлементДерева - строка табличной части
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка реквизита формы
// Пример:
//   Реквизит = СоздатьРеквизитФормы(ОсновнаяФорма, "Фамилия", СоздатьОписаниеТипов("Строка"));
&НаКлиенте
Функция СоздатьРеквизитФормы(СтрокаФорма, Знач Имя, ОписаниеТипов, СтрокаРодитель = Неопределено)
	Если СтрокаРодитель <> Неопределено Тогда
		СтрокаРеквизитыФормы = СтрокаРодитель;
		Если ЭтоРеквизитТабличнаяЧасть(СтрокаРодитель.Тип) Тогда
			СтрокаРеквизитыФормы = ПолучитьОтражениеТабличнойЧастиОбъектаНаФорме(СтрокаФорма, СтрокаРодитель);
		КонецЕсли;
	Иначе
		ИДСтрокиРеквизитыФормы = СтрокаФорма.Данные.Реквизиты;
		Если ИДСтрокиРеквизитыФормы = Неопределено Тогда
			СтрокаРеквизитыФормы = ДобавитьСтрокуВДеревоИзменений(СтрокаФорма, ТипыСтрокДереваИзменений().РеквизитыФормы);
			СтрокаФорма.Данные.Реквизиты = СтрокаРеквизитыФормы.ПолучитьИдентификатор();
		Иначе
			СтрокаРеквизитыФормы = ДеревоИзменений.НайтиПоИдентификатору(ИДСтрокиРеквизитыФормы);
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеТипов.Типы.Найти("ДеревоЗначений") <> Неопределено Тогда
		Тип = ТипыСтрокДереваИзменений().РеквизитФормыДеревоЗначений;
	ИначеЕсли ОписаниеТипов.Типы.Найти("ТаблицаЗначений") <> Неопределено Тогда
		Тип = ТипыСтрокДереваИзменений().РеквизитФормыТаблицаЗначений;
	Иначе
		Тип = ТипыСтрокДереваИзменений().РеквизитФормы;
	КонецЕсли;
	
	СтрокаРеквизит = ДобавитьСтрокуВДеревоИзменений(
			СтрокаРеквизитыФормы,
			Тип,
			Имя,
			Истина);
	
	СтрокаРеквизит.Данные.ОсновнойРеквизит = Ложь;
	СтрокаРеквизит.Данные.СохраняемыеДанные = Ложь;
	СтрокаРеквизит.Данные.ОписаниеТипов = ОписаниеТипов;
	
	Возврат СтрокаРеквизит;
КонецФункции

// Создает структуру описания типов для реквизита
//
// Параметры:
//  Тип - Строка - тип данных
//
// Возвращаемое значение:
//  Структура - описание типов со следующими свойствами:
//  * ДлинаСтроки - Число - длина строки
//  * ЧастиДаты - Число - части даты
//  * ДлинаЧисла - Число - длина числа
//  * ТочностьЧисла - Число - точность числа
//  * Типы - Массив - массив строк с названиями типов
// Пример:
//   ОписаниеТипов = СоздатьОписаниеТипов("Строка");
&НаКлиенте
Функция СоздатьОписаниеТипов(Тип)
	Результат = Новый Структура;
	Результат.Вставить("ДлинаСтроки", 0);
	Результат.Вставить("ЧастиДаты", Неопределено);
	Результат.Вставить("ДлинаЧисла", 0);
	Результат.Вставить("ТочностьЧисла", 0);
	Результат.Вставить("Типы", Новый Массив);
	Результат.Типы.Добавить(Тип);
	Возврат Результат;
КонецФункции

// Устанавливает свойство элемента формы
//
// Параметры:
//  СтрокаЭлементФормы - ДанныеФормыЭлементДерева - строка элемента формы
//  Имя - Строка - имя свойства
//  Значение - Произвольный - значение свойства
//  Тип - Строка - тип системного перечисления, см ТипыСистемныеПеречисления
// Пример:
//   УстановитьСвойствоЭлементаФормы(ЭлементФамилия, "Доступность", Ложь);
&НаКлиенте
Процедура УстановитьСвойствоЭлементаФормы(СтрокаЭлементФормы, Имя, Значение, Тип = Неопределено)
	СтрокаЭлементФормы.Данные.НаборСвойств.Вставить(Имя, Новый Структура("Значение,Тип", Значение, Тип));
КонецПроцедуры

// Устанавливает тело метода с отступами
//
// Параметры:
//  Метод - Структура - параметры метода
//  Текст - Строка - текст тела метода
// Пример:
//   УстановитьТелоМетода(Метод, "Сообщить(""Привет"");");
&НаКлиенте
Процедура УстановитьТелоМетода(Метод, Текст)
	Метод.Содержимое.Тело = ПолучитьТекстТелаСОтступами(Текст);
КонецПроцедуры

// Добавляет текст к телу метода с отступами
//
// Параметры:
//  Метод - Структура - параметры метода
//  Текст - Строка - текст для добавления
// Пример:
//   ДобавитьКТелуМетода(Метод, "Сообщить(""Привет"");");
&НаКлиенте
Процедура ДобавитьКТелуМетода(Метод, Текст)
	Если ПустаяСтрока(Метод.Содержимое.Тело) Тогда
		УстановитьТелоМетода(Метод, Текст);
		Возврат;
	КонецЕсли;
	
	МассивСтрокТело = СтрРазделить(Метод.Содержимое.Тело, Символы.ПС);
	Если НЕ ПустаяСтрока(МассивСтрокТело[МассивСтрокТело.ВГраница()]) Тогда
		Метод.Содержимое.Тело =
			Метод.Содержимое.Тело + Символы.ПС;
	КонецЕсли;
	
	Метод.Содержимое.Тело =
		Метод.Содержимое.Тело
		+ ПолучитьТекстТелаСОтступами(Текст);
КонецПроцедуры

// Проверяет существование реквизита в объекте конфигурации
//
// Параметры:
//  ТипОбъекта - Строка - тип объекта конфигурации
//  ИмяОбъекта - Строка - имя объекта конфигурации
//  ИмяРеквизита - Строка - имя реквизита
//  ЭтаТабличнаяЧасть - Булево - признак табличной части
//  ИмяТабличнойЧасти - Строка - имя табличной части (необязательный)
//
// Возвращаемое значение:
//  Булево - Истина, если реквизит существует
// Пример:
//   ЕстьРевизитФамилия = ЕстьРеквизитОбъектаКонфигурации("Справочник", "Контрагенты", "Фамилия");
&НаКлиенте
Функция ЕстьРеквизитОбъектаКонфигурации(ТипОбъекта, ИмяОбъекта, ИмяРеквизита, ЭтаТабличнаяЧасть, ИмяТабличнойЧасти = Неопределено, ЭтоРасширение = Ложь)
	Путь = ПолучитьПутьКФайлуОбъекта(ТипОбъекта, ИмяОбъекта, ЭтоРасширение);
	ДокументКонфигурации = ОткрытьФайлКонфигурации(Путь, Ложь);
	
	Если ИмяТабличнойЧасти = Неопределено Тогда
		ШаблонЗапроса =
			"//*[local-name()='%1']/
			|*[local-name()='Properties']/
			|*[local-name()='Name' and text()='%2']";
		ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ?(ЭтаТабличнаяЧасть, "TabularSection", "Attribute"), ИмяРеквизита);
	Иначе
		ШаблонЗапроса =
			"//*[local-name()='TabularSection'][*[local-name()='Properties']/
			|*[local-name()='Name' and .='%1']]/
			|*[local-name()='ChildObjects']/
			|*[local-name()='Attribute'][*[local-name()='Properties']/
			|*[local-name()='Name' and .='%2']]";
		ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ИмяТабличнойЧасти, ИмяРеквизита);
	КонецЕсли;
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументКонфигурации);
	Выражение = ДокументКонфигурации.СоздатьВыражениеXPath(ТекстЗапроса, Разыменователь);
	Результат = Выражение.Вычислить(ДокументКонфигурации, ТипРезультатаDOMXPath.Булево);
	
	Возврат Результат.БулевоЗначение;
КонецФункции

// Проверяет существование объекта конфигурации
//
// Параметры:
//  Тип - Строка - тип объекта конфигурации
//  Имя - Строка - имя объекта конфигурации
//
// Возвращаемое значение:
//  Булево - Истина, если объект существует
// Пример:
//   ЕстьКонтрагенты =ЕстьОбъектКонфигурации("Справочник", "Контрагенты");
&НаКлиенте
Функция ЕстьОбъектКонфигурации(Тип, Имя, Расширение = Неопределено)
	ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(Тип);
	ВнутреннийТип = ОписаниеРаздела.ВнутреннееИмя;
	
	ШаблонЗапроса =
		"/*[local-name()='MetaDataObject']/
		|*[local-name()='Configuration']/
		|*[local-name()='ChildObjects']/
		|*[local-name()='%1' and text()='%2']";
	
	ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ВнутреннийТип, Имя);
	
	ДокументКонфигурации = ОткрытьФайлКонфигурации(ПолучитьПутьКФайлуКонфигурации(Расширение = Неопределено), Ложь);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументКонфигурации);
	Выражение = ДокументКонфигурации.СоздатьВыражениеXPath(ТекстЗапроса, Разыменователь);
	Результат = Выражение.Вычислить(ДокументКонфигурации, ТипРезультатаDOMXPath.Булево);
	
	Возврат Результат.БулевоЗначение;
КонецФункции

&НаКлиенте
Функция ПолучитьОбъектКонфигурации(Тип, Имя, ЭтоРасширение = Неопределено)
	
КонецФункции

// Проверяет, является ли реквизит стандартным реквизитом
//
// Параметры:
//  ТипОбъекта - Строка - тип объекта конфигурации
//  ИмяРеквизита - Строка - имя реквизита
//
// Возвращаемое значение:
//  Булево - Истина, если реквизит является стандартным реквизитом
// Пример:
//   ЭтоСтандартныйРеквизит = ЭтоСтандартныйРеквизит("Справочник", "Наименование");
&НаКлиенте
Функция ЭтоСтандартныйРеквизит(ТипОбъекта, ИмяРеквизита)
	ОписаниеРаздела = УправлениеСвойствами().ПолучитьРазделМетаданныхПоИмени(ТипОбъекта);
	Возврат ОписаниеРаздела.СтандартныеРеквизиты.Свойство(ИмяРеквизита);
КонецФункции

&НаКлиенте
Функция ПолучитьРасширение()
	Результат = Новый Структура();
	Результат.Вставить("Префикс");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// BSLLS-off
	ОбработкаОбъект = ЭтотОбъект();
	
	ВерсияОбработки = ОбработкаОбъект.СведенияОВнешнейОбработке().Версия;
	
	АдресМакета = ПоместитьВоВременноеХранилище(ПолучитьМакет("bsl_console"), Новый УникальныйИдентификатор());
	
	КоллекцияОбщихМодулей = ПолучитьКоллекциюОбщихМодулей();
	АдресОбщихМодулей = СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей);
	ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей);
	
	БыстрыеПодсказки = Истина;
	ВидимостьКартыКода = Истина;
	// BSLLS-on
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Разделы = ПолучитьОписаниеРазделовМетаданных();
	Для Каждого Раздел Из Разделы Цикл
		Если НЕ Раздел.ДоступенКакОсновнойОбъект Тогда
			Продолжить;
		КонецЕсли;
		Элементы.ТипОбъекта.СписокВыбора.Добавить(Раздел.Имя, Раздел.Представление, , Раздел.Картинка);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	ОпределитьРазделительПути();
	
	мОтключитьОбработчикАктивацииТаблицыСкриптов = Ложь;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	ЗаполнитьДеревоИзменений();
	
	мКэшПространствИмен = Новый Структура();
	мКэшПространствИмен.Вставить("ВерсияXML", "1.0");
	мКэшПространствИмен.Вставить("АттрибутыОбщие", Новый Соответствие);
	мКэшПространствИмен.Вставить("АттрибутMDClasses", "http://v8.1c.ru/8.3/MDClasses");
	мКэшПространствИмен.Вставить("АттрибутForm", "http://v8.1c.ru/8.3/xcf/logform");
	
	ПрочитатьАттрибуты();
	
	Для Каждого КлючЗначениеРазделы Из мЭлементыДереваРазделы Цикл
		ОбъектыКонфигурации = КлючЗначениеРазделы.Значение.ПолучитьЭлементы();
		
		Для Каждого ОбъектКонфигурации Из ОбъектыКонфигурации Цикл
			ВыгрузитьОбъектКонфигурации(ОбъектКонфигурации);
		КонецЦикла;
	КонецЦикла;
	
	ЗаписатьФайлыКонфигурации();
	ЗаписатьМодулиКонфигурации();
	
	Закрыть();
	Состояние(НСтр("ru = 'Выгрузка успешно завершена'"));
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкрипт(Команда)
	ЗаполнитьДеревоИзменений();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьСкрипты(Команда)
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Каталог = КаталогСкриптов;
	ВыбранныеФайлы = Ждать ДиалогОткрытияФайла.ВыбратьАсинх();
	Если НЕ ВыбранныеФайлы = Неопределено Тогда
		КаталогСкриптов = ВыбранныеФайлы[0];
		ЗагрузитьСкриптыИзКаталога();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыгружатьВРасширениеПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КаталогXMLНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	КаталогНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КаталогРасширенияXMLНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	КаталогНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИмяОбъектаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(КаталогXML) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Заполните каталог XML'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ВыгружатьВРасширение И ПустаяСтрока(КаталогРасширенияXML) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Заполните каталог расширения XML'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяОбъектаНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;                                         
	ПараметрыОткрытия.Вставить("ОписаниеРазделов", ПолучитьОписаниеРазделовМетаданных());
	ПараметрыОткрытия.Вставить("Конфигурация", ПолучитьДеревоКонфигурации(Ложь));
	Если ВыгружатьВРасширение Тогда
		ПараметрыОткрытия.Вставить("Расширение", ПолучитьДеревоКонфигурации(Истина));
	КонецЕсли;
	
	ОткрытьФорму(ПолучитьОписаниеОбработки() + ".Форма.ФормаВыбораОбъектаКонфигурации", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ИмяОбъектаНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ИмяОсновногоОбъекта = РезультатЗакрытия.ИмяОбъекта;
	ЭтотОбъект.ТипОсновногоОбъекта = РезультатЗакрытия.ТипОбъекта;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыДеревоИзменений

&НаКлиенте
Процедура ДеревоИзмененийПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ДеревоИзменений.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено
		ИЛИ НЕ ТипыМодулей().Свойство(ТекущаяСтрока.Тип) Тогда
		Элементы.ТекстМодуля.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ТекстМодуля.Видимость = Истина;
	ЭтотОбъект.ТекстМодуля = ТекущаяСтрока.Данные.СтруктураМодуля.Текст;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыТаблицаСкрптов

&НаКлиенте
Процедура ТаблицаСкриптовПриАктивизацииСтроки(Элемент)
	ОбновитьТекущийСкрипт();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Модули

&НаКлиенте
Функция ПостроительТекстаМодуля()
	Возврат ВладелецФормы.ПостроительТекстаМодуля();
КонецФункции

&НаКлиенте
Функция УправлениеСвойствами()
	Возврат ВладелецФормы.УправлениеСвойствами();
КонецФункции

&НаКлиенте
Функция СлужебныеФункции()
	Возврат ВладелецФормы.СлужебныеФункции();
КонецФункции

&НаКлиенте
Функция РаботаСИИ()
	Возврат ВладелецФормы.РаботаСИИ();
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеОбработки()
	Возврат ВладелецФормы.ПолучитьИдентификаторОбработки();
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееИмяТипаЭлемента(ТипЭлемента)
	Возврат УправлениеСвойствами().ПолучитьАнглийскоеИмяТипаЭлемента(ТипЭлемента);
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееИмяСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства)
	Возврат УправлениеСвойствами().ПолучитьАнглийскоеИмяСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства);
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееЗначениеСистемногоПеречисления(ТипЭлемента, ВидЭлемента, ИмяСвойства, ЗначениеСвойства)
	Возврат УправлениеСвойствами().ПолучитьАнглийскоеЗначениеСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства, ЗначениеСвойства);
КонецФункции

#КонецОбласти

#Область ВыполнениеСкриптов

&НаКлиенте
Процедура УстановитьТекущийСкриптДляТестов(Знач Текст) Экспорт
	КодСимволаАбзац = 182;
	СимволАбзац = Символ(КодСимволаАбзац);
	Текст = СтрЗаменить(Текст, СимволАбзац, Символы.ПС);
	
	ТекущаяСтрока = Элементы.ТаблицаСкриптов.ТекущиеДанные;
	ТекущаяСтрока.Текст = Текст;
	
	ОбновитьТекущийСкрипт();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущийСкрипт()
	мОтключитьОбработчикАктивацииТаблицыСкриптов = Истина;
	
	ТекущаяСтрока = Элементы.ТаблицаСкриптов.ТекущиеДанные;
	
	ОчиститьТекст();
	Если ТекущаяСтрока = Неопределено Тогда
		Элементы.ПолеHTML.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ПолеHTML.Доступность = Истина;
	УстановитьТекст(ТекущаяСтрока.Текст, Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьСкриптыИзКаталога()
	Если ПустаяСтрока(КаталогСкриптов) Тогда
		Возврат;
	КонецЕсли;
	НайденныеФайлы = Ждать НайтиФайлыАсинх(КаталогСкриптов, "*.bsl", Истина);
	ЗагрузитьСкриптыИзКаталогаЗавершение(НайденныеФайлы);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСкриптыИзКаталогаЗавершение(НайденныеФайлы)
	ТаблицаСкриптов.Очистить();
	Для Каждого ТекФайл Из НайденныеФайлы Цикл
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ТекФайл.ПолноеИмя, КодировкаТекста.UTF8);
		Текст = ТекстовыйДокумент.ПолучитьТекст();
		
		СтрокаТаблицы = ТаблицаСкриптов.Добавить();
		СтрокаТаблицы.Имя = ТекФайл.ИмяБезРасширения;
		СтрокаТаблицы.Текст = Текст;
	КонецЦикла;
	
	ОбновитьТекущийСкрипт();
КонецПроцедуры

// Создает и возвращает структуру описания метода
//
// Параметры:
//
//
// Возвращаемое значение:
//  Структура - Описание характеристик метода
&НаКлиенте
Функция МетодСтруктураОписания() Экспорт
	Структ = Новый Структура(
			"Имя, Контекст, Комментарий, КомментарийОднострочный, КомментарийОднострочныйКонец, КомментарийВозвращаемоеЗначение, 
			|Параметры, Экспортная, Асинх, Тело, Аннотация, ИмяРасширяемогоМетода, ЭтоФункция, 
			|ИнструкцииПрепроцессора");
	Структ.Параметры = НоваяТаблицаПараметров();
	Структ.ИнструкцииПрепроцессора = СтруктураИнструкцийПрепроцессораПоУмолчанию();
	Возврат Структ;
КонецФункции

// Создает и возвращает новую таблицу для параметров функции или процедуры
//
// Параметры:
//
//
// Возвращаемое значение:
//  Массив - Массив структур параметров
Функция НоваяТаблицаПараметров() Экспорт
	Возврат Новый Массив;
КонецФункции

// Создает и возвращает структуру с инструкциями препроцессора по умолчанию.
//
// Параметры:
//
//
// Возвращаемое значение:
//  Структура - Содержит настройки инструкций препроцессора.
&НаКлиенте
Функция СтруктураИнструкцийПрепроцессораПоУмолчанию() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Клиент", Истина);
	Результат.Вставить("Сервер", Истина);
	Результат.Вставить("ТонкийКлиент", Истина);
	Результат.Вставить("ВебКлиент", Истина);
	Результат.Вставить("МобильныйАвтономныйСервер", Истина);
	Результат.Вставить("МобильноеПриложениеКлиент", Истина);
	Результат.Вставить("МобильноеПриложениеСервер", Истина);
	Результат.Вставить("МобильныйКлиент", Истина);
	Результат.Вставить("ТолстыйКлиентОбычноеПриложение", Истина);
	Результат.Вставить("ТолстыйКлиентУправляемоеПриложение", Истина);
	Результат.Вставить("ВнешнееСоединение", Истина);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Выгрузка

&НаКлиенте
Процедура ВыгрузитьОбъектКонфигурации(СтрокаОбъектКонфигурации)
	Если СтрокаОбъектКонфигурации.Тип = РазделыМетаданных().Справочник Тогда
		ВыгрузитьСправочник(СтрокаОбъектКонфигурации);
		Возврат;
	КонецЕсли;
	
	Если СтрокаОбъектКонфигурации.Тип = РазделыМетаданных().Перечисление Тогда
		ВыгрузитьПеречисление(СтрокаОбъектКонфигурации);
		Возврат;
	КонецЕсли;
	
	Если СтрокаОбъектКонфигурации.Тип = РазделыМетаданных().Документ Тогда
		ВыгрузитьДокумент(СтрокаОбъектКонфигурации);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлыКонфигурации()
	Для Каждого КлючЗначение Из мФайлыКонфигурацииВРаботе Цикл
		Значение = КлючЗначение.Значение;
		ИмяФайла = КлючЗначение.Ключ;
		Если НЕ Значение.ДляЗаписи Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураИмяФайла = СлужебныеФункции().РазложитьПолноеИмяФайла(ИмяФайла);
		СоздатьКаталог(СтруктураИмяФайла.Путь);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайла); // BSLLS:ExternalAppStarting-off
		
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(Значение.ДокументDOM, ЗаписьXML);
		
		ЗаписьXML.Закрыть();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьМодулиКонфигурации()
	Для Каждого КлючЗначение Из мМодулиКонфигурацииВРаботе Цикл
		СтрокаМодуля = КлючЗначение.Ключ;
		СтруктураМодуля = СтрокаМодуля.Данные.СтруктураМодуля;
		
		ИмяФайла = КлючЗначение.Значение;
		СтруктураИмяФайла = СлужебныеФункции().РазложитьПолноеИмяФайла(ИмяФайла);
		СоздатьКаталог(СтруктураИмяФайла.Путь);
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(СтруктураМодуля.Текст);
		ТекстовыйДокумент.Записать(ИмяФайла);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьАттрибуты()
	ДокументDOM = ОткрытьФайлКонфигурации(ПолучитьПутьКФайлуКонфигурации(Ложь), Ложь);
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	
	Для Каждого Аттрибут Из УзелMetaDataObject.Атрибуты Цикл
		
		Если Аттрибут.Имя = "version" Тогда
			мКэшПространствИмен.ВерсияXML = Аттрибут.Значение;
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Аттрибут.Префикс) Тогда
			Продолжить;
		КонецЕсли;
		
		мКэшПространствИмен.АттрибутыОбщие.Вставить(Аттрибут.ЛокальноеИмя, Аттрибут.Значение);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОткрытьФайлКонфигурации(ИмяФайла, ДляЗаписи) 
	Результат = Неопределено;
	Если мФайлыКонфигурацииВРаботе <> Неопределено Тогда
		Результат = мФайлыКонфигурацииВРаботе.Получить(ИмяФайла);
	КонецЕсли;
	
	
	Если Результат <> Неопределено Тогда
		Результат.ДляЗаписи = Результат.ДляЗаписи ИЛИ ДляЗаписи;
		Возврат Результат.ДокументDOM;
	КонецЕсли;
	
	ФайлСуществует = СлужебныеФункции().ФайлСуществует(ИмяФайла);
	
	Результат = Новый Структура("ДокументDOM, ДляЗаписи", Неопределено, ДляЗаписи);
	
	Если ФайлСуществует Тогда
		Результат.ДокументDOM = ПрочитатьФайлКонфигурации(ИмяФайла);
	Иначе
		Если НЕ ДляЗаписи Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В выгрузке не найден файл: %1'"), ИмяФайла);;
		КонецЕсли;
		Результат.ДокументDOM = Новый ДокументDOM;
	КонецЕсли;

	Если мФайлыКонфигурацииВРаботе <> Неопределено Тогда
		мФайлыКонфигурацииВРаботе.Вставить(ИмяФайла, Результат);
	КонецЕсли;
	
	Возврат Результат.ДокументDOM;
КонецФункции

&НаКлиенте
Функция ПрочитатьФайлКонфигурации(ИмяФайла)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла); // BSLLS:ExternalAppStarting-off
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
КонецФункции

&НаКлиенте
Функция ПолучитьДеревоКонфигурации(ЭтоРасширение)
	Результат = Новый Структура;              
	
	ДокументDOM = ОткрытьФайлКонфигурации(ПолучитьПутьКФайлуКонфигурации(ЭтоРасширение), Ложь);
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	УзелConfiguration = УзелMetaDataObject.ПервыйДочерний;
	МассивУзлыChildObjects = УзелConfiguration.ПолучитьЭлементыПоИмени("ChildObjects"); 
	УзлыChildObjects = МассивУзлыChildObjects[0].ДочерниеУзлы;
	
	Для Каждого УзелChildObjects Из УзлыChildObjects Цикл
		ИмяРазделаВнутр = УзелChildObjects.ИмяУзла; 
		
		ОписаниеРаздела = УправлениеСвойствами().ПолучитьРазделМетаданныхПоВнутреннемуИмени(ИмяРазделаВнутр);
		Если ОписаниеРаздела = Неопределено ИЛИ НЕ ОписаниеРаздела.ДоступенКакОсновнойОбъект Тогда
			Продолжить;
		КонецЕсли;
		ИмяРаздела = ОписаниеРаздела.Имя;
		
		Если НЕ Результат.Свойство(ИмяРаздела) Тогда
			МассивОбъектов = Новый Массив;
			Результат.Вставить(ИмяРаздела, МассивОбъектов);
		Иначе
			МассивОбъектов = Результат[ИмяРаздела];
		КонецЕсли;     
		
		ИмяОбъекта = УзелChildObjects.ПоследнийДочерний.ЗначениеУзла;
		
		МассивОбъектов.Добавить(Новый Структура("Имя", ИмяОбъекта));
	КонецЦикла;
	
   	Возврат Результат;
КонецФункции

#Область ДеревоИзменений

&НаКлиенте
Функция ЭтоРеквизитТабличнаяЧасть(Тип)
	Возврат Тип = ТипыСтрокДереваИзменений().РеквизитДеревоЗначений
		ИЛИ Тип = ТипыСтрокДереваИзменений().РеквизитТаблицаЗначений;
КонецФункции

&НаКлиенте
Функция ПолучитьОтражениеТабличнойЧастиОбъектаНаФорме(СтрокаФорма, СтрокаТабличнаяЧасть)
	ИДТабличнойЧасти = СтрокаТабличнаяЧасть.ПолучитьИдентификатор();
	СтрокаРеквизитыФормы = ДеревоИзменений.НайтиПоИдентификатору(СтрокаФорма.Данные.Реквизиты);
	
	СтрокиРеквизиты = СтрокаРеквизитыФормы.ПолучитьЭлементы();
	
	СтрокаОбъект = Неопределено;
	Для Каждого СтрокаРеквизит Из СтрокиРеквизиты Цикл
		Если СтрокаРеквизит.Данные.ОсновнойРеквизит Тогда
			СтрокаОбъект = СтрокаРеквизит;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаРеквизитыОбъекта = СтрокаОбъект.ПолучитьЭлементы();
	
	Для Каждого СтрокаРеквизитОбъекта Из СтрокаРеквизитыОбъекта Цикл
		Если СтрокаРеквизитОбъекта.Данные.ТабличнаяЧасть = ИДТабличнойЧасти Тогда
			Возврат СтрокаРеквизитОбъекта;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаТабличнаяЧасть = ДобавитьСтрокуВДеревоИзменений(
			СтрокаОбъект,
			ТипыСтрокДереваИзменений().ОтражениеТабличнойЧасти,
			СтрокаТабличнаяЧасть.Имя,
			Ложь);
	СтрокаТабличнаяЧасть.Данные.ТабличнаяЧасть = ИДТабличнойЧасти;
	
	Возврат СтрокаТабличнаяЧасть;
КонецФункции

&НаКлиенте
Функция ТипыСтрокДереваИзменений()
	Результат = Новый Структура;
	
	ОписаниеТипов = ПолучитьОписаниеТиповСтрокДереваИзменений();
	Для Каждого КлючЗначение Из ОписаниеТипов Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Ключ);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеТиповСтрокДереваИзменений()
	КонстантаРеквизитФормы = "СохраняемыеДанные,ОсновнойРеквизит,ОписаниеТипов";
	НаборДляМодуля = "СтруктураМодуля";
	НаборСвойствФормы = "Реквизиты,Элементы,НаборСвойств,УИД,МодульФормы,ОбработчикиСобытий,НаборСвойствВнутренний";
	
	Результат = Новый Структура;
	
	Результат.Вставить("Формы",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Форма, НСтр("ru = 'Формы'")));
	
	Результат.Вставить("Реквизиты",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, НСтр("ru = 'Реквизиты'")));
	
	Результат.Вставить("Элементы",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.ОформлениеДефисЖелтый, НСтр("ru = 'Элементы'"), "Элементы"));
	
	Результат.Вставить("Форма",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Форма, , НаборСвойствФормы));
	
	Результат.Вставить("Реквизит",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , "ОписаниеТипов,УИД"));
	
	Результат.Вставить("РеквизитТаблицаЗначений",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , "УИД"));
	
	Результат.Вставить("РеквизитДеревоЗначений",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , "УИД"));
	
	Результат.Вставить("РеквизитыФормы",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, НСтр("ru = 'Реквизиты'")));
	
	Результат.Вставить("ОтражениеТабличнойЧасти",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , "ТабличнаяЧасть"));
	
	Результат.Вставить("РеквизитФормы",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , КонстантаРеквизитФормы));
	
	Результат.Вставить("РеквизитФормыТаблицаЗначений",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , КонстантаРеквизитФормы));
	
	Результат.Вставить("РеквизитФормыДеревоЗначений",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , КонстантаРеквизитФормы));
	
	Результат.Вставить("МодульФормы",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.РежимПросмотраСпискаСписок, НСтр("ru = 'Модуль'"), НаборДляМодуля));
	
	Результат.Вставить("МодульМенеджера",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.РежимПросмотраСпискаСписок, НСтр("ru = 'Модуль менеджера'"), НаборДляМодуля));
	
	Результат.Вставить("МодульОбъекта",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.РежимПросмотраСпискаСписок, НСтр("ru = 'Модуль объекта'"), НаборДляМодуля));
	
	Результат.Вставить("ОбщийМодуль",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.РежимПросмотраСпискаСписок, , "УИД,НаборСвойств,СтруктураМодуля"));
	
	Результат.Вставить("Элемент",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.ОформлениеДефисЖелтый, , "НаборСвойств,ТипЭлемента,ВидЭлемента,ТипЭлементаВнутренний"));
	
	Результат.Вставить("Значения",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Ресурс, НСтр("ru = 'Значения'")));
	
	Результат.Вставить("Значение",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Ресурс, , "УИД,НаборСвойств"));
	
	Для Каждого Раздел Из ПолучитьОписаниеРазделовМетаданных() Цикл
		
		Результат.Вставить(Раздел.Имя,
			СоздатьОписаниеТипСтрокиДереваИзменений(Раздел.Картинка, Раздел.Представление, "Реквизиты,Формы,УИД,НаборСвойств,МодульОбъекта,МодульМенеджера,Значения"));
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СоздатьОписаниеТипСтрокиДереваИзменений(Картинка, Имя = Неопределено, Данные = Неопределено)
	Результат = Новый Структура;
	Результат.Вставить("Картинка", Картинка);
	Результат.Вставить("Имя", Имя);
	Результат.Вставить("Данные", Данные);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуВДеревоИзменений(СтрокаРодитель, Тип, Имя = Неопределено, ЭтоНовый = Ложь)
	Результат = СтрокаРодитель.ПолучитьЭлементы().Добавить();
	Результат.Тип = Тип;
	
	Описание = ПолучитьОписаниеТиповСтрокДереваИзменений()[Тип];
	
	Результат.Имя = ?(Имя = Неопределено, Описание.Имя, Имя);;
	Результат.Картинка = Описание.Картинка;
	
	Результат.ЭтоНовый = ЭтоНовый;
	
	Если Описание.Данные <> Неопределено Тогда
		Результат.Данные = Новый Структура;
		МассивКлючей = СтрРазделить(Описание.Данные, ",");
		Для Каждого Ключ Из МассивКлючей Цикл
			Результат.Данные.Вставить(СокрЛП(Ключ));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СоздатьПолучитьРазделВДеревеИзменений(Тип)
	Если мЭлементыДереваРазделы.Свойство(Тип) Тогда
		Возврат мЭлементыДереваРазделы[Тип];
	КонецЕсли;
	
	СтрокаРаздел = ДобавитьСтрокуВДеревоИзменений(
			ДеревоИзменений,
			Тип);
	
	мЭлементыДереваРазделы.Вставить(Тип, СтрокаРаздел);
	
	Возврат СтрокаРаздел;
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементДереваИзмененийПоИмени(ЭлементРодитель, Имя)
	Подэлементы = ЭлементРодитель.ПолучитьЭлементы();
	Для Каждого Элемент Из Подэлементы Цикл
		Если Элемент.Имя = Имя Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДеревоИзменений()
	мФайлыКонфигурацииВРаботе = Новый Соответствие;
	мМодулиКонфигурацииВРаботе = Новый Соответствие;
	мЭлементыДереваРазделы = Новый Структура;
	
	ДеревоИзменений.ПолучитьЭлементы().Очистить();
	
	СтрокаОбъект = СоздатьПолучитьОбъектКонфигурации(ТипОсновногоОбъекта, ИмяОсновногоОбъекта);
	мОсновнойОбъект = СтрокаОбъект;
	
	СтрокаФорма = ДобавитьФормуВДеревоИзменений(СтрокаОбъект, Параметры.СхемыФормы.СхемаЭлементы);
	мОсновнаяФорма = СтрокаФорма;
	
	УстановитьСвойствоОбъектаКонфигурации(СтрокаОбъект, ТипыФорм().ОсновнаяФормаОбъекта, СтрокаФорма);
	
	ЗаполнитьРеквизиты(СтрокаОбъект, СтрокаФорма);
	
	ВыполнитьСкрипты();
	
	ЗаполнитьНовыеТипыИзРеквизитов();
	
	СформироватьТекстыМодулей();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНовыеТипыИзРеквизитов();
	Для Каждого КлючЗначениеРазделы Из Параметры.СхемыФормы.СхемаМетаданные Цикл
		ИмяРаздела = КлючЗначениеРазделы.Ключ;
		ОбъектыРаздела = КлючЗначениеРазделы.Значение;
		Для Каждого КлючЗначениеРаздел Из ОбъектыРаздела Цикл
			Если ЕстьОбъектКонфигурации(ИмяРаздела, КлючЗначениеРаздел.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			НовыйОбъектКонфигурации = СоздатьПолучитьОбъектКонфигурации(ИмяРаздела, КлючЗначениеРаздел.Ключ);
			
			Данные = КлючЗначениеРаздел.Значение;
			Для Каждого Значение Из Данные.Значения Цикл
				СоздатьЗначениеОбъектаКонфигурации(НовыйОбъектКонфигурации, Значение);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизиты(СтрокаОбъект, СтрокаФорма)
	Для Каждого СхемаРеквизита Из Параметры.СхемыФормы.СхемаРеквизиты Цикл
		Если СхемаРеквизита.ЭтоРеквизитФормы Тогда
			СтрокаРеквизит = СоздатьРеквизитФормы(СтрокаФорма, СхемаРеквизита.Имя, СхемаРеквизита.ОписаниеТипов);
			Для Каждого СхемаПодчиненногоРеквизита Из СхемаРеквизита.Подчиненные Цикл
				СоздатьРеквизитФормы(СтрокаОбъект, СхемаПодчиненногоРеквизита.Имя, СхемаПодчиненногоРеквизита.ОписаниеТипов, СтрокаРеквизит);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Если ЭтоСтандартныйРеквизит(СтрокаОбъект.Тип, СхемаРеквизита.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизит = СоздатьПолучитьРеквизитОбъектаКонфигурации(СтрокаОбъект, СхемаРеквизита.Имя, СхемаРеквизита.ОписаниеТипов);
		
		Для Каждого СхемаПодчиненногоРеквизита Из СхемаРеквизита.Подчиненные Цикл
			Если СхемаПодчиненногоРеквизита.ЭтоРеквизитФормы Тогда
				СоздатьРеквизитФормы(СтрокаФорма, СхемаПодчиненногоРеквизита.Имя, СхемаПодчиненногоРеквизита.ОписаниеТипов, СтрокаРеквизит);
			Иначе
				СоздатьПолучитьРеквизитОбъектаКонфигурации(СтрокаОбъект, СхемаПодчиненногоРеквизита.Имя, СхемаПодчиненногоРеквизита.ОписаниеТипов, СтрокаРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкрипты()
	Для Каждого СтрокаСкрипт Из ТаблицаСкриптов Цикл
		Выполнить(СтрокаСкрипт.Текст);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстыМодулей()
	Для Каждого КлючЗначение Из мМодулиКонфигурацииВРаботе Цикл
		СформироватьТекстМодуля(КлючЗначение.Ключ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеРазделовМетаданных()
	Возврат УправлениеСвойствами().ПолучитьОписаниеРазделовМетаданных();
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыРазделаМетаданных()
	Возврат Новый Структура("Имя,Представление,ОсновнаяФорма,ВнутреннееИмя,ВнутреннееИмяМнож,Картинка");
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЭлементыФормы(СтрокаОбъект, СхемыЭлементов, СтрокаРодитель)
	Для Каждого СхемаЭлемента Из СхемыЭлементов Цикл
		ДобавитьЭлементВДеревоИзмененийРекурсивно(СтрокаОбъект, СхемаЭлемента, СтрокаРодитель);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТипВидЭлемента(ТипЭлемента, ВидЭлемента)
	ЭтоЭлементСВидом = (ТипЭлемента = "ПолеФормы" ИЛИ ТипЭлемента = "ГруппаФормы" ИЛИ ТипЭлемента = "ДекорацияФормы") И ВидЭлемента <> Неопределено;
	
	Если ЭтоЭлементСВидом Тогда
		Возврат ВидЭлемента;
	КонецЕсли;
	
	Возврат ТипЭлемента;
КонецФункции

&НаКлиенте
Функция ПолучитьВидЭлемента(СхемаЭлемента)
	ОписаниеВида = Неопределено;
	СхемаЭлемента.НаборСвойств.Свойство("Вид", ОписаниеВида);
	Если ОписаниеВида = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеВида.Значение;
КонецФункции

&НаКлиенте
Функция ДобавитьФормуВДеревоИзменений(СтрокаОбъект, СхемаЭлемента)
	ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(ТипОсновногоОбъекта);
	СтрокаФорма = СоздатьФорму(СтрокаОбъект, ОписаниеРаздела.ОсновнаяФорма);
	
	РеквизитОбъект = СоздатьРеквизитФормы(СтрокаФорма, "Объект", СоздатьОписаниеТипов(ТипОсновногоОбъекта + "Объект." + СтрокаОбъект.Имя));
	РеквизитОбъект.Данные.ОсновнойРеквизит = Истина;
	
	Если СхемаЭлемента.Свойство("ПодчиненныеЭлементы") Тогда
		ЗаполнитьЭлементыФормы(СтрокаОбъект, СхемаЭлемента.ПодчиненныеЭлементы, СтрокаФорма);
	КонецЕсли;
	
	Возврат СтрокаФорма;
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементВДеревоИзмененийРекурсивно(СтрокаОбъект, СхемаЭлемента, СтрокаРодитель)
	СтрокаЭлемент = СоздатьЭлементФормы(
			СтрокаРодитель,
			СхемаЭлемента.Имя,
			СхемаЭлемента.Тип,
			ПолучитьВидЭлемента(СхемаЭлемента));
	
	ЗаполнитьНаборСвойств(СтрокаЭлемент, СхемаЭлемента);
	
	Если НЕ СхемаЭлемента.Свойство("ПодчиненныеЭлементы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЭлементыФормы(СтрокаОбъект, СхемаЭлемента.ПодчиненныеЭлементы, СтрокаЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборСвойств(СтрокаЭлемент, СхемаЭлемента)
	Для Каждого КлючЗначение Из СхемаЭлемента.НаборСвойств Цикл
		Если КлючЗначение.Ключ = "Вид" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрЗначение = КлючЗначение.Значение;
		
		Значение = СтрЗначение.Значение;
		
		Если ТипыСистемныеПеречисления().Свойство(СтрЗначение.Тип) Тогда
			Тип = СтрЗначение.Тип;
		ИначеЕсли СтрЗначение.ЭтоСистемноеПеречисление Тогда
			Тип = ТипыСистемныеПеречисления().СистемноеПеречисление;
		Иначе
			Тип = Неопределено;
		КонецЕсли;
		
		УстановитьСвойствоЭлементаФормы(СтрокаЭлемент, КлючЗначение.Ключ, Значение, Тип);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбъектПоСтрокеФормы(СтрокаДерева)
	ТекущаяСтрока = СтрокаДерева;
	Пока НЕ РазделыМетаданных().Свойство(ТекущаяСтрока.Тип) Цикл
		ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат ТекущаяСтрока;
КонецФункции

&НаКлиенте
Функция ПолучитьФормуПоСтрокеДереваИзменений(СтрокаДерева)
	ТекущаяСтрока = СтрокаДерева;
	Пока ТекущаяСтрока.Тип <> ТипыСтрокДереваИзменений().Форма Цикл
		ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат ТекущаяСтрока;
КонецФункции

#КонецОбласти

#Область ВыгрузкаОбъекта

#Область Перечисления

&НаКлиенте
Процедура ВыгрузитьПеречисление(СтрокаОбъектКонфигурации)
	Если СтрокаОбъектКонфигурации.ЭтоНовый Тогда
		ВыгрузитьОбъектПеречисление(СтрокаОбъектКонфигурации);
		ВыгрузитьОбъектВConfiguration(СтрокаОбъектКонфигурации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбъектПеречисление(СтрокаОбъектКонфигурации)
	ИмяПеречисления = СтрокаОбъектКонфигурации.Имя;
	
	ИмяФайла = ПолучитьПутьКФайлуОбъекта(СтрокаОбъектКонфигурации.Тип, СтрокаОбъектКонфигурации.Имя, ВыгружатьВРасширение);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	УзелMetaDataObject = ВыгрузитьУзелMetaDataObject(ДокументDOM);
	
	УзелEnum = ВыгрузитьДочернийУзел(ДокументDOM, УзелMetaDataObject, "Enum");
	УзелEnum.УстановитьАтрибут("uuid", XMLСтрока(СтрокаОбъектКонфигурации.Данные.УИД));
	
	Категории = СтрРазделить("Ref,Manager,List", ",");
	МассивУзловInternalInfo = Новый Массив;
	Для Каждого Катогория Из Категории Цикл
		МассивУзловInternalInfo.Добавить(Новый Структура("name, category", СтрШаблон("Enum%1.%2", Катогория, ИмяПеречисления), Катогория));
	КонецЦикла;
	
	ДобавитьУзелыInternalInfo(ДокументDOM, УзелEnum, МассивУзловInternalInfo);
	
	УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелEnum, "Properties");
	ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ИмяПеречисления);
	
	УзелChildObjects = ВыгрузитьДочернийУзел(ДокументDOM, УзелEnum, "ChildObjects");
	
	Если НЕ ЗначениеЗаполнено(СтрокаОбъектКонфигурации.Данные.Значения) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыЗначения = ДеревоИзменений.НайтиПоИдентификатору(СтрокаОбъектКонфигурации.Данные.Значения);
	ЭлементыЗначения = ЭлементыЗначения.ПолучитьЭлементы();
	Для Каждого ЭлементЗначение Из ЭлементыЗначения Цикл
		УзелEnumValue = ВыгрузитьДочернийУзел(ДокументDOM, УзелChildObjects, "EnumValue");
		УзелEnumValue.УстановитьАтрибут("uuid", XMLСтрока(ЭлементЗначение.Данные.УИД));
		УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелEnumValue, "Properties");
		ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ЭлементЗначение.Имя);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗначениеПеречисления(ПараметрыВыполнения, ДокументDOM, УзелChildObjects)
	
КонецПроцедуры

#КонецОбласти

#Область Справочники

&НаКлиенте
Процедура ВыгрузитьСправочник(СтрокаОбъектКонфигурации)
	Если СтрокаОбъектКонфигурации.ЭтоНовый Тогда
		ВыгрузитьОбъектСправочник(СтрокаОбъектКонфигурации);
		ВыгрузитьОбъектВConfiguration(СтрокаОбъектКонфигурации);
	КонецЕсли;
	
	Если СтрокаОбъектКонфигурации.Данные.Реквизиты <> Неопределено Тогда
		СтрокаРеквизиты = ДеревоИзменений.НайтиПоИдентификатору(СтрокаОбъектКонфигурации.Данные.Реквизиты);
		ВыгрузитьРеквизитыОбъектаКонфигурации(СтрокаОбъектКонфигурации, СтрокаРеквизиты.ПолучитьЭлементы());
	КонецЕсли;
	
	Если СтрокаОбъектКонфигурации.Данные.Формы <> Неопределено Тогда
		СтрокаФормы = ДеревоИзменений.НайтиПоИдентификатору(СтрокаОбъектКонфигурации.Данные.Формы);
		ВыгрузитьФормы(СтрокаОбъектКонфигурации, СтрокаФормы.ПолучитьЭлементы());
	КонецЕсли;
	
	ВыгрузитьСвойстваОбъектаКонфигурации(СтрокаОбъектКонфигурации);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбъектСправочник(СтрокаОбъектКонфигурации)
	ИмяСправочника = СтрокаОбъектКонфигурации.Имя;
	
	ИмяФайла = ПолучитьПутьКФайлуОбъекта(СтрокаОбъектКонфигурации.Тип, СтрокаОбъектКонфигурации.Имя, ВыгружатьВРасширение);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	УзелMetaDataObject = ВыгрузитьУзелMetaDataObject(ДокументDOM);
	
	УзелCatalog = ВыгрузитьДочернийУзел(ДокументDOM, УзелMetaDataObject, "Catalog");
	УзелCatalog.УстановитьАтрибут("uuid", XMLСтрока(СтрокаОбъектКонфигурации.Данные.УИД));
	
	Категории = СтрРазделить("Object,Ref,Selection,Manager,List", ",");
	МассивУзловInternalInfo = Новый Массив;
	Для Каждого Катогория Из Категории Цикл
		МассивУзловInternalInfo.Добавить(Новый Структура("name,category", СтрШаблон("Catalog%1.%2", Катогория, ИмяСправочника), Катогория));
	КонецЦикла;
	
	ДобавитьУзелыInternalInfo(ДокументDOM, УзелCatalog, МассивУзловInternalInfo);
	
	УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелCatalog, "Properties");
	ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ИмяСправочника);
	Для Каждого КлючЗначение Из СтрокаОбъектКонфигурации.Данные.НаборСвойств Цикл
		ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	ВыгрузитьДочернийУзел(ДокументDOM, УзелCatalog, "ChildObjects");
КонецПроцедуры

#КонецОбласти

#Область Документы

&НаКлиенте
Процедура ВыгрузитьДокумент(СтрокаОбъектКонфигурации)
	Если СтрокаОбъектКонфигурации.ЭтоНовый Тогда
		ВыгрузитьОбъектДокумент(СтрокаОбъектКонфигурации);
		ВыгрузитьОбъектВConfiguration(СтрокаОбъектКонфигурации);
	КонецЕсли;
	
	Если СтрокаОбъектКонфигурации.Данные.Реквизиты <> Неопределено Тогда
		СтрокаРеквизиты = ДеревоИзменений.НайтиПоИдентификатору(СтрокаОбъектКонфигурации.Данные.Реквизиты);
		ВыгрузитьРеквизитыОбъектаКонфигурации(СтрокаОбъектКонфигурации, СтрокаРеквизиты.ПолучитьЭлементы());
	КонецЕсли;
	
	Если СтрокаОбъектКонфигурации.Данные.Формы <> Неопределено Тогда
		СтрокаФормы = ДеревоИзменений.НайтиПоИдентификатору(СтрокаОбъектКонфигурации.Данные.Формы);
		ВыгрузитьФормы(СтрокаОбъектКонфигурации, СтрокаФормы.ПолучитьЭлементы());
	КонецЕсли;
	
	ВыгрузитьСвойстваОбъектаКонфигурации(СтрокаОбъектКонфигурации);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбъектДокумент(СтрокаОбъектКонфигурации)
	ИмяСправочника = СтрокаОбъектКонфигурации.Имя;
	
	ИмяФайла = ПолучитьПутьКФайлуОбъекта(СтрокаОбъектКонфигурации.Тип, СтрокаОбъектКонфигурации.Имя, ВыгружатьВРасширение);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	УзелMetaDataObject = ВыгрузитьУзелMetaDataObject(ДокументDOM);
	
	УзелCatalog = ВыгрузитьДочернийУзел(ДокументDOM, УзелMetaDataObject, "Document");
	УзелCatalog.УстановитьАтрибут("uuid", XMLСтрока(СтрокаОбъектКонфигурации.Данные.УИД));
	
	Категории = СтрРазделить("Object,Ref,Selection,Manager,List", ",");
	МассивУзловInternalInfo = Новый Массив;
	Для Каждого Катогория Из Категории Цикл
		МассивУзловInternalInfo.Добавить(Новый Структура("name,category", СтрШаблон("Document%1.%2", Катогория, ИмяСправочника), Катогория));
	КонецЦикла;
	
	ДобавитьУзелыInternalInfo(ДокументDOM, УзелCatalog, МассивУзловInternalInfo);
	
	УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелCatalog, "Properties");
	ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ИмяСправочника);
	Для Каждого КлючЗначение Из СтрокаОбъектКонфигурации.Данные.НаборСвойств Цикл
		ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	ВыгрузитьДочернийУзел(ДокументDOM, УзелCatalog, "ChildObjects");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыгрузитьОбъектВConfiguration(СтрокаОбъектКонфигурации)
	ДокументDOM = ОткрытьФайлКонфигурации(ПолучитьПутьКФайлуКонфигурации(ВыгружатьВРасширение), Истина);
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	УзелConfiguration = УзелMetaDataObject.ПервыйДочерний;
	
	МассивУзлыChildObjects = УзелConfiguration.ПолучитьЭлементыПоИмени("ChildObjects");
	УзелChildObjects = МассивУзлыChildObjects[0];
	
	Раздел = ПолучитьРазделМетаданныхПоИмени(СтрокаОбъектКонфигурации.Тип);
	
	ВыгрузитьДочернийУзел(ДокументDOM, УзелChildObjects, Раздел.ВнутреннееИмя, СтрокаОбъектКонфигурации.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСвойстваОбъектаКонфигурации(СтрокаОбъектКонфигурации)
	ИмяФайла = ПолучитьПутьКФайлуОбъекта(СтрокаОбъектКонфигурации.Тип, СтрокаОбъектКонфигурации.Имя, ВыгружатьВРасширение);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	УзелОбъект = УзелMetaDataObject.ПервыйДочерний;
	
	УзелProperties = УзелОбъект.ПолучитьЭлементыПоИмени("Properties")[0];
	
	НаборСвойств = СтрокаОбъектКонфигурации.Данные.НаборСвойств;
	Для Каждого КлючЗначение Из НаборСвойств Цикл
		МассивУзлов = УзелProperties.ПолучитьЭлементыПоИмени(КлючЗначение.Ключ);
		Если МассивУзлов.Количество() = 0 Тогда
			ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, КлючЗначение.Ключ, КлючЗначение.Значение);
			Продолжить;
		КонецЕсли;
		
		УзелСвойство = МассивУзлов[0];
		УзелСвойство.ТекстовоеСодержимое = КлючЗначение.Значение;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеквизитыОбъектаКонфигурации(СтрокаОбъектКонфигурации, СтрокиРеквизиты)
	ИмяФайла = ПолучитьПутьКФайлуОбъекта(СтрокаОбъектКонфигурации.Тип, СтрокаОбъектКонфигурации.Имя, ВыгружатьВРасширение);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	УзелОбъект = УзелMetaDataObject.ПервыйДочерний;
	
	МассивУзлыChildObjects = УзелОбъект.ПолучитьЭлементыПоИмени("ChildObjects");
	УзелChildObjects = МассивУзлыChildObjects[0];
	
	Для Каждого СтрокаДеревоРеквизиты Из СтрокиРеквизиты Цикл
		Если ЭтоРеквизитТабличнаяЧасть(СтрокаДеревоРеквизиты.Тип) Тогда
			ВыгрузитьТабличнуюЧастьОбъекта(ДокументDOM, УзелChildObjects, СтрокаДеревоРеквизиты);
			Продолжить;
		КонецЕсли;
		
		ВыгрузитьРеквизитОбъекта(ДокументDOM, УзелChildObjects, СтрокаДеревоРеквизиты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеквизитОбъекта(ДокументDOM, УзелРодитель, СтрокаДеревоРеквизиты)
	Если НЕ СтрокаДеревоРеквизиты.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	УзелЭлемента = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "Attribute");
	УзелЭлемента.УстановитьАтрибут("uuid", XMLСтрока(СтрокаДеревоРеквизиты.Данные.УИД));
	
	УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелЭлемента, "Properties");
	
	УзелName = ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name");
	УзелName.ТекстовоеСодержимое = СтрокаДеревоРеквизиты.Имя;
	
	ВыгрузитьОписаниеТипов(ДокументDOM, УзелProperties, СтрокаДеревоРеквизиты.Данные.ОписаниеТипов);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТабличнуюЧастьОбъекта(ДокументDOM, УзелРодитель, СтрокаТабличнаяЧасть)
	Если СтрокаТабличнаяЧасть.ЭтоНовый Тогда
		УзелTabularSection = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "TabularSection");
		УзелTabularSection.УстановитьАтрибут("uuid", XMLСтрока(СтрокаТабличнаяЧасть.Данные.УИД));
		
		ВыгрузитьУзелInternalInfoВФайлОбъекта(мКэшПространствИмен, ДокументDOM, УзелTabularSection, СтрокаТабличнаяЧасть.Имя);
		
		УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелTabularSection, "Properties");
		
		УзелName = ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name");
		УзелName.ТекстовоеСодержимое = СтрокаТабличнаяЧасть.Имя;
		
		УзелChildObjects = ВыгрузитьДочернийУзел(ДокументDOM, УзелTabularSection, "ChildObjects");
	Иначе
		УзелChildObjects = ПолучитьУзелTabularSectionChildObjects(ДокументDOM, СтрокаТабличнаяЧасть.Имя);
	КонецЕсли;
	
	Подчинененные = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
	Для Каждого Подчиненный Из Подчинененные Цикл
		ВыгрузитьРеквизитОбъекта(ДокументDOM, УзелChildObjects, Подчиненный);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУзелTabularSectionChildObjects(ДокументDOM, ИмяТабличнойЧасти)
	ШаблонЗапроса =
		"//*[local-name()='TabularSection'][*[local-name()='Properties']/
		|*[local-name()='Name' and .='%1']]/
		|*[local-name()='ChildObjects']";
	ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ИмяТабличнойЧасти);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	Выражение = ДокументDOM.СоздатьВыражениеXPath(ТекстЗапроса, Разыменователь);
	Результат = Выражение.Вычислить(ДокументDOM, ТипРезультатаDOMXPath.ЛюбойНеупорядоченныйУзел);
	
	Возврат Результат.ОдиночныйУзелЗначение;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьУзелКартинка(ДокументDOM, УзелPicture, Картинка)
	ВыгрузитьДочернийУзел(ДокументDOM, УзелPicture, "xr:Ref", Картинка);
	ВыгрузитьДочернийУзел(ДокументDOM, УзелPicture, "xr:LoadTransparent", "true");
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОписаниеТипов(ДокументDOM, УзелРодитель, ОписаниеТипов)
	Если ОписаниеТипов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелType = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "Type");
	
	Для Каждого ТекТип Из ОписаниеТипов.Типы Цикл
		ПредставлениеТип = ПолучитьПредставлениеТипа(ТекТип);
		Если ПредставлениеТип = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ВыгрузитьДочернийУзел(ДокументDOM, УзелType, "v8:Type", ПолучитьПредставлениеТипа(ТекТип));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеТипа(Знач ТекТип)
	Если СтрНачинаетсяС(ТекТип, "Справочник.") Тогда
		Возврат СтрЗаменить(ТекТип, "Справочник.", "cfg:CatalogRef.");
	КонецЕсли;
	
	Если СтрНачинаетсяС(ТекТип, "Документ.") Тогда
		Возврат СтрЗаменить(ТекТип, "Документ.", "cfg:DocumentRef.");
	КонецЕсли;
	
	Если СтрНачинаетсяС(ТекТип, "ДокументОбъект.") Тогда
		Возврат СтрЗаменить(ТекТип, "ДокументОбъект.", "cfg:DocumentObject.");
	КонецЕсли;
	
	Если СтрНачинаетсяС(ТекТип, "СправочникОбъект.") Тогда
		Возврат СтрЗаменить(ТекТип, "СправочникОбъект.", "cfg:CatalogObject.");
	КонецЕсли;
	
	Если СтрНачинаетсяС(ТекТип, "Перечисление.") Тогда
		Возврат СтрЗаменить(ТекТип, "Перечисление.", "cfg:EnumRef.");
	КонецЕсли;
	
	СтрТипы = Новый Структура;
	СтрТипы.Вставить("Строка", "xs:string");
	СтрТипы.Вставить("Булево", "xs:boolean");
	СтрТипы.Вставить("Число", "xs:decimal");
	СтрТипы.Вставить("Дата", "xs:dateTime");
	СтрТипы.Вставить("ТаблицаЗначений", "v8:ValueTable");
	СтрТипы.Вставить("ДеревоЗначений", "v8:ValueTree");
	СтрТипы.Вставить("Произвольный", Неопределено);
	
	Если СтрТипы.Свойство(ТекТип) Тогда
		Возврат СтрТипы[ТекТип];
	КонецЕсли;
	
	Возврат ТекТип;
КонецФункции

#КонецОбласти

#Область ВыгрузкаФормы

&НаКлиенте
Функция ПолучитьВнутреннийНаборСвойств(ЭлементДерева)
	ТипЭлемента = ЭлементДерева.Данные.ТипЭлемента;
	ВидЭлемента = ЭлементДерева.Данные.ВидЭлемента;
	НаборСвойств = ЭлементДерева.Данные.НаборСвойств;
	
	Результат = Новый Структура;
	
	Для Каждого КлючЗначение Из НаборСвойств Цикл
		Имя = КлючЗначение.Ключ;
		Если Имя = "СписокВыбора" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВнутреннее = ПолучитьВнутреннееИмяСвойства(ТипЭлемента, ВидЭлемента, Имя);
		Если ИмяВнутреннее = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Для свойства ""%1"" типа ""%2"" в макете ""Свойства"" не указано внутреннее название.'"),
				Имя,
				ТипЭлемента + " - " + ВидЭлемента);
		КонецЕсли;
		
		ЗначениеВнутреннее = ПолучитьВнутреннееЗначениеСвойства(ТипЭлемента, ВидЭлемента, Имя, КлючЗначение.Значение);
		
		Результат.Вставить(ИмяВнутреннее, ЗначениеВнутреннее);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееЗначениеСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства, ЗначениеСвойства)
	Значение = ЗначениеСвойства.Значение;
	ТипСвойства = ЗначениеСвойства.Тип;
	Если ТипСвойства = ТипыСистемныеПеречисления().WebЦвета Тогда
		Возврат "web:" + УправлениеСвойствами().ПолучитьВнутреннееИмяЦвета(ЗначениеСвойства.Значение);
	КонецЕсли;
	
	Если ТипСвойства = ТипыСистемныеПеречисления().СистемноеПеречисление Тогда
		Результат = ПолучитьВнутреннееЗначениеСистемногоПеречисления(ТипЭлемента, ВидЭлемента, ИмяСвойства, Значение);
		Если Результат = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Для значения ""%1"" свойства ""%2"" тип ""%3"" в макете ""Свойства"" не указано внутреннее название.'"),
				Значение,
				ИмяСвойства,
				ТипЭлемента + " - " + ВидЭлемента);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЭлемента = "КнопкаФормы" И ИмяСвойства = "ИмяКоманды" Тогда
		Возврат "Form.Command." + Значение;
	КонецЕсли;
	
	Если ТипСвойства = ТипыСистемныеПеречисления().БиблиотекаКартинок Тогда
		Возврат ПолучитьВнутреннееЗначениеКартнинки(Значение);
	КонецЕсли;
	
	Возврат XMLСтрока(Значение);
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееЗначениеКартнинки(Значение)
	СтандартныеКартинки = УправлениеСвойствами().ПолучитьСтандартныеКартинки();
	Если СтандартныеКартинки.Свойство(Значение) Тогда
		Возврат СтрШаблон("StdPicture.%1", СтандартныеКартинки[Значение]);
	КонецЕсли;
	
	Возврат СтрШаблон("CommonPicture.%1", Значение);
КонецФункции

&НаКлиенте
Функция ТипыФормВнутренний()
	Результат = Новый Структура;
	Результат.Вставить("ОсновнаяФормаГруппы", "DefaultFolderForm");
	Результат.Вставить("ОсновнаяФормаДляВыбора", "DefaultChoiceForm");
	Результат.Вставить("ОсновнаяФормаДляВыбораГруппы", "DefaultFolderChoiceForm");
	Результат.Вставить("ОсновнаяФормаОбъекта", "DefaultObjectForm");
	Результат.Вставить("ОсновнаяФормаСписка", "DefaultListForm");
	Результат.Вставить("ДополнительнаяФормаГруппы", "AuxiliaryFolderForm");
	Результат.Вставить("ДополнительнаяФормаДляВыбора", "AuxiliaryChoiceForm");
	Результат.Вставить("ДополнительнаяФормаДляВыбораГруппы", "AuxiliaryFolderChoiceForm");
	Результат.Вставить("ДополнительнаяФормаОбъекта", "AuxiliaryObjectForm");
	Результат.Вставить("ДополнительнаяФормаСписка", "AuxiliaryListForm");
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ОбработчикиСобытийЭлементовФормыВнутренний(СтрокаЭлементаФормы)
	Если СтрокаЭлементаФормы.Тип = ТипыСтрокДереваИзменений().Форма Тогда
		ТипЭлемента = "Форма";
		ВидЭлемента = "БезВида";
	Иначе
		ТипЭлемента = СтрокаЭлементаФормы.Данные.Тип;
		ВидЭлемента = СтрокаЭлементаФормы.Данные.Вид;
	КонецЕсли;
	
	Возврат УправлениеСвойствами().ПолучитьОбработчикиСобытийЭлементовФормы(
		ТипЭлемента,
		ВидЭлемента);
КонецФункции

&НаКлиенте
Процедура ВыгрузитьФормы(СтрокаОбъекта, СтрокиФормы)
	Для Каждого СтрокаФорма Из СтрокиФормы Цикл
		ВыгрузитьФорму(СтрокаОбъекта, СтрокаФорма);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФорму(СтрокаОбъекта, СтрокаФорма)
	ВыгрузитьФайлМетаданныхФормы(СтрокаОбъекта, СтрокаФорма);
	ВыгрузитьФайлФормы(СтрокаОбъекта, СтрокаФорма);
	ВыгрузитьФормуВФайлОбъекта(СтрокаОбъекта, СтрокаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлМетаданныхФормы(СтрокаОбъекта, СтрокаФорма)
	ИмяФайла = ПолучитьПутьКФайлуМетаданныхФормы(СтрокаОбъекта.Тип, СтрокаОбъекта.Имя, СтрокаФорма.Имя, ВыгружатьВРасширение);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	
	УзелMetaDataObject = ВыгрузитьУзелMetaDataObject(ДокументDOM);
	
	УзелForm = ВыгрузитьДочернийУзел(ДокументDOM, УзелMetaDataObject, "Form");
	УзелForm.УстановитьАтрибут("uuid", XMLСтрока(СтрокаФорма.Данные.УИД));
	УзелMetaDataObject.ДобавитьДочерний(УзелForm);
	
	УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "Properties");
	
	ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "FormType", "Managed");
	
	ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name", СтрокаФорма.Имя);
	
	УзелSynonym = ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Synonym");
	ВыгрузитьУзелСтрока(ДокументDOM, УзелSynonym, "Форма новая");
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлФормы(СтрокаОбъекта, СтрокаФорма)
	ПараметрыВыгрузки = СоздатьПараметрыВыгрузкиФайлаФормы();
	
	ИмяФайла = ПолучитьПутьКФайлуФормы(СтрокаОбъекта.Тип, СтрокаОбъекта.Имя, СтрокаФорма.Имя, ВыгружатьВРасширение);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	ПараметрыВыгрузки.ДокументDOM = ДокументDOM;
	ПараметрыВыгрузки.СтрокаОбъекта = СтрокаОбъекта;
	
	УзелForm = ВыгрузитьДочернийУзел(ДокументDOM, ДокументDOM, "Form");
	УзелForm.УстановитьСоответствиеПространстваИмен("", мКэшПространствИмен.АттрибутForm);
	Для Каждого КлючЗначение Из мКэшПространствИмен.АттрибутыОбщие Цикл
		УзелForm.УстановитьСоответствиеПространстваИмен(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	УзелForm.УстановитьАтрибут("version", мКэшПространствИмен.ВерсияXML);
	
	УзелCommands = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "Commands");
	
	УзелAttributes = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "Attributes");
	СтрокиРеквизиты = Новый Массив;
	Если СтрокаФорма.Данные.Реквизиты <> Неопределено Тогда
		СтрокаРеквизиты = ДеревоИзменений.НайтиПоИдентификатору(СтрокаФорма.Данные.Реквизиты);
		СтрокиРеквизиты = СтрокаРеквизиты.ПолучитьЭлементы();
	КонецЕсли;
	ВыгрузитьРеквизитыФормы(ПараметрыВыгрузки, СтрокиРеквизиты, УзелAttributes);
	
	УзелAutoCommandBar = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "AutoCommandBar");
	УзелAutoCommandBar.УстановитьАтрибут("name", "ФормаКоманднаяПанель");
	УзелAutoCommandBar.УстановитьАтрибут("id", "-1");
	
	ВыгрузитьОбработчикиСобытийФормы(ПараметрыВыгрузки, СтрокаФорма, УзелForm);
	
	УзелChildItems = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "ChildItems");
	
	Если СтрокаФорма.Данные.Элементы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаЭлементы = ДеревоИзменений.НайтиПоИдентификатору(СтрокаФорма.Данные.Элементы);
	ВыгрузитьЭлементыФормыИерархически(
		ПараметрыВыгрузки,
		СтрокаЭлементы.ПолучитьЭлементы(),
		УзелChildItems,
		УзелCommands,
		УзелAutoCommandBar);
КонецПроцедуры

&НаКлиенте
Функция СоздатьПараметрыВыгрузкиФайлаФормы()
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", 1);
	Результат.Вставить("ДокументDOM");
	Результат.Вставить("СтрокаОбъекта");
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьФормуВФайлОбъекта(СтрокаОбъекта, СтрокаФорма)
	ИмяФайла = ПолучитьПутьКФайлуОбъекта(СтрокаОбъекта.Тип, СтрокаОбъекта.Имя, ВыгружатьВРасширение);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	УзелОбъект = УзелMetaDataObject.ПервыйДочерний;
	
	МассивУзлыChildObjects = УзелОбъект.ПолучитьЭлементыПоИмени("ChildObjects");
	УзелChildObjects = МассивУзлыChildObjects[0];
	
	УзелForm = ВыгрузитьДочернийУзел(ДокументDOM, УзелChildObjects, "Form");
	УзелForm.ТекстовоеСодержимое = СтрокаФорма.Имя;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлементыФормыИерархически(ПараметрыВыгрузки, ЭлементыДерева, УзелXML, УзелCommands, УзелAutoCommandBar)
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ВыгрузитьКоманднуюПанель(ПараметрыВыгрузки, ЭлементДерева, УзелCommands, УзелAutoCommandBar) Тогда
			Продолжить;
		КонецЕсли;
		
		УзелЭлемента = ВыгрузитьДочернийУзел(
				ДокументDOM,
				УзелXML,
				ЭлементДерева.Данные.ТипЭлементаВнутренний);
		
		ВыгрузитьКомандуФормы(ПараметрыВыгрузки, ЭлементДерева, УзелCommands);
		
		УзелЭлемента.УстановитьАтрибут("name", ЭлементДерева.Имя);
		УзелЭлемента.УстановитьАтрибут("id", XMLСтрока(ПараметрыВыгрузки.Идентификатор));
		
		ПараметрыВыгрузки.Идентификатор = ПараметрыВыгрузки.Идентификатор + 1;
		
		ВыгрузитьНаборСвойствЭлементаФормы(ПараметрыВыгрузки, ДокументDOM, УзелЭлемента, ЭлементДерева);
		
		Подчиненные = ЭлементДерева.ПолучитьЭлементы();
		Если Подчиненные.Количество() > 0 Тогда
			УзелChildItems = ВыгрузитьДочернийУзел(ДокументDOM, УзелЭлемента, "ChildItems");
			ВыгрузитьЭлементыФормыИерархически(ПараметрыВыгрузки, Подчиненные, УзелChildItems, УзелCommands, УзелAutoCommandBar);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКомандуФормы(ПараметрыВыгрузки, ЭлементДерева, УзелCommands)
	Если ЭлементДерева.Тип <> "КнопкаФормы" Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	
	УзелCommand = ВыгрузитьДочернийУзел(ДокументDOM, УзелCommands, "Command");
	УзелCommand.УстановитьАтрибут("name", ЭлементДерева.Имя);
	УзелCommand.УстановитьАтрибут("id", XMLСтрока(ПараметрыВыгрузки.Идентификатор));
	ПараметрыВыгрузки.Идентификатор = ПараметрыВыгрузки.Идентификатор + 1;
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьКоманднуюПанель(ПараметрыВыгрузки, ЭлементДерева, УзелCommands, УзелAutoCommandBar)
	Если ЭлементДерева.Тип = "КнопкаФормы" Тогда
		Если ЭлементДерева.Имя = "ЗаписатьИЗакрыть" ИЛИ ЭлементДерева.Имя = "Записать" ИЛИ ЭлементДерева.Имя = "Закрыть" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементДерева.Имя <> "КоманднаяПанель" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	
	Подчиненные = ЭлементДерева.ПолучитьЭлементы();
	Если Подчиненные.Количество() > 0 Тогда
		УзелChildItems = ВыгрузитьДочернийУзел(ДокументDOM, УзелAutoCommandBar, "ChildItems");
		ВыгрузитьЭлементыФормыИерархически(ПараметрыВыгрузки, Подчиненные, УзелChildItems, УзелCommands, УзелAutoCommandBar);
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьНаборСвойствЭлементаФормы(ПараметрыВыгрузки, ДокументDOM, УзелЭлемента, ЭлементДерева)
	НаборСвойств = ПолучитьВнутреннийНаборСвойств(ЭлементДерева);
	Для Каждого КлючЗначение Из НаборСвойств Цикл
		ИмяСвойства = КлючЗначение.Ключ;
		
		УзелСвойств = ВыгрузитьДочернийУзел(ДокументDOM, УзелЭлемента, ИмяСвойства);
		
		Если КлючЗначение.Ключ = "DataPath" Тогда
			ПутьКДанным = КлючЗначение.Значение;
			Если ЭтоСтандартныйРеквизит(ПараметрыВыгрузки.СтрокаОбъекта.Тип, ЭлементДерева.Имя) Тогда
				ПутьКДанным = СтрЗаменить(
						ПутьКДанным,
						ЭлементДерева.Имя,
						ПолучитьВнутреннееИмяСтандартногоРеквизита(ПараметрыВыгрузки.СтрокаОбъекта.Тип, ЭлементДерева.Имя));
			КонецЕсли;
			УзелСвойств.ТекстовоеСодержимое = ПутьКДанным;
			Продолжить;
		КонецЕсли;
		
		Если КлючЗначение.Ключ = "Title" Тогда
			ВыгрузитьУзелСтрока(ДокументDOM, УзелСвойств, КлючЗначение.Значение);
			Продолжить;
		КонецЕсли;
		
		Если КлючЗначение.Ключ = "Picture" Тогда
			ВыгрузитьУзелКартинка(ДокументDOM, УзелСвойств, КлючЗначение.Значение);
			Продолжить;
		КонецЕсли;
		
		ЗначениеСвойства = КлючЗначение.Значение;
		УзелСвойств.ТекстовоеСодержимое = ЗначениеСвойства;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеквизитыФормы(ПараметрыВыгрузки, СтрокиРеквизиты, УзелAttributes)
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	Для Каждого СтрокаДеревоРеквизиты Из СтрокиРеквизиты Цикл
		
		УзелAttribute = ВыгрузитьДочернийУзел(ДокументDOM, УзелAttributes, "Attribute");
		УзелAttribute.УстановитьАтрибут("id", XMLСтрока(ПараметрыВыгрузки.Идентификатор));
		УзелAttribute.УстановитьАтрибут("name", СтрокаДеревоРеквизиты.Имя);
		
		ВыгрузитьОписаниеТипов(ДокументDOM, УзелAttribute, СтрокаДеревоРеквизиты.Данные.ОписаниеТипов);
		
		ВыгрузитьДочернийУзел(ДокументDOM, УзелAttribute, "MainAttribute", СтрокаДеревоРеквизиты.Данные.ОсновнойРеквизит);
		ВыгрузитьДочернийУзел(ДокументDOM, УзелAttribute, "SavedData", СтрокаДеревоРеквизиты.Данные.СохраняемыеДанные);
		
		УзелColumns = Неопределено;
		Если СтрокаДеревоРеквизиты.Данные.ОсновнойРеквизит Тогда
			УзелColumns = ВыгрузитьДочернийУзел(ДокументDOM, УзелAttribute, "Columns");
		КонецЕсли;
		
		ПараметрыВыгрузки.Идентификатор = ПараметрыВыгрузки.Идентификатор + 1;
		
		Если СтрокаДеревоРеквизиты.Тип = ТипыСтрокДереваИзменений().РеквизитФормыТаблицаЗначений
			ИЛИ СтрокаДеревоРеквизиты.Тип = ТипыСтрокДереваИзменений().РеквизитФормыДеревоЗначений Тогда
			ВыгрузитьРеквизитыФормыКолонки(ПараметрыВыгрузки, СтрокаДеревоРеквизиты, УзелAttribute);
		КонецЕсли;
		
		Если СтрокаДеревоРеквизиты.Данные.ОсновнойРеквизит Тогда
			СтрокиТаблицы = СтрокаДеревоРеквизиты.ПолучитьЭлементы();
			Для Каждого СтрокаОтражениеТаблицы Из СтрокиТаблицы Цикл
				ВыгрузитьРеквизитыФормыДополнительныеКолонки(ПараметрыВыгрузки, СтрокаОтражениеТаблицы, УзелColumns);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеквизитыФормыДополнительныеКолонки(ПараметрыВыгрузки, СтрокаТаблица, УзелColumns)
	СтрокиКолонки = СтрокаТаблица.ПолучитьЭлементы();
	Если СтрокиКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	
	Для Каждого СтрокаКолонка Из СтрокиКолонки Цикл
		УзелAdditionalColumns = ВыгрузитьДочернийУзел(ДокументDOM, УзелColumns, "AdditionalColumns");
		УзелAdditionalColumns.УстановитьАтрибут("table", "Объект." + СтрокаТаблица.Имя);
		
		УзелЭлемента = ВыгрузитьДочернийУзел(ДокументDOM, УзелAdditionalColumns, "Column");
		УзелЭлемента.УстановитьАтрибут("id", XMLСтрока(ПараметрыВыгрузки.Идентификатор));
		УзелЭлемента.УстановитьАтрибут("name", СтрокаКолонка.Имя);
		
		ВыгрузитьОписаниеТипов(ДокументDOM, УзелЭлемента, СтрокаКолонка.Данные.ОписаниеТипов);
		
		ПараметрыВыгрузки.Идентификатор = ПараметрыВыгрузки.Идентификатор + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеквизитыФормыКолонки(ПараметрыВыгрузки, СтрокаДеревоРеквизиты, УзелРодитель)
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	
	СтрокиРеквизиты = СтрокаДеревоРеквизиты.ПолучитьЭлементы();
	Если СтрокиРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УзелColumns = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "Columns");
	
	Для Каждого СтрокаДеревоРеквизиты Из СтрокиРеквизиты Цикл
		УзелЭлемента = ВыгрузитьДочернийУзел(ДокументDOM, УзелColumns, "Column");
		УзелЭлемента.УстановитьАтрибут("id", XMLСтрока(ПараметрыВыгрузки.Идентификатор));
		УзелЭлемента.УстановитьАтрибут("name", СтрокаДеревоРеквизиты.Имя);
		
		ВыгрузитьОписаниеТипов(ДокументDOM, УзелЭлемента, СтрокаДеревоРеквизиты.Данные.ОписаниеТипов);
		
		ПараметрыВыгрузки.Идентификатор = ПараметрыВыгрузки.Идентификатор + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработчикиСобытийФормы(ПараметрыВыгрузки, СтрокаФорма, УзелForm)
	Если СтрокаФорма.Данные.ОбработчикиСобытий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	УзелEvents = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "Events");
	
	Для Каждого КлючЗначений Из СтрокаФорма.Данные.ОбработчикиСобытий Цикл
		ВнутреннееИмяСобытия = ОбработчикиСобытийЭлементовФормыВнутренний(СтрокаФорма)[КлючЗначений.Ключ];
		УзелEvent = ВыгрузитьДочернийУзел(ДокументDOM, УзелEvents, "Event", КлючЗначений.Значение);
		УзелEvent.УстановитьАтрибут("name", ВнутреннееИмяСобытия);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Узлы

&НаКлиенте
Функция ВыгрузитьДочернийУзел(ДокументDOM, Родитель, ИмяЭлемента, ТекстовоеСодержимое = Неопределено)
	Узел = ДокументDOM.СоздатьЭлемент(ИмяЭлемента);
	
	Если ТекстовоеСодержимое <> Неопределено Тогда
		Узел.ТекстовоеСодержимое = XMLСтрока(ТекстовоеСодержимое);
	КонецЕсли;
	
	Родитель.ДобавитьДочерний(Узел);
	
	Возврат Узел;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьУзелСтрока(ДокументDOM, Родитель, Текст)
	Узел = ВыгрузитьДочернийУзел(ДокументDOM, Родитель, "v8:item");
	
	УзелLang = ВыгрузитьДочернийУзел(ДокументDOM, Узел, "v8:lang");
	УзелLang.ТекстовоеСодержимое = "ru";
	
	УзелContent = ВыгрузитьДочернийУзел(ДокументDOM, Узел, "v8:content");
	УзелContent.ТекстовоеСодержимое = XMLСтрока(Текст);
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьУзелMetaDataObject(ДокументDOM)
	УзелMetaDataObject = ВыгрузитьДочернийУзел(ДокументDOM, ДокументDOM, "MetaDataObject");
	УзелMetaDataObject.УстановитьСоответствиеПространстваИмен("", мКэшПространствИмен.АттрибутMDClasses);
	Для Каждого КлючЗначение Из мКэшПространствИмен.АттрибутыОбщие Цикл
		УзелMetaDataObject.УстановитьСоответствиеПространстваИмен(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	УзелMetaDataObject.УстановитьАтрибут("version", мКэшПространствИмен.ВерсияXML);
	
	Возврат УзелMetaDataObject;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьУзелInternalInfoВФайлОбъекта(ПараметрыВыполнения, ДокументDOM, УзелРодитель, ИмяТабличнойЧасти)
	ТипОбъектаАнгл = ПолучитьВнутреннееИмяОбъектаМетаданных(ТипОсновногоОбъекта);
	ИмяTabularSection = СтрШаблон(
			"%1TabularSection.%2.%3",
			ТипОбъектаАнгл,
			ИмяОсновногоОбъекта,
			ИмяТабличнойЧасти);
	
	TabularSectionRow = СтрШаблон(
			"%1TabularSectionRow.%2.%3",
			ТипОбъектаАнгл,
			ИмяОсновногоОбъекта,
			ИмяТабличнойЧасти);
	
	УзелInternalInfo = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "InternalInfo");
	
	УзелGeneratedType = ВыгрузитьДочернийУзел(ДокументDOM, УзелInternalInfo, "xr:GeneratedType");
	УзелGeneratedType.УстановитьАтрибут("name", ИмяTabularSection);
	УзелGeneratedType.УстановитьАтрибут("category", "TabularSection");
	ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:TypeId", XMLСтрока(Новый УникальныйИдентификатор));
	ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:ValueId", XMLСтрока(Новый УникальныйИдентификатор));
	
	УзелGeneratedType = ВыгрузитьДочернийУзел(ДокументDOM, УзелInternalInfo, "xr:GeneratedType");
	УзелGeneratedType.УстановитьАтрибут("name", TabularSectionRow);
	УзелGeneratedType.УстановитьАтрибут("category", "TabularSectionRow");
	ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:TypeId", XMLСтрока(Новый УникальныйИдентификатор));
	ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:ValueId", XMLСтрока(Новый УникальныйИдентификатор));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУзелыInternalInfo(ДокументDOM, УзелРодитель, МассивДобавляемыхУзлов)
	УзелInternalInfo = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "InternalInfo");
	
	Для Каждого ОписаниеУзла Из МассивДобавляемыхУзлов Цикл
		УзелGeneratedType = ВыгрузитьДочернийУзел(ДокументDOM, УзелInternalInfo, "xr:GeneratedType");
		УзелGeneratedType.УстановитьАтрибут("name", ОписаниеУзла.name);
		УзелGeneratedType.УстановитьАтрибут("category", ОписаниеУзла.category);
		ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:TypeId", XMLСтрока(Новый УникальныйИдентификатор));
		ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:ValueId", XMLСтрока(Новый УникальныйИдентификатор));
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаМодуля

&НаКлиенте
Функция ПолучитьТекстМодуля(Путь)
	Если НЕ СлужебныеФункции().ФайлСуществует(Путь) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(Путь);
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруМодуля(СемантическоеДерево, Текст)
	Результат = Новый Структура;
	Результат.Вставить("НачальнаяПозиция", 0);
	Результат.Вставить("КонечнаяПозиция", 0);
	Результат.Вставить("Текст", Текст);
	Результат.Вставить("СемантическоеДерево", СемантическоеДерево);
	Результат.Вставить("СтруктураОбластей", ПолучитьСтруктуруОбластей(СемантическоеДерево));
	Результат.Вставить("ИзмененныеМетоды", Новый Массив);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СформироватьТекстМодуля(СтрокаМодуль)
	СтруктураМодуля = СтрокаМодуль.Данные.СтруктураМодуля;
	
	МассивЗамен = Новый Массив;
	ЗаполнитьЗаменыМодуля(СтрокаМодуль, МассивЗамен);
	СтруктураМодуля.Текст = ВыполнитьЗамены(МассивЗамен, СтруктураМодуля.Текст);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаменыМодуля(СтрокаМодуль, МассивЗамен)
	СтруктураМодуля = СтрокаМодуль.Данные.СтруктураМодуля;
	
	МассивТекстовЗамены = Новый Массив;
	ПозицияЗамены = СтруктураМодуля.НачальнаяПозиция;
	
	Для Каждого ОписаниеОбласти Из СтруктураМодуля.СтруктураОбластей Цикл
		Если ОписаниеОбласти.ЕстьОбласть Тогда
			ЗаполнитьЗаменыМодуляДобавитьВТаблицуЗамен(МассивЗамен, МассивТекстовЗамены, ПозицияЗамены);
			
			ЗаполнитьЗаменыПоСуществующейОбласти(МассивЗамен, ОписаниеОбласти);
			
			МассивТекстовЗамены = Новый Массив;
			ПозицияЗамены = ОписаниеОбласти.Позиция.Конец;
			Продолжить;
		КонецЕсли;
		
		МассивТекстовЗамены.Добавить(СформироватьТекстОбласти(ОписаниеОбласти));
	КонецЦикла;
	
	ЗаполнитьЗаменыМодуляДобавитьВТаблицуЗамен(МассивЗамен, МассивТекстовЗамены, ПозицияЗамены);
	
	ЗаполнитьЗаментыМодуляИзмененныеМетоды(МассивЗамен, СтруктураМодуля);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаментыМодуляИзмененныеМетоды(МассивЗамен, ПараметрыМодуля)
	Для Каждого ИзмененныеМетод Из ПараметрыМодуля.ИзмененныеМетоды Цикл
		ДобавитьЗамену(
			МассивЗамен,
			ИзмененныеМетод.Содержимое.Тело + Символы.ПС,
			ИзмененныеМетод.Позиция.Начало,
			ИзмененныеМетод.Позиция.Конец - ИзмененныеМетод.Позиция.Начало);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаменыМодуляДобавитьВТаблицуЗамен(МассивЗамен, МассивТекстовЗамены, ПозицияЗамены)
	Если МассивТекстовЗамены.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДобавитьЗамену(МассивЗамен, Символы.ПС + Символы.ПС + СтрСоединить(МассивТекстовЗамены, Символы.ПС), ПозицияЗамены);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаменыПоСуществующейОбласти(МассивЗамен, ОписаниеОбласти)
	Если ОписаниеОбласти.НовыеМетоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстМетодов = СформироватьТекстМетодов(ОписаниеОбласти.НовыеМетоды) + Символы.ПС;
	
	ДобавитьЗамену(МассивЗамен, ТекстМетодов, ОписаниеОбласти.Позиция.Начало);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗамену(МассивЗамен, Текст, Позиция, Длина = 0)
	Результат = Новый Структура;
	Результат.Вставить("Текст", Текст);
	Результат.Вставить("Позиция", Позиция);
	Результат.Вставить("Длина", Длина);
	
	МассивЗамен.Добавить(Результат);
КонецПроцедуры

&НаКлиенте
Функция СформироватьТекстОбласти(ОписаниеОбласти)
	МассивОбласть = Новый Массив;
	
	МассивОбласть.Добавить(ПостроительТекстаМодуля().ТекстОбластьНачало() + " " + ОписаниеОбласти.Имя + Символы.ПС);
	
	МассивОбласть.Добавить(СформироватьТекстМетодов(ОписаниеОбласти.НовыеМетоды));
	
	МассивОбласть.Добавить(ПостроительТекстаМодуля().ТекстОбластьКонец());
	
	Возврат СтрСоединить(МассивОбласть, Символы.ПС);
КонецФункции

&НаКлиенте
Функция СформироватьТекстМетодов(МассивОписанийМетодов)
	МассивТекстовМетодов = Новый Массив;
	
	Для Каждого ПараметрыМетода Из МассивОписанийМетодов Цикл
		МассивТекстовМетодов.Добавить(СформироватьТекстМетода(ПараметрыМетода));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивТекстовМетодов, Символы.ПС);
КонецФункции

&НаКлиенте
Функция СформироватьТекстМетода(ПараметрыМетода)
	СтрЭлемент = Новый Структура("Содержимое, ТипЭлемента");
	СтрЭлемент.Содержимое = ПараметрыМетода.Содержимое;
	СтрЭлемент.ТипЭлемента = ?(ПараметрыМетода.Содержимое.ЭтоФункция, "Функция", "Процедура");
	Возврат ПостроительТекстаМодуля().МетодТекст(СтрЭлемент);
КонецФункции

&НаКлиенте
Функция СортироватьМассивЗамен(МассивЗамен)
	СписокЗначений = Новый СписокЗначений;
	Индекс = 1;
	Для Каждого Элемент Из МассивЗамен Цикл
		СписокЗначений.Добавить(Элемент.Позиция, Индекс);
		Индекс = Индекс + 1;
	КонецЦикла;
	СписокЗначений.СортироватьПоЗначению();
	
	Результат = Новый Массив;
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		ЭлементМассива = МассивЗамен[Число(ЭлементСписка.Представление) - 1];
		Результат.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВыполнитьЗамены(МассивЗамен, Текст)
	Если МассивЗамен.Количество() = 0 Тогда
		Возврат Текст;
	КонецЕсли;
	
	Результат = Новый Массив;
	
	УпорядоченныйМассивЗамен = СортироватьМассивЗамен(МассивЗамен);
	
	ПозицияНачала = 1;
	
	Для Индекс = 0 По УпорядоченныйМассивЗамен.Количество() - 1 Цикл
		
		Замена = УпорядоченныйМассивЗамен[Индекс];
		
		Результат.Добавить(Сред(Текст, ПозицияНачала, Замена.Позиция - ПозицияНачала));
		Результат.Добавить(Замена.Текст);
		
		ПозицияНачала = Замена.Позиция + Замена.Длина;
		
	КонецЦикла;
	
	Результат.Добавить(Сред(Текст, ПозицияНачала));
	
	Возврат СтрСоединить(Результат);
	
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеНовойОбласти(Имя)
	Возврат Новый Структура("Имя, ЕстьОбласть, НовыеМетоды, Позиция", Имя, Ложь, Новый Массив);
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыМетода()
	Результат = Новый Структура;
	Результат.Вставить("Содержимое", МетодСтруктураОписания());
	Результат.Вставить("Область");
	Результат.Вставить("Существует", Ложь);
	Результат.Вставить("Позиция", Неопределено);
	
	Результат.Содержимое.ЭтоФункция = Истина;
	Результат.Содержимое.Экспортная = Ложь;
	Результат.Содержимое.Асинх = Ложь;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьМетод(ДеревоМодуля, Знач Имя)
	Имя = НРег(Имя);
	
	Стек = Новый Массив;
	Для Каждого Строка Из ДеревоМодуля.Строки Цикл
		Стек.Добавить(Строка);
	КонецЦикла;
	
	Пока Стек.Количество() > 0 Цикл
		ЭлементМодуля = Стек[0];
		
		Если (ЭлементМодуля.ТипЭлемента = "Процедура"
				ИЛИ ЭлементМодуля.ТипЭлемента = "Функция")
			И НРег(ЭлементМодуля.Описание) = Имя Тогда
			Возврат ЭлементМодуля;
			
		КонецЕсли;
		
		Для Каждого Строка Из ЭлементМодуля.Строки Цикл
			Стек.Добавить(Строка);
		КонецЦикла;
		
		Стек.Удалить(0);
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ДобавитьМетодВОбласть(СтруктураОбластей, ПараметрыМетода)
	ОписаниеОбласти = ПолучитьОбластьПоИмени(СтруктураОбластей, ПараметрыМетода.Область);
	
	Если ОписаниеОбласти = Неопределено Тогда
		ОписаниеОбласти = ПолучитьОписаниеНовойОбласти(ПараметрыМетода.Область);
		
		ИндексОбласти = ПолучитьИндексВышестоящейОбласти(СтруктураОбластей, ПараметрыМетода.Область);
		СтруктураОбластей.Вставить(ИндексОбласти, ОписаниеОбласти);
	КонецЕсли;
	
	ОписаниеОбласти.НовыеМетоды.Добавить(ПараметрыМетода);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбластьПоИмени(СтруктураОбластей, ИмяОбласти)
	Для Каждого ОписаниеОбласти Из СтруктураОбластей Цикл
		Если НРег(ОписаниеОбласти.Имя) = НРег(ИмяОбласти) Тогда
			Возврат ОписаниеОбласти;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПолучитьИндексВышестоящейОбласти(СтруктураОбластей, ИмяОбласти)
	Результат = 0;
	МассивНижестоящихСтандартныхОбластей = ПолучитьМассивНижестоящихСтандартныхОбластей(ИмяОбласти);
	
	Для Каждого ОписаниеОбласти Из СтруктураОбластей Цикл
		Если МассивНижестоящихСтандартныхОбластей.Найти(НРег(ОписаниеОбласти.Имя)) <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		Результат = Результат + 1;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруОбластей(ДеревоМодуля)
	
	Результат = Новый Массив;
	
	Для Каждого ТекЭлемент Из ДеревоМодуля.Строки Цикл
		Если НЕ ТекЭлемент.ТипЭлемента = "Область" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбласти = ТекЭлемент.Содержимое.Имя;
		
		ОписаниеОбласти = ПолучитьОписаниеНовойОбласти(ИмяОбласти);
		ОписаниеОбласти.ЕстьОбласть = Истина;
		ОписаниеОбласти.Позиция = ТекЭлемент.Позиция;
		
		Результат.Добавить(ОписаниеОбласти);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПозицию(Начало, Конец)
	Возврат Новый Структура("Начало,Конец", Начало, Конец);
КонецФункции

&НаКлиенте
Функция ПолучитьМассивНижестоящихСтандартныхОбластей(ИмяОбласти)
	МассивНижестоящихОбластей = ПолучитьМассивОбластей();
	
	Индекс = МассивНижестоящихОбластей.Найти(НРег(ИмяОбласти));
	
	Если Индекс = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Сч = Индекс + 1 По МассивНижестоящихОбластей.ВГраница() Цикл
		Результат.Добавить(МассивНижестоящихОбластей[Сч]);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьМассивОбластей()
	Результат = Новый Массив;
	Результат.Добавить(НРег("ОписаниеПеременных"));
	Результат.Добавить(НРег("ПрограммныйИнтерфейс"));
	Результат.Добавить(НРег("СлужебныйПрограммныйИнтерфейс"));
	Результат.Добавить(НРег("ОбработчикиСобытийФормы"));
	Результат.Добавить(НРег("ОбработчикиСобытий"));
	Результат.Добавить(НРег("ОбработчикиКомандФормы"));
	Результат.Добавить(НРег("ОбработчикиСобытийЭлементовШапкиФормы"));
	Результат.Добавить(НРег("ОбработчикиСобытийЭлементовТаблицыФормы"));
	Результат.Добавить(НРег("ОбновлениеИнформационнойБазы"));
	Результат.Добавить(НРег("СлужебныеПроцедурыИФункции"));
	Результат.Добавить(НРег("Инициализация"));
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	Элементы.КаталогРасширенияXML.Видимость = ВыгружатьВРасширение;
КонецПроцедуры

&НаКлиенте
Процедура КаталогНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Каталог = ЭтотОбъект[Элемент.Имя];
	ДиалогВыбораКаталога.Заголовок = НСтр("ru = 'Выберите каталог xml-выгрузки конфигурации'");
	
	ДополнительныеПараметры = Новый Структура("Имя", Элемент.Имя);
	
	Оповещение = Новый ОписаниеОповещения("КаталогНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбораКаталога.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура КаталогНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтотОбъект[ДополнительныеПараметры.Имя] = Результат[0];
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстТелаСОтступами(Строка)
	МассивСтрок = СтрРазделить(Строка, Символы.ПС);
	МассивСтрокРезультат = Новый Массив;
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		МассивСтрокРезультат.Добавить(Символы.Таб + ТекСтрока);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрокРезультат, Символы.ПС);
КонецФункции

&НаКлиенте
Функция РазделыМетаданных()
	Результат = Новый Структура;
	
	ОписаниеРазделов = ПолучитьОписаниеРазделовМетаданных();
	Для Каждого РазделМетаданных Из ОписаниеРазделов Цикл
		Результат.Вставить(РазделМетаданных.Имя, РазделМетаданных.Имя);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ТипыСистемныеПеречисления()
	Результат = Новый Структура;
	Результат.Вставить("СистемноеПеречисление", "СистемноеПеречисление");
	Результат.Вставить("БиблиотекаКартинок", "БиблиотекаКартинок");
	Результат.Вставить("WebЦвета", "WebЦвета");
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ТипыФорм()
	Результат = Новый Структура;
	Для Каждого КлючЗначение Из ТипыФормВнутренний() Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Ключ);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначение(СтрЗначение)
	Если СтрЗначение.ЭтоСистемноеПеречисление Тогда
		Возврат СтрЗначение.Значение;
	КонецЕсли;
	
	Возврат XMLСтрока(СтрЗначение.Значение);
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееИмяОбъектаМетаданных(ИмяОбъекта)
	Соответствие = Новый Структура;
	Соответствие.Вставить("Справочник", "Catalog");
	Соответствие.Вставить("Документ", "Document");
	
	Возврат Соответствие[ИмяОбъекта];
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееИмяСтандартногоРеквизита(ТипОбъекта, ИмяРеквизита)
	ОписаниеРаздела = УправлениеСвойствами().ПолучитьРазделМетаданныхПоИмени(ТипОбъекта);
	Возврат ОписаниеРаздела.СтандартныеРеквизиты[ИмяРеквизита];
КонецФункции

#Область Пути

&НаКлиенте
Функция ПолучитьКаталогКонфигурацииРасширения(ЭтоРасширение)
	Возврат ?(ЭтоРасширение, КаталогРасширенияXML, КаталогXML);
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуКонфигурации(ЭтоРасширение)
	Каталог = ПолучитьКаталогКонфигурацииРасширения(ЭтоРасширение);
	Возврат СлужебныеФункции().ОбъединитьПути(Каталог, "Configuration.xml");
КонецФункции

&НаКлиенте
Функция ПутьККаталогуТипаОбъекта(ТипОбъекта, Расширение)
	Каталог = ?(Расширение = Неопределено, КаталогXML, КаталогРасширенияXML);
	
	ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(ТипОбъекта);
	Возврат СлужебныеФункции().ОбъединитьПути(Каталог, ОписаниеРаздела.ВнутреннееИмяМнож);
КонецФункции

&НаКлиенте
Функция ПутьККаталогуОбъекта(ТипОбъекта, ИмяОбъекта, Расширение)
	Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуТипаОбъекта(ТипОбъекта, Расширение), ИмяОбъекта);
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКаталогуФормы(ТипОбъекта, ИмяОбъекта, ИмяФормы, Расширение)
	Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуОбъекта(ТипОбъекта, ИмяОбъекта, Расширение), "Forms", ИмяФормы, "Ext");
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуОбъекта(ТипОбъекта, ИмяОбъекта, Расширение)
	Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуТипаОбъекта(ТипОбъекта, Расширение), ИмяОбъекта + ".xml");
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуМетаданныхФормы(ТипОбъекта, ИмяОбъекта, ИмяФормы, Расширение)
	Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуОбъекта(ТипОбъекта, ИмяОбъекта, Расширение), "Forms", ИмяФормы + ".xml");
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуФормы(ТипОбъекта, ИмяОбъекта, ИмяФормы, Расширение)
	Возврат СлужебныеФункции().ОбъединитьПути(ПолучитьПутьКаталогуФормы(ТипОбъекта, ИмяОбъекта, ИмяФормы, Расширение), "Form.xml");
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуМодуля(СтрокаМодуля, Расширение)
	Если СтрокаМодуля.Тип = ТипыМодулей().ОбщийМодуль Тогда
		Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуОбъекта(СтрокаМодуля.Тип, СтрокаМодуля.Имя, Расширение), "Ext", "Module.bsl");
	КонецЕсли;
	
	СтрокаОбъект = ПолучитьОбъектПоСтрокеФормы(СтрокаМодуля);
	
	Если СтрокаМодуля.Тип = ТипыМодулей().МодульФормы Тогда
		СтрокаФорма = ПолучитьФормуПоСтрокеДереваИзменений(СтрокаМодуля);
		
		ПутьККаталогуФормы = ПолучитьПутьКаталогуФормы(СтрокаОбъект.Тип, СтрокаОбъект.Имя, СтрокаФорма.Имя, Расширение);
		Возврат СлужебныеФункции().ОбъединитьПути(
			ПутьККаталогуФормы, "Form", "Module.bsl");
	КонецЕсли;
	
	ПутьККаталогуОбъекта =
		СлужебныеФункции().ОбъединитьПути(
			ПутьККаталогуОбъекта(СтрокаОбъект.Тип, СтрокаОбъект.Имя, Расширение), "Ext");
	
	Если СтрокаМодуля.Тип = ТипыМодулей().МодульМенеджера Тогда
		Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуОбъекта, "ManagerModule.bsl");
	КонецЕсли;
	
	Если СтрокаМодуля.Тип = ТипыМодулей().МодульОбъекта Тогда
		Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуОбъекта, "ObjectModule.bsl");
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

// BSLLS-off
#Область BSLConsole

#Область ОбработчикиСобытийПоляРедактора

&НаКлиенте
Процедура ConsoleOnReady(Элемент)
	
	Если ИсходникиЗагружены Тогда
		
		ДокументЗагружен = Истина;
		
		#Если ВебКлиент Тогда
		Если ВебДокументДоступен() Тогда
			ИнициализацияРедактора();
			АктивироватьДополнительныеФункции();
		Иначе
			ПоказатьПредупреждение( , "К сожалению, в веб-клиенте недоступны практически все функции.
				|Вы можете посмотреть только работу автодополнения и подсказок параметров при наборе кода.");
		КонецЕсли;
		#Иначе
		ИнициализацияРедактора();
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеРедактора(Событие)
	
	Если Событие <> Неопределено Тогда
		
		ИмяСобытия = Событие.event;
		
		Если ИмяСобытия = "EVENT_QUERY_CONSTRUCT" Тогда
			ВызватьКонструкторЗапроса(Событие.params);
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_FORMAT_CONSTRUCT" Тогда
			ВызватьКонструкторФорматнойСтроки(Событие.params);
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_GET_METADATA" Тогда
			ОбработкаСобытияПолученияМетаданных(Событие.params);
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда
			Если мОтключитьОбработчикАктивацииТаблицыСкриптов Тогда
				мОтключитьОбработчикАктивацииТаблицыСкриптов = Ложь;
				Возврат;
			КонецЕсли;
			
			ТекущаяСтрока = Элементы.ТаблицаСкриптов.ТекущиеДанные;
			Если ТекущаяСтрока = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ТекущаяСтрока.Текст = ПолучитьТекст();
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_ON_LINK_CLICK" Тогда
			Если 0 < СтрНайти(Событие.params.href, "e1cib") Тогда
				ПерейтиПоНавигационнойСсылке(Событие.params.href);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_GET_VARIABLE_DATA" Тогда
			ОбработкаСобытияПолученияПеременной(Событие.params);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		ОбработатьСобытиеРедактора(ДанныеСобытия.Event.eventData1C);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияРедактора

&НаКлиенте
Функция ИндексныйФайл()
	
	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
	
КонецФункции

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	HTML = СкопированныйФайл;
	ИсходникиЗагружены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + ВерсияОбработки + ".ver");
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл();
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект);
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()
	
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект);
	НачатьУдалениеФайлов(Оповещение, КаталогИсходников, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = КаталогИсходников + "index.html";
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + ВерсияОбработки + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ВывестиОшибку("Не удалось создать каталог для исходников", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект);
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогИсходников = ИмяКаталога + "bsl_console\";
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект);
	НачатьСозданиеКаталога(Оповещение, КаталогИсходников);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники()
	
	Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект);
	НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	
КонецПроцедуры

&НаСервере
Функция СкопироватьОбработкуНаСервер(АдресОбработки)
	
	ФайлОбработки = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресОбработки);
	ДвоичныеДанные.Записать(ФайлОбработки);
	
	Возврат ФайлОбработки;
	
КонецФункции

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
		
		ИзвлечьИсходники();
		
	Иначе
		
		#Если ВебКлиент Тогда
		Если ДопПараметры = Неопределено Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеУстановкиРасширенияДляРаботыСФайлами", ЭтотОбъект);
			НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
		Иначе
			ПоказатьПредупреждение( , "К сожалению работа в веб-клиенте невозможна!");
		КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширенияДляРаботыСФайлами(ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект, Истина);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьМетаданные() Экспорт
	
	View().clearMetadata();
	ОбновитьСписокОбщихМодулей();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора()
	
	Инфо = Новый СистемнаяИнформация();
	
	View().init(Инфо.ВерсияПриложения);
	View().setOption("autoResizeEditorLayout", Истина);
	View().setOption("renderQueryDelimiters", Истина);
	View().setOption("generateModificationEvent", Истина);
	View().hideScrollX();
	View().hideScrollY();
	
	ПодключитьОбработчикОжидания("ОбнулитьМетаданные", 1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеЗначенийПеременныхДляПодсказокПриНаведении

&НаСервереБезКонтекста
Функция ДополнитьСтроку(Знач Результат, СимволовДополнить, Дополнение = " ", Слева = Истина)
	
	Стр = "";
	
	Для Сч = 1 По СимволовДополнить Цикл
		Стр = Стр + Дополнение;
	КонецЦикла;
	
	Возврат ?(Слева, Стр + Результат, Результат + Стр);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСсылка(Ссылка)
	
	ЭтоСсылка = Ложь;
	
	ТипЗнч = ТипЗнч(Ссылка);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если ОбъектМетаданных <> Неопределено Тогда
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Массив = СтрРазделить(ПолноеИмя, ".");
		Массив[0] = Массив[0] + "Ссылка";
		ИмяТипа = СтрСоединить(Массив, ".");
		
		Попытка
			ЭтоСсылка = (ТипЗнч = Тип(ИмяТипа));
		Исключение
			ЭтоСсылка = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ЭтоСсылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяОбъектаМетаданных(Ссылка)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	
	Если ОбъектМетаданных <> Неопределено Тогда
		Возврат СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".").Получить(0);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоТабличнаяЧасть(Ссылка)
	
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	
	Если Результат <> Неопределено Тогда
		
		Если ОбъектМетаданныхИмеетТЧ(Результат.Родитель().ПолноеИмя()) Тогда
			Возврат Результат.Родитель().ТабличныеЧасти.Найти(Результат.Имя) <> Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСтрокаТабличнойЧасти(Ссылка)
	
	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если Результат <> Неопределено Тогда
		
		Родитель = Результат.Родитель();
		ИмяРодителя = Родитель.ПолноеИмя();
		
		Если ОбъектМетаданныхИмеетТЧ(ИмяРодителя) Тогда
			
			ЧастиИмени = СтрРазделить(ИмяРодителя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);
			
			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);
			
			Если ТабличнаяЧасть <> Неопределено Тогда
				
				ИмяТипа = СтрШаблон("%1ТабличнаяЧастьСтрока.%2.%3", Имя1, Имя2, ТабличнаяЧасть.Имя);
				
				Попытка
					Возврат (ТипЗнч = Тип(ИмяТипа));
				Исключение
					Возврат Ложь;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЗаписьНабораЗаписей(Ссылка)
	
	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если Результат <> Неопределено Тогда
		
		ПолноеИмя = Результат.ПолноеИмя();
		
		Если 0 < СтрНайти(ПолноеИмя, "Регистр") ИЛИ 0 < СтрНайти(ПолноеИмя, "Register") Тогда
			
			ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);
			ИмяТипа = СтрШаблон("%1Запись.%2", Имя1, Имя2);
			
			Попытка
				Возврат (ТипЗнч = Тип(ИмяТипа));
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыСтрокиТабличнойЧасти(Строка)
	
	Реквизиты = Новый Массив();
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Строка));
	
	Если Результат <> Неопределено Тогда
		
		Родитель = Результат.Родитель();
		
		Если ОбъектМетаданныхИмеетТЧ(Родитель.ПолноеИмя()) Тогда
			
			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);
			
			Реквизиты.Добавить(Новый Структура("Имя", "НомерСтроки"));
			
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				Реквизиты.Добавить(Реквизит);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыНабораЗаписей(Запись)
	
	Реквизиты = Новый Массив();
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Запись));
	
	Если Результат <> Неопределено Тогда
		
		Для Каждого Измерение Из Результат.Измерения Цикл
			Реквизиты.Добавить(Измерение);
		КонецЦикла;
		
		Для Каждого Ресурс Из Результат.Ресурсы Цикл
			Реквизиты.Добавить(Ресурс);
		КонецЦикла;
		
		Для Каждого Реквизит Из Результат.Реквизиты Цикл
			Реквизиты.Добавить(Реквизит);
		КонецЦикла;
		
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМенеджерЗаписиРегистра(Значение)
	
	ЭтоМенеджерЗаписи = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если Результат <> Неопределено Тогда
		
		Имя = Результат.ПолноеИмя();
		
		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоМенеджерЗаписи = (Тип("РегистрСведенийМенеджерЗаписи." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоМенеджерЗаписи = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоМенеджерЗаписи;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоНаборЗаписейРегистра(Значение)
	
	ЭтоНаборЗаписей = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если Результат <> Неопределено Тогда
		
		Имя = Результат.ПолноеИмя();
		
		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрСведенийНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрНакопления") = 1 И Метаданные.РегистрыНакопления.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрНакопленияНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрРасчета") = 1 И Метаданные.РегистрыРасчета.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрРасчетаНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрБухгалтери") = 1 И Метаданные.РегистрыБухгалтерии.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрБухгалтерииНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоНаборЗаписей = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоНаборЗаписей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПеречисление(Значение)
	
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	Возврат Результат <> Неопределено И СтрНайти(Результат.ПолноеИмя(), "Перечисление") = 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСсылки(Значение, КешСсылок, htmlTag)
	
	Представление = КешСсылок[Значение];
	
	Если Представление = Неопределено Тогда
		
		Попытка
			Если НЕ Значение.Пустая() Тогда
				Ссылка = ПолучитьНавигационнуюСсылку(Значение);
				Если htmlTag Тогда
					Представление = СтрШаблон("<a href='%1'>%2</a>", Ссылка, Строка(Значение));
				Иначе
					Представление = СтрШаблон("[%1](%2)", Строка(Значение), Ссылка);
				КонецЕсли;
			Иначе
				Представление = "";
			КонецЕсли;
		Исключение
			Представление = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		КешСсылок[Значение] = Представление;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", Заголовок, Значение.Количество()));
	Индекс = 0;
	
	Для Каждого СтрокаТЗ Из Значение Цикл
		
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);
		
		Для Каждого Колонка Из Значение.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(СтрокаТЗ[Колонка.Имя], Смещение, КешСсылок));
		КонецЦикла;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, СтрокаДерева, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	Индекс = 0;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл
		
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);
		
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(Строка[Колонка.Имя], Смещение, КешСсылок));
		КонецЦикла;
		
		Индекс = Индекс + 1;
		
		МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Строка, Смещение + 1, КешСсылок));
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеДереваЗначений(Дерево, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", "Дерево значений", Дерево.Строки.Количество()));
	МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Дерево, Смещение, КешСсылок));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок)
	
	Таблица = Значение.Владелец();
	
	Представление = "**Строка таблицы значений:**" + Символы.ПС;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Представление = Представление + Символы.ПС;
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		Представление = Представление + Маркер + Колонка.Имя + ": ";
		Представление = Представление + ПолучитьПредставлениеПеременной(Значение[Колонка.Имя], Смещение, КешСсылок);
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок)
	
	ТипЗнч = ТипЗнч(Значение);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);
	МассивСтрок = Новый Массив();
	
	МассивСтрок.Добавить(СтрШаблон("**%1:**", ТипЗнч));
	МассивСтрок.Добавить(Символы.ПС);
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Для Каждого Измерение Из ОбъектМетаданных.Реквизиты Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Для Каждого Измерение Из ОбъектМетаданных.Ресурсы Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаЗначенийМассива(МассивСписок, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	
	ТипЗнч = ТипЗнч(МассивСписок);
	ЭтоМассив = (ТипЗнч = Тип("Массив"));
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч, МассивСписок.Количество()) + Символы.ПС);
	Индекс = 0;
	
	Для Каждого Значение Из МассивСписок Цикл
		
		Маркер = ДополнитьСтроку("- (" + Индекс + ") ", Смещение * 4, " ");
		
		Если ЭтоМассив Тогда
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение, Смещение, КешСсылок));
		Иначе
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение.Значение, Смещение, КешСсылок));
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЭлементаСпискаЗначений(ЭлементСписка, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Элемент списка значений**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(ЭлементСписка.Значение, Смещение, КешСсылок));
	
	Представление = ЭлементСписка.Представление;
	
	Если НЕ ЗначениеЗаполнено(Представление) Тогда
		Представление = Строка(ЭлементСписка.Значение);
	КонецЕсли;
	
	МассивСтрок.Добавить(Маркер + "Представление: " + Представление);
	МассивСтрок.Добавить(Маркер + "Пометка: " + ЭлементСписка.Пометка);
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеКлючаЗначения(КлючЗначение, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Ключ и значение**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Ключ: " + КлючЗначение.Ключ);
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(КлючЗначение.Значение, Смещение, КешСсылок));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч(Значение), Значение.Количество()));
	
	Для Каждого Стр Из Значение Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Стр.Ключ + ": " + ПолучитьПредставлениеПеременной(Стр.Значение, Смещение, КешСсылок));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЗапроса(Запрос, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Запрос**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Не установлен");
	Иначе
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Установлен");
	КонецЕсли;
	
	ПредставлениеПараметров = ПолучитьПредставлениеСтруктурыСоответствия(Запрос.Параметры, Смещение + 1, КешСсылок);
	МассивСтрок.Добавить(ПредставлениеПараметров);
	
	МаркерТекста = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
	МассивСтрок.Добавить(Маркер + "Текст: " + Символы.ПС + МаркерТекста + Запрос.Текст);
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПеременной(Значение, Знач Смещение, КешСсылок)
	
	Представление = "";
	ТипЗнч = ТипЗнч(Значение);
	
	Смещение = Смещение + 1;
	
	Если ТипЗнч = Тип("Число") ИЛИ
		ТипЗнч = Тип("Строка") ИЛИ
		ТипЗнч = Тип("Булево") ИЛИ
		ТипЗнч = Тип("Дата") Тогда
		Представление = Строка(Значение);
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Представление = "Null";
	ИначеЕсли ТипЗнч = Тип("Структура") ИЛИ
		ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("Массив") ИЛИ
		ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = ПолучитьПредставлениеСпискаЗначенийМассива(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = ПолучитьПредставлениеКлючаЗначения(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = ПолучитьПредставлениеЭлементаСпискаЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		Заголовок = НСтр("en = 'Value table'; ru = 'Таблица значений'");
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = ПолучитьПредставлениеДереваЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Представление = ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Представление = Строка(Значение);
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = ПолучитьПредставлениеЗапроса(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Ложь);
	Иначе
		Представление = Строка(Значение);
		Если ПустаяСтрока(Представление) Тогда
			Представление = Строка(ТипЗнч);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(ЗначенияПеременных)
	
	Описание = Новый Структура();
	КешСсылок = Новый Соответствие();
	
	Для Каждого Обход Из ЗначенияПеременных Цикл
		Представление = ПолучитьПредставлениеПеременной(Обход.Значение, -1, КешСсылок);
		Описание.Вставить(Обход.Ключ, Представление);
	КонецЦикла;
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Описание);
	
	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ПолучениеЗначенийПеременныхДляВыводаВТабло

&НаСервереБезКонтекста
Функция ПолучитьКартинкуДляПредставленияСсылки(Ссылка)
	
	ИмяОбъекта = ПолучитьИмяОбъектаМетаданных(Ссылка);
	
	Имена = Новый Соответствие();
	Имена.Вставить("Справочник", "catalog");
	Имена.Вставить("Catalog", "catalog");
	Имена.Вставить("Документ", "document");
	Имена.Вставить("Document", "document");
	Имена.Вставить("БизнесПроцесс", "bprocess");
	Имена.Вставить("BusinessProcess", "bprocess");
	Имена.Вставить("Задача", "task");
	Имена.Вставить("Task", "task");
	
	Картинка = Имена[ИмяОбъекта];
	
	Если Картинка = Неопределено Тогда
		Картинка = "structure";
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьКДанным, КешСсылок)
	
	Представление = "";
	ТипЗнч = ТипЗнч(Значение);
	Картинка = "";
	Класс = "";
	
	Если ТипЗнч = Тип("Число") Тогда
		Представление = Строка(Значение);
		Картинка = "int";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Строка") Тогда
		Представление = Строка(Значение);
		Картинка = "string";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Булево") Тогда
		Представление = Строка(Значение);
		Картинка = "boolean";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Дата") Тогда
		Картинка = "date";
		Представление = Строка(Значение);
		Класс = "final";
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Картинка = "null";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("УникальныйИдентификатор") Тогда
		Представление = Строка(Значение);
		Картинка = "uuid";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ДвоичныеДанные") Тогда
		Картинка = "binary";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Картинка") Тогда
		Картинка = "picture";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Структура") ИЛИ
		ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("Массив") ИЛИ
		ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Картинка = "table";
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Строки.Количество());
		Картинка = "tree";
		Если Значение.Строки.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
		Представление = "";
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Картинка = "storage";
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "query";
	ИначеЕсли ТипЗнч = Тип("МенеджерВременныхТаблиц") Тогда
		Представление = "";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
		Представление = СтрШаблон("Движения (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("ТабличныйДокумент") Тогда
		Картинка = "tabular";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ТекстовыйДокумент") ИЛИ
		ТипЗнч = Тип("ЧтениеТекста") ИЛИ
		ТипЗнч = Тип("ЧтениеXML") ИЛИ
		ТипЗнч = Тип("ЧтениеJSON") ИЛИ
		ТипЗнч = Тип("ЧтениеHTML") ИЛИ
		ТипЗнч = Тип("ЗаписьJSON") ИЛИ
		ТипЗнч = Тип("ЗаписьXML") ИЛИ
		ТипЗнч = Тип("ЗаписьТекста") ИЛИ
		ТипЗнч = Тип("ЧтениеZipФайла") ИЛИ
		ТипЗнч = Тип("Файл") Тогда
		Картинка = "text";
		Класс = "final";
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
		Картинка = "enum";
		Класс = "final";
	ИначеЕсли ЭтоСтрокаТабличнойЧасти(Значение) Тогда
		Представление = "";
		Картинка = "table";
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = СтрШаблон("Табличная часть (%1)", Значение.Количество());
		Картинка = "table";
	ИначеЕсли ЭтоЗаписьНабораЗаписей(Значение) Тогда
		Картинка = "table";
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = СтрШаблон("Набор записей (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Картинка = "structure";
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Истина);
		Если СтрНайти(Представление, "</a>") Тогда
			Представление = СтрЗаменить(Представление, """", "");
			Представление = СтрЗаменить(Представление, Символы.Таб, "");
		КонецЕсли;
		Картинка = ПолучитьКартинкуДляПредставленияСсылки(Значение);
	Иначе
		Попытка
			Представление = Строка(Значение);
		Исключение
			Представление = Строка(ТипЗнч);
		КонецПопытки;
		Класс = "final";
	КонецЕсли;
	
	Переменная = Новый Структура();
	Переменная.Вставить("label", Имя);
	Переменная.Вставить("value", Представление);
	Переменная.Вставить("type", Строка(ТипЗнч));
	Переменная.Вставить("path", ПутьКДанным);
	Переменная.Вставить("class", Класс);
	
	Если ЗначениеЗаполнено(Картинка) Тогда
		Переменная.Вставить("icon", Картинка + ".png");
	КонецЕсли;
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйИдентификаторПеременной()
	
	Возврат "var_" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСсылочнойПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	ОбъектМетаданных = Ссылка.Метаданные();
	ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	
	ЗначениеРеквизита = Ссылка.УникальныйИдентификатор();
	ПутьРеквизита = ПутьКДанным + ".УникальныйИдентификатор";
	ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, "УникальныйИдентификатор", ПутьРеквизита, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
	
	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмяОбъектаМетаданных) Тогда
		
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			
			Если Реквизит.Имя <> "Ссылка" Тогда
				ЗначениеРеквизита = Ссылка[Реквизит.Имя];
				ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
				ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, Реквизит.Имя, ПутьРеквизита, КешСсылок);
				ИдентификаторПеременной = НовыйИдентификаторПеременной();
				ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		ЗначениеРеквизита = Ссылка[Реквизит.Имя];
		ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, Реквизит.Имя, ПутьРеквизита, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
	КонецЦикла;
	
	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмяОбъектаМетаданных) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ЗначениеРеквизита = Ссылка[ТабличнаяЧасть.Имя];
			ПутьРеквизита = ПутьКДанным + "." + ТабличнаяЧасть.Имя;
			ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, ТабличнаяЧасть.Имя, ПутьРеквизита, КешСсылок);
			ИдентификаторПеременной = НовыйИдентификаторПеременной();
			ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
		КонецЦикла;
		
	КонецЕсли;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТаблицыЗначений(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЗ, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиТаблицыЗначений(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Колонки = СтрокаТаблицы.Владелец().Колонки;
	
	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаТаблицы[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиТабличнойЧасти(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыСтрокиТабличнойЧасти(СтрокаТЧ);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = СтрокаТЧ[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЗаписиНабораЗаписей(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеДереваЗначений(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + ".Строки[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиДереваЗначений(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Колонки = СтрокаДерева.Владелец().Колонки;
	
	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаДерева[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Если 0 < СтрокаДерева.Строки.Количество() Тогда
		ПутьСтроки = ПутьКДанным + ".Строки";
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева.Строки, "Строки", ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЕсли;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКоллекцииСтрокДереваЗначений(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСоответствияСтруктуры(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ЭтоСоответствие = (ТипЗнч(Соответствие) = Тип("Соответствие"));
	ДанныеПеременной = Новый Структура();
	
	Для Каждого Обход Из Соответствие Цикл
		
		Если ЭтоСоответствие Тогда
			ПутьЗначения = ПутьКДанным + "[&quote;" + Обход.Ключ + "&quote;]";
		Иначе
			ПутьЗначения = ПутьКДанным + "." + Обход.Ключ;
		КонецЕсли;
		
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Обход.Ключ, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
		
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМассива(Массив, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Массив, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Значение Из Массив Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКлючаИЗначения(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Ключ";
	Имя = "Ключ";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Ключ, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЭлементаСпискаЗначений(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Пометка";
	Имя = "Пометка";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Пометка, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Представление";
	Имя = "Представление";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Представление, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСпискаЗначений(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Обход Из СписокЗначений Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКоллекцииДвижений(Движения, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Движения, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Движение Из Движения Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Движение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМенеджераЗаписейРегистра(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЗапроса(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Текст";
	Имя = "Текст";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Текст, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Параметры";
	Имя = "Параметры";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Параметры, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".МенеджерВременныхТаблиц";
	Имя = "МенеджерВременныхТаблиц";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.МенеджерВременныхТаблиц, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеХранилищаЗначения(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Данные = ХранилишеЗначения.Получить();
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	Путь = ПутьКДанным + ".Получить()";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Данные, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеХранилища = Новый Структура(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеХранилища);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной, ПутьКДанным, АдресХраненияПеременных)
	
	Данные = ПолучитьИзВременногоХранилища(АдресХраненияПеременных);
	ХранилищеПеременных = Данные.ХранилищеПеременных;
	КешСсылок = Данные.КэшСсылок;
	
	Попытка
		
		Описание = Неопределено;
		Путь = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИдентификаторПеременной);
		Путь = СтрЗаменить(Путь, "&quote;", """");
		ЗначениеПеременной = Вычислить("ХранилищеПеременных." + Путь);
		Путь = СтрЗаменить(Путь, """", "&quote;");
		ТипЗнч = ТипЗнч(ЗначениеПеременной);
		
		Если ТипЗнч = Тип("ТаблицаЗначений") Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
			Описание = ПолучитьОписаниеДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
			Описание = ПолучитьОписаниеКоллекцииСтрокДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Соответствие") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Массив") Тогда
			Описание = ПолучитьОписаниеМассива(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Структура") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
			Описание = ПолучитьОписаниеКлючаИЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СписокЗначений") Тогда
			Описание = ПолучитьОписаниеСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
			Описание = ПолучитьОписаниеЭлементаСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
			Описание = ПолучитьОписаниеЗапроса(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
			Описание = ПолучитьОписаниеКоллекцииДвижений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
			Описание = ПолучитьОписаниеХранилищаЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСсылка(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСсылочнойПеременной(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСтрокаТабличнойЧасти(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСтрокиТабличнойЧасти(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоТабличнаяЧасть(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоЗаписьНабораЗаписей(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеЗаписиНабораЗаписей(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоНаборЗаписейРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоМенеджерЗаписиРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеМенеджераЗаписейРегистра(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		КонецЕсли;
		
		Если Описание <> Неопределено Тогда
			Результат = Новый Структура(ИдентификаторПеременной, Описание);
			Запись = Новый ЗаписьJSON();
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Результат);
			Возврат Запись.Закрыть();
		Иначе
			ВызватьИсключение("Неизвестный тип переменной");
		КонецЕсли;
		
		Данные.КэшСсылок = КешСсылок;
		ПоместитьВоВременноеХранилище(Данные, АдресХраненияПеременных);
		
	Исключение
		Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПеременныхДляВыводВТабло(ЗначенияПеременных, АдресХраненияПеременных)
	
	Описание = Новый Структура();
	КешСсылок = Новый Соответствие();
	ХранилищеПеременных = Новый Структура();
	
	Для Каждого Обход Из ЗначенияПеременных Цикл
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		Переменная = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Обход.Ключ, "", КешСсылок);
		Описание.Вставить(ИдентификаторПеременной, Переменная);
		ХранилищеПеременных.Вставить(ИдентификаторПеременной, Обход.Значение);
	КонецЦикла;
	
	Данные = Новый Структура();
	Данные.Вставить("ХранилищеПеременных", ХранилищеПеременных);
	Данные.Вставить("КэшСсылок", КешСсылок);
	
	АдресХраненияПеременных = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор());
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Описание);
	
	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ВыполнениеКода

&НаКлиенте
Функция ПолучитьОшибку(ОписаниеОшибки)
	
	Ошибка = Новый Структура("ТекстОшибки, НомерСтроки, НомерКолонки", ОписаниеОшибки, 0, 1);
	
	ПозицияРазделителя = СтрНайти(ОписаниеОшибки, ":");
	
	Если 0 < ПозицияРазделителя Тогда
		
		Ошибка.ТекстОшибки = СокрЛП(Сред(ОписаниеОшибки, ПозицияРазделителя + 1));
		
		СтрокаОшибки = Лев(ОписаниеОшибки, ПозицияРазделителя - 1);
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "{", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "(", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ")", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "}", "");
		
		Подстроки = СтрЗаменить(СтрокаОшибки, ",", Символы.ПС);
		
		Ошибка.НомерСтроки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 1), 0);
		Ошибка.НомерКолонки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 2), 1);
		
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

&НаКлиенте
Функция НайтиСтрокуВКоде(Строка)
	
	НомерСтроки = View().findText(Строка);
	
	Возврат НомерСтроки;
	
КонецФункции

&НаКлиенте
Функция ИзвлечьНомерСтрокиИзОписанияОшибки(ОписаниеОшибки)
	
	НомерСтроки = 0;
	ОткрывающаяСкобка = СтрНайти(ОписаниеОшибки, "(");
	
	Если 0 < ОткрывающаяСкобка Тогда
		
		ЗакрывающаяСкобка = СтрНайти(ОписаниеОшибки, ")", , ОткрывающаяСкобка);
		
		Если 0 < ЗакрывающаяСкобка Тогда
			
			Позиция = Сред(ОписаниеОшибки, ОткрывающаяСкобка + 1, ЗакрывающаяСкобка - ОткрывающаяСкобка - 1);
			Подстроки = СтрРазделить(Позиция, ",");
			
			Попытка
				НомерСтроки = Число(Подстроки[0]);
			Исключение
				НомерСтроки = 0;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполнения(Результат)
	
	View().setCustomCodeLenses("[]");
	
	Если НЕ Результат.Успешно Тогда
		
		Ошибка = ПолучитьОшибку(Результат.ОписаниеОшибки);
		
		НомерСтроки = Ошибка.НомерСтроки;
		НомерКолонки = Ошибка.НомерКолонки;
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = ИзвлечьНомерСтрокиИзОписанияОшибки(Результат.ОписаниеОшибки);
		КонецЕсли;
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = НайтиСтрокуВКоде(Результат.ИсходнаяСтрока);
		КонецЕсли;
		
		СообщитьПользователю(Ошибка.ТекстОшибки);
		
		Если 0 < НомерСтроки Тогда
			View().markError(НомерСтроки, НомерКолонки);
		КонецЕсли;
		
	Иначе
		
		АдресХраненияПеременных = Результат.АдресХраненияПеременных;
		
		Если ЗначениеЗаполнено(Результат.ОписаниеПеременных) Тогда
			
			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
				
				View().showVariablesDescription(Результат.ОписаниеПеременных);
				
			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
				
				View().setCustomHovers(Результат.ОписаниеПеременных);
				
				Если Результат.ОписаниеПеременных <> "{}" Тогда
					View().setCustomCodeLenses("[{""lineNumber"": 1,""column"": 1,""text"": ""Для просмотра значений наведите курсор на переменную""}]");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруРезультата()
	
	СтруктуруРезультата = Новый Структура();
	СтруктуруРезультата.Вставить("Успешно", Ложь);
	СтруктуруРезультата.Вставить("ИсходнаяСтрока", "");
	СтруктуруРезультата.Вставить("ОписаниеОшибки", "");
	СтруктуруРезультата.Вставить("ОписаниеПеременных", "");
	СтруктуруРезультата.Вставить("АдресХраненияПеременных", "");
	
	Возврат СтруктуруРезультата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьКод(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения)
	
	RVS6e6c2a = ПолучитьСтруктуруРезультата();
	SPd201bf6 = Новый Структура();
	
	Попытка
		Выполнить(Текст);
		RVS6e6c2a.Успешно = Истина;
		АдресПеременных = "";
		Попытка
			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьОписаниеПеременныхДляВыводВТабло(SPd201bf6, АдресПеременных);
			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(SPd201bf6);
			КонецЕсли;
			RVS6e6c2a.АдресХраненияПеременных = АдресПеременных;
		Исключение
			OS6e6c2a = ИнформацияОбОшибке();
			RVS6e6c2a.ОписаниеПеременных = "";
		КонецПопытки;
	Исключение
		OS6e6c2a = ИнформацияОбОшибке();
		RVS6e6c2a.ИсходнаяСтрока = OS6e6c2a.ИсходнаяСтрока;
		Если OS6e6c2a.Причина <> Неопределено Тогда
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Причина.Описание;
		Иначе
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Описание;
		КонецЕсли;
	КонецПопытки;
	
	Возврат RVS6e6c2a;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьКодНаСервере(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения)
	
	Возврат ВыполнитьКод(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения);
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция View()
	
	Возврат Элементы.ПолеHTML.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекст(Знач Текст, Позиция, УчитыватьОтступПервойСтроки) Экспорт
	View().setText(Текст, Позиция, УчитыватьОтступПервойСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКодПросмотраПеременных()
	
	Код = "";
	
	Если 0 < ПоказыватьЗначенияПеременныхПослеВыполнения Тогда
		
		Переменные = View().getVarsNames();
		
		Если 0 < Переменные.length Тогда
			
			ПС = Символы.ПС;
			
			Для Индекс = 0 По Переменные.length - 1 Цикл
				Имя = Переменные["" + Индекс + ""];
				Код = Код + ПС + "Попытка SPd201bf6.Вставить(""" + Имя + """,Вычислить(""" + Имя + """)); Исключение КонецПопытки;" + ПС;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Код;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекст(ДляВыполнения = Ложь)
	
	Код = View().getText();
	
	Переменные = ?(ДляВыполнения, ПолучитьКодПросмотраПеременных(), "");
	
	Код = Код + Переменные;
	
	Возврат Код;
	
КонецФункции

&НаКлиенте
Функция ОчиститьТекст()
	
	Возврат View().eraseText();
	
КонецФункции

#КонецОбласти

#Область КонструкторЗапросов

&НаКлиенте
Процедура ПриЗакрытииКонструктораЗапросов(Текст, ДопПараметры) Экспорт
	
	Если Текст <> Неопределено Тогда
		
		Если НЕ View().queryMode Тогда
			Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
			Текст = СтрЗаменить(Текст, """", """""");
			Текст = """" + Текст + """";
		КонецЕсли;
		
		УстановитьТекст(Текст, ДопПараметры, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Текст, ДопПараметры)
	
	Конструктор = Новый КонструкторЗапроса();
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Попытка
			Конструктор.Текст = Текст;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение( , "Ошибка в тексте запроса:" + Символы.ПС + Инфо.Причина.Описание);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапросов", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовыйЗапрос(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторЗапроса("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьТекстЗапроса(Текст)
	
	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ВызватьКонструкторЗапроса(ПараметрыЗапроса)
	
	Если ПараметрыЗапроса = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовыйЗапрос", ЭтотОбъект);
		ТекстВопроса = "Не найден текст запроса." + Символы.ПС + "Создать новый запрос?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстЗапроса = ПодготовитьТекстЗапроса(ПараметрыЗапроса.text);
		ОткрытьКонструкторЗапроса(ТекстЗапроса, ПараметрыЗапроса.range);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторФорматнойСтроки

&НаКлиенте
Процедура ПриЗакрытииКонструктораФорматнойСтроки(ФорматнаяСтрока, ДопПараметры) Экспорт
	
	Если ФорматнаяСтрока <> Неопределено Тогда
		ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "'", "");
		ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
		УстановитьТекст(ФорматнаяСтрока, ДопПараметры, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры)
	
	Конструктор = Новый КонструкторФорматнойСтроки();
	Попытка
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение( , "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовуюФорматнуюСтроку(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторФорматнойСтроки("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьКонструкторФорматнойСтроки(ПараметрыСтроки)
	
	Если ПараметрыСтроки = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовуюФорматнуюСтроку", ЭтотОбъект);
		ТекстВопроса = "Форматная строка не найдена." + Символы.ПС + "Создать новую форматную строку?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ПараметрыСтроки.range);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановление

&НаСервереБезКонтекста
Функция КлючОбъектаНастроек()
	
	Возврат "bsl_console";
	
КонецФункции

&НаКлиенте
Функция ЕстьКод()
	
	Возврат ЗначениеЗаполнено(СтрЗаменить(СокрЛП(ПолучитьТекст()), Символы.ПС, ""));
	
КонецФункции

#КонецОбласти

#Область ДинамическоеОбновлениеМетаданных

&НаСервереБезКонтекста
Функция ОписатьОбщиеМодули(Коллекция, ФильтрГлобальный = Ложь)
	
	ОписаниеКоллекции = Новый Структура();
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		Если ОбъектМетаданных.Глобальный = ФильтрГлобальный Тогда
			ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоллекциюОбщихМодулей()
	
	КоллекцияОбщихМодулей = Новый Структура();
	КоллекцияОбщихМодулей.Вставить("Общие", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Ложь));
	КоллекцияОбщихМодулей.Вставить("Глобальные", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Истина));
	
	Возврат КоллекцияОбщихМодулей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяМетаданных(ПолноеИмя)
	
	Возврат СтрПолучитьСтроку(СтрЗаменить(ПолноеИмя, ".", Символы.ПС), 1);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетИзмерения(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("РегистрСведений");
	Объекты.Добавить("РегистрНакопления");
	Объекты.Добавить("РегистрБухгалтерии");
	Объекты.Добавить("РегистрРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетТЧ(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("Отчет");
	Объекты.Добавить("Обработка");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("ПланСчетов");
	Объекты.Добавить("ПланВидовХарактеристик");
	Объекты.Добавить("ПланВидовРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция)
	
	ОписаниеКоллекции = Новый Структура();
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники", "catalogs");
	СоответствиеИмен.Вставить("catalogs", "catalogs");
	СоответствиеИмен.Вставить("документы", "documents");
	СоответствиеИмен.Вставить("documents", "documents");
	СоответствиеИмен.Вставить("регистрысведений", "infoRegs");
	СоответствиеИмен.Вставить("informationregisters", "infoRegs");
	СоответствиеИмен.Вставить("регистрынакопления", "accumRegs");
	СоответствиеИмен.Вставить("accumulationregisters", "accumRegs");
	СоответствиеИмен.Вставить("регистрыбухгалтерии", "accountRegs");
	СоответствиеИмен.Вставить("accountingregisters", "accountRegs");
	СоответствиеИмен.Вставить("регистрырасчета", "calcRegs");
	СоответствиеИмен.Вставить("calculationregisters", "calcRegs");
	СоответствиеИмен.Вставить("обработки", "dataProc");
	СоответствиеИмен.Вставить("dataprocessors", "dataProc");
	СоответствиеИмен.Вставить("отчеты", "reports");
	СоответствиеИмен.Вставить("reports", "reports");
	СоответствиеИмен.Вставить("перечисления", "enums");
	СоответствиеИмен.Вставить("enums", "enums");
	СоответствиеИмен.Вставить("планысчетов", "сhartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts", "сhartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы", "businessProcesses");
	СоответствиеИмен.Вставить("businessprocesses", "businessProcesses");
	СоответствиеИмен.Вставить("задачи", "tasks");
	СоответствиеИмен.Вставить("tasks", "tasks");
	СоответствиеИмен.Вставить("планыобмена", "exchangePlans");
	СоответствиеИмен.Вставить("exchangeplans", "exchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик", "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes", "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета", "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes", "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы", "constants");
	СоответствиеИмен.Вставить("constants", "constants");
	СоответствиеИмен.Вставить("внешниеисточникиданных", "externalDataSources");
	СоответствиеИмен.Вставить("externaldatasources", "externalDataSources");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(ТипОбъектов)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники", "Catalogs");
	СоответствиеИмен.Вставить("catalogs", "Catalogs");
	СоответствиеИмен.Вставить("документы", "Documents");
	СоответствиеИмен.Вставить("documents", "Documents");
	СоответствиеИмен.Вставить("регистрысведений", "InformationRegisters");
	СоответствиеИмен.Вставить("informationregisters", "InformationRegisters");
	СоответствиеИмен.Вставить("регистрынакопления", "AccumulationRegisters");
	СоответствиеИмен.Вставить("accumulationregisters", "AccumulationRegisters");
	СоответствиеИмен.Вставить("регистрыбухгалтерии", "AccountingRegisters");
	СоответствиеИмен.Вставить("accountingregisters", "AccountingRegisters");
	СоответствиеИмен.Вставить("регистрырасчета", "CalculationRegisters");
	СоответствиеИмен.Вставить("calculationregisters", "CalculationRegisters");
	СоответствиеИмен.Вставить("обработки", "DataProcessors");
	СоответствиеИмен.Вставить("dataprocessors", "DataProcessors");
	СоответствиеИмен.Вставить("отчеты", "Reports");
	СоответствиеИмен.Вставить("reports", "Reports");
	СоответствиеИмен.Вставить("перечисления", "Enums");
	СоответствиеИмен.Вставить("enums", "Enums");
	СоответствиеИмен.Вставить("планысчетов", "ChartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts", "ChartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы", "BusinessProcesses");
	СоответствиеИмен.Вставить("businessprocesses", "BusinessProcesses");
	СоответствиеИмен.Вставить("задачи", "Tasks");
	СоответствиеИмен.Вставить("tasks", "Tasks");
	СоответствиеИмен.Вставить("планыобмена", "ExchangePlans");
	СоответствиеИмен.Вставить("exchangeplans", "ExchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик", "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes", "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета", "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes", "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы", "Constants");
	СоответствиеИмен.Вставить("constants", "Constants");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи)
	
	Связь = "";
	
	Типы = Реквизит.Тип.Типы();
	
	Индекс = 0;
	
	Пока Индекс < Типы.Количество() И НЕ ЗначениеЗаполнено(Связь) Цикл
		
		Тип = Типы[Индекс];
		
		СвязьТипа = Связи[Тип];
		
		Если СвязьТипа = Неопределено Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
			Если ОбъектМетаданных <> Неопределено Тогда
				
				// Сейчас связи описыватьются только для справочников и документов.
				// При желании, пожертвовав скоростью получения описания всех метаданных
				// сюда же можно добавить следующие элементы:
				// Метаданные.БизнесПроцессы businessProcesses
				// Метаданные.Задачи tasks
				// Метаданные.ПланыВидовРасчета chartsOfCalculationTypes
				// Метаданные.ПланыВидовХарактеристик chartsOfCharacteristicTypes
				// Метаданные.ПланыОбмена exchangePlans
				// Метаданные.ПланыСчетов сhartsOfAccounts
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					Связь = "catalogs." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					Связь = "documents." + ОбъектМетаданных.Имя;
				Иначе
					Связь = "";
				КонецЕсли;
				
			КонецЕсли;
			
			Связи[Тип] = Связь;
			
		Иначе
			
			Связь = СвязьТипа;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Связь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи)
	
	Связь = ?(Связи <> Неопределено, ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи), "");
	
	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);
	
	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;
	
	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданных(ТипОбъектов, АдресОбновления)
	
	ОписаниеМетаданных = "";
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		Коллекция = Метаданные[ТипОбъектов];
		
		СписокОбъектов = ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция);
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СписокОбъектов);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
		АдресОбновления = ИмяКоллекции + ".items";
		
	КонецЕсли;
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя)
	
	ТипРегистра = "";
	
	Если ИмяМетаданных(ПолноеИмя) = "РегистрСведений" Тогда
		
		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Непериодический Тогда
			ТипРегистра = "nonperiodical";
		Иначе
			ТипРегистра = "periodical";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных(ПолноеИмя) = "РегистрНакопления" Тогда
		
		Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипРегистра = "balance";
		Иначе
			ТипРегистра = "turnovers";
		КонецЕсли;
		
	Иначе
		
		ТипРегистра = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРегистра) Тогда
		ДополнительныеСвойства.Вставить("type", ТипРегистра);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных)
	
	Если ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя) Тогда
		
		Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
			
			Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ТаблицаПланаСчетов.Код КАК Код,
					|	ТаблицаПланаСчетов.ИмяПредопределенныхДанных КАК Имя
					|ИЗ
					|	&Таблица КАК ТаблицаПланаСчетов
					|ГДЕ
					|	ТаблицаПланаСчетов.Предопределенный");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
			КонецЦикла;
			
		Иначе
			
			Предопределенные = ОбъектМетаданных.ПолучитьИменаПредопределенных();
			
			Для Каждого Имя Из Предопределенные Цикл
				ОписаниеПредопределенных.Вставить(Имя, "");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов,
		ОписаниеРесурсов, ДополнительныеСвойства, Связи)
	
	Если ОбъектМетаданныхИмеетИзмерения(ПолноеИмя) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Измерения.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Измерения.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Ресурсы.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Ресурсы.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРесурсов, Реквизит, Связи);
		КонецЦикла;
		
		ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя,
		ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи)
	
	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмя) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: " + ТабличнаяЧасть.Синоним));
			
			ОписаниеТабличнойЧасти = Новый Структура();
			
			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
				ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
			КонецЦикла;
			
			Для НомерРеквизитаТЧ = 0 По ТабличнаяЧасть.Реквизиты.Количество() - 1 Цикл
				РеквизитТЧ = ТабличнаяЧасть.Реквизиты.Получить(НомерРеквизитаТЧ);
				ДобавитьОписаниеРеквизита(ОписаниеТабличнойЧасти, РеквизитТЧ, Связи);
			КонецЦикла;
			
			СтруктураТабличнойЧасти = Новый Структура();
			СтруктураТабличнойЧасти.Вставить("properties", ОписаниеТабличнойЧасти);
			
			Если 0 < ОписаниеТабличнойЧасти.Количество() Тогда
				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, СтруктураТабличнойЧасти);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.Реквизиты.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.Реквизиты.Получить(НомерРеквизита);
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи)
	
	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя) Тогда
		
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.ЗначенияПеречисления.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.ЗначенияПеречисления.Получить(НомерРеквизита);
		ОписаниеРеквизитов.Вставить(Реквизит.Имя, Новый Структура("name", Реквизит.Синоним));
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных)
	
	СтруктураИсточника = Новый Структура();
	
	ОписаниеТаблиц = Новый Структура();
	
	Для Каждого Таблица Из ОбъектМетаданных.Таблицы Цикл
		
		ОбъектныеДанные = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные;
		ТипТаблицы = ?(Таблица.ТипДанныхТаблицы = ОбъектныеДанные, "ObjectData", "NonobjectData");
		
		СтруктураТаблицы = Новый Структура();
		СтруктураТаблицы.Вставить("tableDataType", ТипТаблицы);
		
		ПоляТаблицы = Новый Структура();
		Для Каждого Поле Из Таблица.Поля Цикл
			ПоляТаблицы.Вставить(Поле.Имя, Новый Структура("name", Поле.Синоним));
		КонецЦикла;
		
		СтруктураТаблицы.Вставить("properties", ПоляТаблицы);
		
		ОписаниеТаблиц.Вставить(Таблица.Имя, СтруктураТаблицы);
		
	КонецЦикла;
	
	СтруктураИсточника.Вставить("tables", Новый Структура("items", ОписаниеТаблиц));
	
	Возврат СтруктураИсточника;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных)
	
	СтруктураИсточника = ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных);
	Для Каждого Обход Из СтруктураИсточника Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя)
	
	ОписаниеРеквизитов = Новый Структура();
	ОписаниеРесурсов = Новый Структура();
	ОписаниеПредопределенных = Новый Структура();
	ОписаниеТабличныхЧастей = Новый Структура();
	ДополнительныеСвойства = Новый Структура();
	
	Связи = Новый Соответствие();
	
	Если ИмяМетаданных(ПолноеИмя) = "Перечисление" Тогда
		ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов);
	Иначе
		ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных);
		ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя,
			ОписаниеРеквизитов, ОписаниеРесурсов, ДополнительныеСвойства, Связи);
		ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);
	
	Для Каждого Обход Из ДополнительныеСвойства Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;
	
	Если 0 < ОписаниеРесурсов.Количество() Тогда
		СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
	КонецЕсли;
	
	Если 0 < ОписаниеПредопределенных.Количество() Тогда
		СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных);
	КонецЕсли;
	
	Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
		СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеОбъектаМетаданных(ТипОбъекта, АдресОбновления)
	
	ОписаниеМетаданных = "";
	
	Части = СтрРазделить(ТипОбъекта, ".");
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(Части[0]);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		ОбъектМетаданных = Метаданные[Части[0]][Части[1]];
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		СтруктураОбъекта = Новый Структура();
		
		Если 0 < СтрНайти(ИмяМетаданных(ПолноеИмя), "ВнешнийИсточникДанных") Тогда
			ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных);
		Иначе
			ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя);
		КонецЕсли;
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СтруктураОбъекта);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		АдресОбновления = ИмяКоллекции + ".items." + ОбъектМетаданных.Имя;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
	КонецЕсли;
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьОписаниеОбъектаМетаданных(ПараметрыЗапроса, АдресОбновления);
	
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьСписокОбъектовМетаданных(ПараметрыЗапроса, АдресОбновления);
	
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаСобытияПолученияМетаданных(Событие)
	
	ПараметрыЗапроса = НРег(Событие.metadata);
	ВызыватьПодсказку = (Событие.trigger = "suggestion");
	ДанныеОбновлены = Ложь;
	
	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда
		
		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");
		
		Если ЧастиЗапроса[0] = "module" Тогда
			
			Если ЧастиЗапроса.Количество() = 2 Тогда
				ДанныеОбновлены = ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса);
			Иначе
				ДанныеОбновлены = ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса);
			КонецЕсли;
			
		Иначе
			
			ДанныеОбновлены = ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеОбновлены = ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса);
		
	КонецЕсли;
	
	Если Событие.trigger = "suggestion" И ДанныеОбновлены Тогда
		View().triggerSuggestions();
	КонецЕсли;
	
	Если Событие.trigger = "snippet" Тогда
		View().updateSnippetByGUID(Событие.snippet_guid);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияПолученияПеременной(Событие)
	
	ИмяПеременной = Событие.variableName;
	ИдентификаторПеременной = Событие.variableId;
	
	ПутьКДанным = Событие.variablePath;
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "undefined", "");
	
	Описание = ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной, ПутьКДанным, АдресХраненияПеременных);
	
	Если ЗначениеЗаполнено(Описание) Тогда
		View().updateVariableDescription(ИдентификаторПеременной, Описание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеНастройками

&НаКлиенте
Процедура УправлениеВидимостьюНастроек()
	
	Элементы.Настройки.Видимость = Элементы.ПоказатьСкрытьНастройки.Пометка;
	
КонецПроцедуры

#КонецОбласти

#Область ИсходныйКод

&НаКлиенте
Процедура ВыборКаталогаИсходногоКодаЗавершение(Файлы, ДопПараметры) Экспорт
	
	Если Файлы <> Неопределено И 0 < Файлы.Количество() Тогда
		Объект.КаталогИсходногоКодаКонфигурации = Файлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходногоКодаКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыборКаталогаИсходногоКодаЗавершение", ЭтотОбъект);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = Объект.КаталогИсходногоКодаКонфигурации;
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОбщихМодулейКлиент

&НаСервере
Функция СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей)
	
	Файл = Новый ЗаписьJSON();
	Файл.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(Файл, КоллекцияОбщихМодулей.Общие);
	Исключение
		ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	ЗначениеКоллекции = Файл.Закрыть();
	
	Возврат ПоместитьВоВременноеХранилище(ЗначениеКоллекции, Новый УникальныйИдентификатор());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей)
	
	// Соответствие между именем общего неглобального модуля в нижнем регистре
	// и именем модуля, как оно задано в конфигураторе для правильной загрузки
	// текстов общих модулей
	ОбщиеМодули = Новый Соответствие();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Общие Цикл
		ОбщиеМодули.Вставить(НРег(Обход.Ключ), Обход.Ключ);
	КонецЦикла;
	
	ИменаОбщихМодулей = Новый ФиксированноеСоответствие(ОбщиеМодули);
	
	// Именя глобальных модулей для загрузки текстов
	Модули = Новый Массив();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Глобальные Цикл
		Модули.Добавить(Обход.Ключ);
	КонецЦикла;
	
	ГлобальныйМодули = Новый ФиксированныйМассив(Модули);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМодульИзИсходников(ПолноеИмяФайла)
	
	СмещениеИмениВПути = 3;
	
	Путь = СтрРазделить(ПолноеИмяФайла, РазделительПути, Ложь);
	ИмяМодуля = Путь[Путь.Количество() - СмещениеИмениВПути];
	
	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ПолноеИмяФайла);
	ТекстМодуля = Текст.ПолучитьТекст();
	
	Возврат Новый Структура("Имя, Текст", ИмяМодуля, ТекстМодуля);
	
КонецФункции

&НаКлиенте
Функция НормализоватьПуть(Путь)
	
	Путь = СокрЛП(Путь);
	
	Если Прав(Путь, 1) <> РазделительПути Тогда
		Путь = Путь + РазделительПути;
	КонецЕсли;
	
	Возврат Путь;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКаталогИсходногоКода()
	
	Возврат КаталогXML;
	
КонецФункции

&НаКлиенте
Процедура ВопросЗагрузкиОбщихМодулейЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Состояние("Загрузка общих модулей...");
		Файлы = НайтиФайлы(ДопПараметры.КаталогМодулей, "Ext" + РазделительПути + "*.bsl", Истина);
		
		Для Каждого Файл Из Файлы Цикл
			ОбщийМодуль = ПолучитьМодульИзИсходников(Файл.ПолноеИмя);
			View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст);
		КонецЦикла;
		
		Состояние("Общие модули загружены");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Глобальный)
	
	ЗагруженоФункций = 0;
	
	ИмяВКонфигураторе = ИменаОбщихМодулей.Получить(НРег(ИмяМодуля));
	
	Если ИмяВКонфигураторе = Неопределено Тогда
		ИмяВКонфигураторе = ИмяМодуля;
	КонецЕсли;
	
	ФайлМодуля = СтрШаблон("CommonModules%1%2%1Ext%1Module.bsl", РазделительПути, ИмяВКонфигураторе);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Если ФайлНаДиске.Существует() Тогда
		ОбщийМодуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ЗагруженоФункций = View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст, Глобальный);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки)
	
	ЗагруженоФункций = 0;
	ТипМодуля = СтруктураВыгрузки.ТипМодуля;
	
	ИмяТипа = ?(ТипМодуля = "manager", "ManagerModule", "ObjectModule");
	
	ФайлМодуля = СтрШаблон("%1%2Ext%2%3.bsl", СтруктураВыгрузки.ИмяКаталога, РазделительПути, ИмяТипа);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Если ФайлНаДиске.Существует() Тогда
		Модуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		АдресЗагрузки = СтрШаблон("%1.items.%2.%3", ИмяКоллекции, СтруктураВыгрузки.ИмяОбъектаМетаданных, ТипМодуля);
		ЗагруженоФункций = View().parseMetadataModule(Модуль.Текст, АдресЗагрузки);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьГлобальныеМодули()
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	ЕстьГлобальныеМодули = (ГлобальныйМодули <> Неопределено И 0 < ГлобальныйМодули.Количество());
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЕстьГлобальныеМодули Тогда
		
		КаталогМодулей = КаталогИсходногоКода + "CommonModules";
		
		КаталогНаДиске = Новый Файл(КаталогМодулей);
		
		Если КаталогНаДиске.Существует() Тогда
			
			Индекс = 0;
			
			Пока Индекс < ГлобальныйМодули.Количество() Цикл
				ИмяМодуля = ГлобальныйМодули.Получить(Индекс);
				ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Истина);
				Индекс = Индекс + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 2;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		ИмяМодуля = ЧастиЗапроса[1];
		
		ЗагруженоФункций = ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Ложь);
		
		Если 0 < ЗагруженоФункций Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, РазделительПути)
	
	СтруктураВыгрузки.Вставить("ИмяКаталога", Неопределено);
	ЧастейМетаданных = 2;
	
	Попытка
		ПолноеИмя = Метаданные[СтруктураВыгрузки.ТипМетаданных][СтруктураВыгрузки.ОбъектМетаданных].ПолноеИмя();
	Исключение
		ПолноеИмя = "";
	КонецПопытки;
	
	Имена = СтрРазделить(ПолноеИмя, ".", Ложь);
	
	Если Имена.Количество() = ЧастейМетаданных Тогда
		
		КаталогТипа = ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		
		Если ЗначениеЗаполнено(КаталогТипа) Тогда
			ИндексОбъекта = 1;
			СтруктураВыгрузки.Вставить("ИмяОбъектаМетаданных", Имена[ИндексОбъекта]);
			СтруктураВыгрузки.ИмяКаталога = СтрШаблон("%1%2%3", КаталогТипа, РазделительПути, Имена[ИндексОбъекта]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 4;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		СтруктураВыгрузки = Новый Структура();
		СтруктураВыгрузки.Вставить("ТипМодуля", ЧастиЗапроса[1]);
		СтруктураВыгрузки.Вставить("ТипМетаданных", ЧастиЗапроса[2]);
		СтруктураВыгрузки.Вставить("ОбъектМетаданных", ЧастиЗапроса[3]);
		
		ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, РазделительПути);
		
		Если ЗначениеЗаполнено(СтруктураВыгрузки.ИмяКаталога) Тогда
			
			ЗагруженоФункций = ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки);
			
			Если 0 < ЗагруженоФункций Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокОбщихМодулей()
	
	КоллекцияМетаданных = ПолучитьИзВременногоХранилища(АдресОбщихМодулей);
	
	Если КоллекцияМетаданных <> Неопределено Тогда
		Результат = View().updateMetadata(КоллекцияМетаданных, "commonModules.items");
		ЗагрузитьГлобальныеМодули();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(Значение, ЗначениеПоУмолчанию = 0)
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) ИЛИ СтрокаБезНулей = "-" Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И НЕ ПустаяСтрока(СтрокаБезНулей), Результат, ЗначениеПоУмолчанию);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт
	
	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		ЗакрытьКонсоль(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль)
	
	ПараметрыОповещения = Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль);
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьПредупреждение(Оповещение, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРазделительПути()
	
	РазделительПути = ПолучитьРазделительПути();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТемы()
	
	ИмяТемы = Неопределено;
	
	Имена = Новый Соответствие();
	Имена.Вставить("СветлаяТема", "bsl-white");
	Имена.Вставить("ТемнаяТема", "bsl-dark");
	
	Для Каждого Элемент Из Элементы.Тема.ПодчиненныеЭлементы Цикл
		Если Элемент.Пометка Тогда
			ИмяТемы = Имена[Элемент.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяТемы;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьТему(Тема)
	
	View().setTheme(Тема);
	
КонецПроцедуры

&НаСервере
Функция ЭтотОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Функция ПолучитьМакет(ИмяМакета)
	
	Возврат ЭтотОбъект().ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаСервере
Функция ПолучитьТекстМакета(ИмяМакета, УдалятьПереносыСтрок)
	
	Макет = ПолучитьМакет(ИмяМакета);
	Текст = Макет.ПолучитьТекст();
	
	Если УдалятьПереносыСтрок Тогда
		Текст = СтрЗаменить(Текст, Символы.ПС, " ");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Функция ВебДокументДоступен()
	
	Если Элементы.ПолеHTML.Документ <> Неопределено И Элементы.ПолеHTML.Документ.defaultView <> Неопределено Тогда
		Попытка
			ПолучитьТекст();
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПользовательскиеФункции()
	
	JSON = ПолучитьТекстМакета("ПользовательскиеФункции", Истина);
	Результат = View().updateCustomFunctions(JSON);
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		СообщитьПользователю("Пользовательские функции успешно загружены!");
	Иначе
		Ошибка = "Не удалось загрузить пользовательские функции: " + Символы.ПС + Результат.errorDescription;
		ВывестиОшибку(Ошибка, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт
	
	ИндексныйФайл = "";
	
	Если ДопПараметры.СтандартноеЗакрытие Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКонсоль(СтандартноеЗакрытие)
	
	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		ПараметрыОповещения = Новый Структура("СтандартноеЗакрытие", СтандартноеЗакрытие);
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтотОбъект, ПараметрыОповещения);
		НачатьУдалениеФайлов(Оповещение, ИндексныйФайл);
	Иначе
		Если СтандартноеЗакрытие Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураРеквизита(Имя, Ссылка = Неопределено)
	
	Реквизит = Новый Структура();
	Реквизит.Вставить("name", Имя);
	
	Если Ссылка <> Неопределено Тогда
		Реквизит.Вставить("ref", Ссылка);
	КонецЕсли;
	
	Возврат Реквизит;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПользовательскиеОбъекты()
	
	Объекты = Неопределено;
	
	Если Метаданные.Справочники.Количество() <> 0 И Метаданные.Документы.Количество() <> 0 Тогда
		
		Объекты = Новый Структура();
		
		// Первый объект назовём "_СтруктураВыгрузки", у него будет 3 реквизита.
		// Реквизит "Номенклатура" будет ссылаться на соответствующий справочник,
		// если он есть, или на первый попавшийся справочник
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Справочник = Метаданные.Справочники.Найти("Номенклатура");
		Если Справочник = Неопределено Тогда
			Справочник = Метаданные.Справочники.Получить(0);
		КонецЕсли;
		
		// Ссылка на объект указывается как catalogs.ИмяСправочника или documents.ИмяДокумента
		// catalogs и documents - соответственно имена объектов, хранящих описание метаданных в файле bslMetadata.js
		// В модуле объекта есть функция ПолучитьСвязьСОбъектомМетаданных(Реквизит), которая принимает реквизит
		// Её достаточно просто модифицировать, чтобы она принимала, например, тип и сразу отдавала связь в нужном виде
		
		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);
		
		Реквизит = СтруктураРеквизита("Цена товара");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);
		
		Реквизит = СтруктураРеквизита("Остаток товара на складе");
		ПользовательскийОбъект.properties.Вставить("Остаток", Реквизит);
		
		Объекты.Вставить("_СтруктураВыгрузки", ПользовательскийОбъект);
		
		// Второй объект будет называться "_Партия", у него будет 3 реквизита,
		// два из которых "ПриходнаяНакладная" и "Номенклатура" будут ссылаться
		// на документ и справочник соотвественно
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровУслуг");
		Если Документ = Неопределено Тогда
			Документ = Метаданные.Документы.Найти("ПоступлениеТоваров");
			Если Документ = Неопределено Тогда
				Документ = Метаданные.Документы.Получить(0);
			КонецЕсли;
		КонецЕсли;
		
		Реквизит = СтруктураРеквизита("Документ закупки", "documents." + Документ.Имя);
		ПользовательскийОбъект.properties.Вставить("ПриходнаяНакладная", Реквизит);
		
		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);
		
		Реквизит = Новый Структура("name", "Закупочная цена");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);
		
		Объекты.Вставить("_Партия", ПользовательскийОбъект);
		
		// Теперь загоняем наши объекты в JSON-строку
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, Новый Структура("customObjects", Объекты));
			Объекты = Файл.Закрыть();
		Исключение
			СообщитьПользователю("Не удалось сохранить пользовательские объекты:" + Символы.ПС + ОписаниеОшибки());
			Объекты = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Объекты;
	
КонецФункции

#КонецОбласти

#КонецОбласти
// BSLLS-on
#КонецОбласти