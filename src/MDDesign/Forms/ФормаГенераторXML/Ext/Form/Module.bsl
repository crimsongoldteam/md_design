// MIT License

// Copyright (c) 2025 Zherebtsov Nikita <nikita@crimsongold.ru>

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/crimsongoldteam/md_design

#Область ОписаниеПеременных

&НаКлиенте
Перем мПараметрыВыполнения;

&НаКлиенте
Перем мЭлементДереваФорма;

&НаКлиенте
Перем мЭлементДереваРеквизиты;

&НаКлиенте
Перем мЭлементыДереваРазделы;

&НаКлиенте
Перем мКэшПараметрыМодулей;

&НаКлиенте
Перем мКэшОткрытыхФайлов;

#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
Функция РазделыМетаданных()      
	Результат = Новый Структура;
	
	ОписаниеРазделов = ПолучитьОписаниеРазделовМетаданных();
	Для Каждого РазделМетаданных Из ОписаниеРазделов Цикл
		Результат.Вставить(РазделМетаданных.Имя, РазделМетаданных.Имя);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Функция ТипыЗначенийСвойств()
	Результат = Новый Структура;
	Результат.Вставить("СистемноеПеречисление", "СистемноеПеречисление");
	Результат.Вставить("БиблиотекаКартинок", "БиблиотекаКартинок");
	Результат.Вставить("WebЦвета", "WebЦвета");
	
	Возврат Результат;
КонецФункции

// Возвращает параметры метода (процедуры или функции)
//
// Возвращаемое значение:
// - Структура - параметры метода
&НаКлиенте
Функция ПолучитьПараметрыМетода()
	Результат = Новый Структура;
	Результат.Вставить("Размещение");
	Результат.Вставить("Содержимое", МетодСтруктураОписания());
	Результат.Вставить("Область");
	Результат.Вставить("Существует", Ложь);
	Результат.Вставить("Позиция", Неопределено);
	
	Результат.Содержимое.ЭтоФункция = Истина;
	Результат.Содержимое.Экспортная = Ложь;
	Результат.Содержимое.Асинх = Ложь;
	
	Возврат Результат;
КонецФункции

// Добавляет метод (процедуру или функцию) в очередь на создание или обновление
//
// Параметры:
// - ПараметрыМетода - Структура - параметры метода, см. ПолучитьПараметрыМетода
&НаКлиенте
Процедура СоздатьПолучитьМетод(ПараметрыМетода)
	ПараметрыМодуля = ПолучитьПараметрыМодуля(ПараметрыМетода.Размещение);
	
	//СтрокаМетод = ПолучитьМетод(ПараметрыМодуля.ДеревоМодуля, ПараметрыМетода.Содержимое.Имя);
	СтрокаМетод = Неопределено;
	
	//Если СтрокаМетод = Неопределено Тогда
	//	ДобавитьМетодВОбласть(ПараметрыМодуля.СтруктураОбластей, ПараметрыМетода);
	//	Возврат;
	//КонецЕсли;
	
	ПараметрыМетода.Существует = Истина;
	ПараметрыМетода.Содержимое = СтрокаМетод.Содержимое;
	ПараметрыМетода.Позиция = СтрокаМетод.Позиция;
	
	ПараметрыМодуля.ИзмененныеМетоды.Добавить(ПараметрыМетода);
КонецПроцедуры

&НаКлиенте
Функция СоздатьПолучитьОбъектКонфигурации(Тип, Имя)
	СтрокаРаздел = СоздатьПолучитьРазделВДеревеИзменений(Тип);   
	
	ЭлементыРаздела = СтрокаРаздел.ПолучитьЭлементы();
	Для Каждого ЭлементРаздела Из ЭлементыРаздела Цикл
		Если ЭлементРаздела.Имя = Имя Тогда
			Возврат ЭлементРаздела;
		КонецЕсли;
	КонецЦикла;  
	
	СтрокаОбъект = СтрокаРаздел.ПолучитьЭлементы().Добавить();
	СтрокаОбъект.Имя = Имя;
	СтрокаОбъект.Тип = Тип;
	СтрокаОбъект.Картинка = СтрокаРаздел.Картинка;
	СтрокаОбъект.ЭтоНовый = НЕ ЕстьОбъектКонфигурации(Тип, Имя);
	СтрокаОбъект.Подразделы = Новый Структура("Реквизиты,Формы");
	
	Возврат СтрокаОбъект;
КонецФункции 

&НаКлиенте
Функция СоздатьПолучитьРеквизитОбъекта(СтрокаОбъект, Имя, ОписаниеТипов, Родитель = Неопределено)
	ИДСтрокиРеквизиты = СтрокаОбъект.Подразделы.Реквизиты;
	Если ИДСтрокиРеквизиты = Неопределено Тогда
		СтрокаРеквизиты = СтрокаОбъект.ПолучитьЭлементы().Добавить();
		СтрокаРеквизиты.Имя = "Реквизиты";
		СтрокаРеквизиты.Картинка = БиблиотекаКартинок.Реквизит;
		СтрокаРеквизиты.ЭтоНовый = Ложь;  
		СтрокаОбъект.Подразделы.Реквизиты = СтрокаРеквизиты.ПолучитьИдентификатор();
	Иначе
		СтрокаРеквизиты = ДеревоКонфигурации.НайтиПоИдентификатору(ИДСтрокиРеквизиты);
	КонецЕсли;  
	
	СтрокаРеквизит = ПолучитьЭлементДереваИзмененийПоИмени(СтрокаРеквизиты, Имя);
	
	Если СтрокаРеквизит <> Неопределено Тогда
		Возврат СтрокаРеквизит;
	КонецЕсли;
	
	СтрокаРеквизит = СтрокаРеквизиты.ПолучитьЭлементы().Добавить();
	СтрокаРеквизит.Имя = Имя;
	СтрокаРеквизит.Картинка = БиблиотекаКартинок.Реквизит;
	СтрокаРеквизит.ЭтоНовый = НЕ ЕстьРеквизитОбъектаКонфигурации(СтрокаОбъект.Тип, СтрокаОбъект.Имя, Имя);
	
	//ЭтоДерево = ОписаниеРеквизита.ОписаниеТипов.Типы.Найти("ДеревоЗначений") <> Неопределено;
	//ЭтоТаблица = ЭтоДерево ИЛИ ОписаниеРеквизита.ОписаниеТипов.Типы.Найти("ТаблицаЗначений") <> Неопределено;
	//Если НЕ ЭтоТаблица Тогда
	//	СтрокаРеквизит.ОписаниеТипов = ОписаниеРеквизита.ОписаниеТипов;
	//КонецЕсли;
	//
	//СтрокаРеквизит.ЭтоТаблица = ЭтоТаблица;
	//СтрокаРеквизит.ЭтоДерево = ЭтоДерево;
	
КонецФункции

&НаКлиенте
Функция ЕстьРеквизитОбъектаКонфигурации(ТипОбъекта, ИмяОбъекта, ИмяРеквизита)         
	Путь = ПолучитьПутьКФайлуОбъекта(ТипОбъекта, ИмяОбъекта);
	ДокументКонфигурации = ОткрытьФайлКонфигурации(Путь, Ложь);

	ОписаниеТипаОбъекта = ПолучитьРазделМетаданныхПоИмени(ТипОбъекта);
	
	ШаблонЗапроса = 
	    "//*[local-name()='Attribute']/
		|*[local-name()='Properties']/
		|*[local-name()='Name' and text()='%1']";
	
	ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ИмяРеквизита);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументКонфигурации);
	Выражение = ДокументКонфигурации.СоздатьВыражениеXPath(ТекстЗапроса, Разыменователь);
	Результат = Выражение.Вычислить(ДокументКонфигурации, ТипРезультатаDOMXPath.Булево);	
	
	Возврат Результат.БулевоЗначение;
	
КонецФункции

&НаКлиенте
Функция ЕстьОбъектКонфигурации(Тип, Имя)
	ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(Тип);
	ВнутреннийТип = ОписаниеРаздела.ВнутреннееИмя;           
	
	ШаблонЗапроса = 
		"/*[local-name()='MetaDataObject']/
		|*[local-name()='Configuration']/
		|*[local-name()='ChildObjects']/
		|*[local-name()='%1' and text()='%2']";
	
	ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ВнутреннийТип, Имя);
	
	ДокументКонфигурации = ОткрытьФайлКонфигурации(ПолучитьПутьКФайлуКонфигурации(), Ложь);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументКонфигурации);
	Выражение = ДокументКонфигурации.СоздатьВыражениеXPath(ТекстЗапроса, Разыменователь);
	Результат = Выражение.Вычислить(ДокументКонфигурации, ТипРезультатаDOMXPath.Булево);	
	
	Возврат Результат.БулевоЗначение;
КонецФункции      

&НаКлиенте
Функция СоздатьФорму(СтрокаОбъект, Имя)
	ИДСтрокиФормы = СтрокаОбъект.Подразделы.Формы;
	Если ИДСтрокиФормы = Неопределено Тогда
		СтрокаФормы = СтрокаОбъект.ПолучитьЭлементы().Добавить();
		СтрокаФормы.Имя = "Формы";
		СтрокаФормы.Тип = "Формы";
		СтрокаФормы.Картинка = БиблиотекаКартинок.Форма;
		СтрокаФормы.ЭтоНовый = Ложь;  
		СтрокаОбъект.Подразделы.Формы = СтрокаФормы.ПолучитьИдентификатор();
	Иначе
		СтрокаФормы = ДеревоКонфигурации.НайтиПоИдентификатору(ИДСтрокиФормы);
	КонецЕсли;    
	//
	//Если ЕстьФормаКонфигурации() Тогда
	//	ВызватьИсключение СтрШаблон(НСтр("ru = 'Форма с именем ""%1"" уже существует'"), Тип);
	//КонецЕсли;
	
	СтрокаФорма = СтрокаФормы.ПолучитьЭлементы().Добавить();
	СтрокаФорма.Тип = "Форма";
	СтрокаФорма.Имя = Имя;
	СтрокаФорма.Картинка = БиблиотекаКартинок.Форма;
	СтрокаФорма.ЭтоНовый = Истина;
	СтрокаФорма.Подразделы = Новый Структура("Реквизиты,Элементы");
	
	Возврат СтрокаФорма;
КонецФункции

&НаКлиенте
Функция СоздатьЭлементФормы(СтрокаРодитель, ИмяЭлемента, ТипЭлемента, ВидЭлемента = Неопределено)
	Если СтрокаРодитель.Тип = "Форма" Тогда
		ИДСтрокиФормы = СтрокаРодитель.Подразделы.Элементы;
		Если ИДСтрокиФормы = Неопределено Тогда
			СтрокаЭлементы = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			СтрокаЭлементы.Имя = "Элементы";
			СтрокаЭлементы.Картинка = БиблиотекаКартинок.ОформлениеДефисЖелтый;
			СтрокаЭлементы.ЭтоНовый = Ложь;  
			СтрокаРодитель.Подразделы.Элементы = СтрокаЭлементы.ПолучитьИдентификатор();
		Иначе
			СтрокаЭлементы = ДеревоКонфигурации.НайтиПоИдентификатору(ИДСтрокиФормы);
		КонецЕсли;    
	Иначе
		СтрокаЭлементы = СтрокаРодитель;
	КонецЕсли;
	
	СтрокаЭлемент = СтрокаЭлементы.ПолучитьЭлементы().Добавить();
	
	
	ТипВидЭлемента = ПолучитьТипВидЭлемента(ТипЭлемента, ВидЭлемента);
	СтрокаЭлемент.ТипЭлемента = ТипЭлемента;
	СтрокаЭлемент.ВидЭлемента = ВидЭлемента;
	
	
	ТипВнутренний = ПолучитьВнутреннееИмяТипаЭлемента(ТипВидЭлемента);
	Если ТипВнутренний = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Для типа элемента ""%1"" в макете ""ТипыЭлементов"" не указано внутреннее название.'"), ТипЭлемента);
		Сообщение.Сообщить();
	КонецЕсли;
	СтрокаЭлемент.ТипЭлементаВнутренний = ТипВнутренний;
	СтрокаЭлемент.Имя = ИмяЭлемента;
	СтрокаЭлемент.ЭтоНовый = Истина;
	СтрокаЭлемент.Картинка = БиблиотекаКартинок.ОформлениеДефисЖелтый;    
	СтрокаЭлемент.НаборСвойств = Новый Структура;
	
	Возврат СтрокаЭлемент;
КонецФункции 

&НаКлиенте
Процедура УстановитьСвойствоЭлементаФормы(СтрокаЭлементФормы, Имя, Значение, Тип = Неопределено)
	Если Тип = ТипыЗначенийСвойств().БиблиотекаКартинок Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'В этой версии не поддерживается работа с картинками (%1).'"), Значение);
	КонецЕсли;
	
	ТипЭлемента = СтрокаЭлементФормы.ТипЭлемента;
	ВидЭлемента = СтрокаЭлементФормы.ВидЭлемента;
	
	ИмяВнутреннее = ПолучитьВнутреннееИмяСвойства(ТипЭлемента, ВидЭлемента, Имя);
	
	Если ИмяВнутреннее = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
		НСтр("ru = 'Для свойства ""%1"" типа ""%2"" в макете ""Свойства"" не указано внутреннее название.'"),
			Имя,
			СтрокаЭлементФормы.ТипЭлемента + " - " + СтрокаЭлементФормы.ВидЭлемента);
	КонецЕсли;
	
	Если Тип = ТипыЗначенийСвойств().WebЦвета Тогда
		ЗначениеВнутреннее = "web:" + УправлениеСвойствами().ПолучитьВнутреннееИмяЦвета(Значение);
			//ИначеЕсли ЗначениеСвойства.Тип = "БиблиотекаКартинок" Тогда
			//	ЗначениеСвойства.Значение = "Print";
			//
			//			<Picture>
			//	<xr:Ref>StdPicture.Print</xr:Ref>
			//	<xr:LoadTransparent>true</xr:LoadTransparent>
			//</Picture>
	ИначеЕсли Тип = ТипыЗначенийСвойств().СистемноеПеречисление Тогда
		ЗначениеВнутреннее = ПолучитьВнутреннееЗначениеСвойства(ТипЭлемента, ВидЭлемента, Имя, Значение);
		Если ЗначениеВнутреннее = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Для значения ""%1"" свойства ""%2"" тип ""%3"" в макете ""Свойства"" не указано внутреннее название.'"),
				Значение,
				Имя,
				ТипЭлемента + " - " + ВидЭлемента);
		КонецЕсли;
		ЗначениеВнутреннее = Значение;
	Иначе
		ЗначениеВнутреннее = XMLСтрока(Значение);
	КонецЕсли;
		
	Если СтрокаЭлементФормы.Тип = "КнопкаФормы" И Имя = "ИмяКоманды" Тогда
		ЗначениеВнутреннее = "Form.Command." + Значение;
	КонецЕсли;
		
	СтрокаЭлементФормы.НаборСвойств.Вставить(ИмяВнутреннее, ЗначениеВнутреннее);
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьРеквизитФормы()

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыРеквизитаОбъектаКонфигурации()
	Результат = Новый Структура;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СоздатьПолучитьРеквизитОбъектаКонфигурации(ПараметрыРеквизита)
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПолучитьФормуОбъектаКонфигурации(ПараметрыФормы)
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяСоздаваемойФормы()
	Возврат мЭлементДереваФорма.Имя;
КонецФункции

&НаКлиенте
Процедура УстановитьТелоМетода(ПараметрыПроцедуры, Текст)
	ПараметрыПроцедуры.Содержимое.Тело = ПолучитьТекстТелаСОтступами(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКТелуМетода(ПараметрыПроцедуры, Текст)
	Если ПустаяСтрока(ПараметрыПроцедуры.Содержимое.Тело) Тогда
		УстановитьТелоМетода(ПараметрыПроцедуры, Текст);
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры.Содержимое.Тело =
		ПараметрыПроцедуры.Содержимое.Тело
		+ Символы.ПС
		+ ПолучитьТекстТелаСОтступами(Текст);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстТелаСОтступами(Строка)
	Результат = "";
	МассивСтрок = СтрРазделить(Строка, Символы.ПС);
	МассивСтрокРезультат = Новый Массив;
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		МассивСтрокРезультат.Добавить(Символы.Таб + ТекСтрока);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрокРезультат, Символы.ПС);
КонецФункции


#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//ЭлементыДеревоРеквизиты = ДеревоРеквизиты.ПолучитьЭлементы();
	//Для Каждого ОписаниеРеквизита Из Параметры.СхемыФормы.СхемаРеквизиты Цикл
	//	СтрокаРеквизиты = ЭлементыДеревоРеквизиты.Добавить();
	//	СтрокаРеквизиты.Пометка = Истина;
	//	СтрокаРеквизиты.ТекИмя = ОписаниеРеквизита.Имя;
	//	СтрокаРеквизиты.Имя = ОписаниеРеквизита.Имя;
	//	СтрокаРеквизиты.УИД = Новый УникальныйИдентификатор;
	//
	//	ЭтоДерево = ОписаниеРеквизита.ОписаниеТипов.Типы.Найти("ДеревоЗначений") <> Неопределено;
	//	ЭтоТаблица = ЭтоДерево ИЛИ ОписаниеРеквизита.ОписаниеТипов.Типы.Найти("ТаблицаЗначений") <> Неопределено;
	//	Если НЕ ЭтоТаблица Тогда
	//
	//		СтрокаРеквизиты.ОписаниеТипов = ОбработкаОбъект.ПолучитьОписаниеТипов(ОписаниеРеквизита.ОписаниеТипов);
	//
	//		Продолжить;
	//	КонецЕсли;
	//
	//	СтрокаРеквизиты.ЭтоТаблица = ЭтоТаблица;
	//	СтрокаРеквизиты.ЭтоДерево = ЭтоДерево;
	//	Для Каждого ОписаниеПодчиненногоРеквизита Из ОписаниеРеквизита.Подчиненные Цикл
	//		СтрокаПодчиненныйРеквизит = СтрокаРеквизиты.ПолучитьЭлементы().Добавить();
	//		СтрокаПодчиненныйРеквизит.Пометка = Истина;
	//		СтрокаПодчиненныйРеквизит.ТекИмя = ОписаниеПодчиненногоРеквизита.Имя;
	//		СтрокаПодчиненныйРеквизит.Имя = ОписаниеПодчиненногоРеквизита.Имя;
	//		СтрокаПодчиненныйРеквизит.УИД = Новый УникальныйИдентификатор;
	//		СтрокаПодчиненныйРеквизит.ОписаниеТипов = ОбработкаОбъект.ПолучитьОписаниеТипов(ОписаниеПодчиненногоРеквизита.ОписаниеТипов);
	//	КонецЦикла;
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мПараметрыВыполнения = Новый Структура();
	
	
	мПараметрыВыполнения.Вставить("КаталогXML", "");
	
	мПараметрыВыполнения.Вставить("КаталогForms", "");
	мПараметрыВыполнения.Вставить("КаталогФормы", "");
	мПараметрыВыполнения.Вставить("КаталогExt", "");
	
	мПараметрыВыполнения.Вставить("ИмяФайлаForm", "");
	мПараметрыВыполнения.Вставить("ИмяФайлаФормы", "");
	мПараметрыВыполнения.Вставить("ИмяФайлаОбъекта", "");
	
	мПараметрыВыполнения.Вставить("ВерсияXML", "1.0");
	мПараметрыВыполнения.Вставить("АттрибутыОбщие", Новый Соответствие);
	мПараметрыВыполнения.Вставить("АттрибутMDClasses", "http://v8.1c.ru/8.3/MDClasses");
	мПараметрыВыполнения.Вставить("АттрибутForm", "http://v8.1c.ru/8.3/xcf/logform");
	
	мПараметрыВыполнения.Вставить("ИдентификаторФормы", Строка(Новый УникальныйИдентификатор));
	
	мПараметрыВыполнения.Вставить("Идентификатор", 1);
	
	
	ОбновитьПредставлениеОбъекта();
	
	//ЗаполнитьДеревоИзменений();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	Если ЕстьКритическиеОшибки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'При подготовке данных возникли критические ошибки. Выгрузка невозможна!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ИмяНовойФормы = мЭлементДереваФорма.Имя;
	УстановитьКаталогВПараметрыВыполнения(ИмяНовойФормы);
	
	мПараметрыВыполнения.Вставить("Отказ", Ложь);
	
	ЗаполнитьДеревоКонфигурации();
	СоздатьКаталог(мПараметрыВыполнения.КаталогExt);
	СоздатьФайлФормы(мПараметрыВыполнения);
	СоздатьФайлForm(мПараметрыВыполнения);
	ДобавитьФормуВФайлОбъекта(мПараметрыВыполнения);
	
	Для Каждого КЗРазделы Из мЭлементыДереваРазделы Цикл
		Если КЗРазделы.Ключ = "Перечисления" Тогда
			ЭлементыДерева = КЗРазделы.Значение.ПолучитьЭлементы();
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				Если НЕ ЭлементДерева.ЭтоНовый Тогда
					Продолжить;
				КонецЕсли;
				ДобавитьПеречисление(мПараметрыВыполнения, ЭлементДерева);
			КонецЦикла;
		КонецЕсли;
		Если КЗРазделы.Ключ = "Справочники" Тогда
			ЭлементыДерева = КЗРазделы.Значение.ПолучитьЭлементы();
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				Если НЕ ЭлементДерева.ЭтоНовый Тогда
					Продолжить;
				КонецЕсли;
				ДобавитьСправочник(мПараметрыВыполнения, ЭлементДерева);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьНовыеОбъектыВConfiguration();
	
	Если НЕ мПараметрыВыполнения.Отказ Тогда
		Закрыть();
		Состояние("Выгрузка успешно завершена");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИменаГрупп(Команда)
	//ЗапросИИ = Новый Массив;
	//ЗаполнитьЗапросКИИ(мЭлементДереваФорма, ЗапросИИ, "");
	//
	//ЗапросИИСтрока = СтрСоединить(ЗапросИИ, Символы.ПС);
	
	//
	//Настройки = РаботаСИИ().ПолучитьНастройки();
	//Настройки.ПровайдерИИ = ВладелецФормы.ПровайдерИИ;
	//Настройки.МодельИИ = ВладелецФормы.МодельИИ;
	//Настройки.ТокенИИ = ВладелецФормы.ТокенИИ;
	//
	//Ответ = РаботаСИИ().ПолучитьИменаЭлементовФормы(ЗапросИИСтрока, Настройки);
	//
	//Если Ответ = Неопределено Тогда
	//	ВызватьИсключение "Не удалось получить ответ от ИИ!";
	//КонецЕсли;
	//
	//ПозицияНачала = СтрНайти(Ответ, "{");
	//Ответ = Сред(Ответ, ПозицияНачала);
	//
	//ОтветСтруктура = СлужебныеФункции().JSONВСтруктуру(Ответ);
	//
	//ЗаполнитьИменаЭлементовПоОтветуИИ(мЭлементДереваФорма, ОтветСтруктура);
	//
	//ЗаполнитьИменаРеквизитовПоОтветуИИ(мЭлементДереваРеквизиты, ОтветСтруктура);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкрипт(Команда)
	ЗаполнитьДеревоИзменений();
	//// ПриСозданииНаСервере
	//ПараметрыПроцедуры = ПолучитьПараметрыМетода();
	//ПараметрыПроцедуры.Расположение = ПолучитьИмяСоздаваемойФормы();
	//ПараметрыПроцедуры.Содержимое.Имя = "ПриСозданииНаСервере";
	//ПараметрыПроцедуры.Область = "ОбработчикиСобытийФормы";
	//
	//СоздатьПолучитьМетод(ПараметрыПроцедуры);
	//УстановитьТелоМетода(ПараметрыПроцедуры, "123");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогXMLНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Каталог = КаталогXML;
	ДиалогВыбораКаталога.Заголовок = "Выберите каталог xml-выгрузки конфигурации";
	
	Оповещение = Новый ОписаниеОповещения("КаталогXMLНачалоВыбораЗавершение", ЭтотОбъект);
	ДиалогВыбораКаталога.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура КаталогXMLНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КаталогXML = Результат[0];    
КонецПроцедуры

&НаКлиенте
Процедура ИмяОбъектаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(КаталогXML) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("Заполните каталог XML");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяОбъектаНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура("КаталогXML", КаталогXML);
	
	ФормаПросмотр = ОткрытьФорму(ПолучитьОписаниеОбработки() + ".Форма.ФормаВыбораОбъектаКонфигурации", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ИмяОбъектаНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбъекта = РезультатЗакрытия.ИмяОбъекта;
	ТипОбъекта = РезультатЗакрытия.ТипОбъекта;
	ОбновитьПредставлениеОбъекта();
	
	ЗаполнитьДеревоИзменений();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Модули

&НаКлиенте
Функция УправлениеСвойствамиНаСервере()
	Возврат ВладелецФормы.УправлениеСвойствами();
КонецФункции

&НаКлиенте
Функция УправлениеСвойствами()
	Возврат ВладелецФормы.УправлениеСвойствами();
КонецФункции

&НаКлиенте
Функция СлужебныеФункции()
	Возврат ВладелецФормы.СлужебныеФункции();
КонецФункции

&НаКлиенте
Функция РаботаСИИ()
	Возврат ВладелецФормы.РаботаСИИ();
КонецФункции

#КонецОбласти

#Область ВыполнениеСкриптов

&НаКлиенте
Функция ПолучитьПараметрыМодуля(РазмещениеМодуля)
	Возврат Новый Структура;
КонецФункции

// Создает и возвращает структуру описания метода
//
// Параметры:
//
//
// Возвращаемое значение:
//  Структура - Описание характеристик метода
&НаКлиенте
Функция МетодСтруктураОписания() Экспорт
	Структ = Новый Структура(
			"Имя, Контекст, Комментарий, КомментарийОднострочный, КомментарийОднострочныйКонец, КомментарийВозвращаемоеЗначение, 
			|Параметры, Экспортная, Асинх, Тело, Аннотация, ИмяРасширяемогоМетода, ЭтоФункция, 
			|ИнструкцииПрепроцессора");
	Структ.Параметры = НоваяТаблицаПараметров();
	Структ.ИнструкцииПрепроцессора = СтруктураИнструкцийПрепроцессораПоУмолчанию();
	Возврат Структ;
КонецФункции

// Создает и возвращает новую таблицу для параметров функции или процедуры
//
// Параметры:
//
//
// Возвращаемое значение:
//  Массив - Массив структур параметров
Функция НоваяТаблицаПараметров() Экспорт
	Возврат Новый Массив;
КонецФункции

// Создает и возвращает структуру с инструкциями препроцессора по умолчанию.
//
// Параметры:
//
//
// Возвращаемое значение:
//  Структура - Содержит настройки инструкций препроцессора.
&НаКлиенте
Функция СтруктураИнструкцийПрепроцессораПоУмолчанию() Экспорт
	Возврат Новый Структура(
		"Клиент,Сервер,ТонкийКлиент,ВебКлиент,
		|МобильныйАвтономныйСервер,МобильноеПриложениеКлиент,МобильноеПриложениеСервер,МобильныйКлиент,
		|ТолстыйКлиентОбычноеПриложение,ТолстыйКлиентУправляемоеПриложение,
		|ВнешнееСоединение", //НаКлиенте,НаСервере
		Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина);
КонецФункции

#КонецОбласти


//#Область РаботаСИИ

//&НаКлиенте
//Процедура ЗаполнитьЗапросКИИ(ЭлементДереваРодитель, ЗапросИИ, УровеньРодитель)
//	СтрокаШаблон = "%1 %2 - %3";
//
//	Номер = 1;
//	ЭлементыДерева = ЭлементДереваРодитель.ПолучитьЭлементы();
//	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
//		ТекУровень = УровеньРодитель + Формат(Номер, "ЧЦ=; ЧГ=0") + ".";
//
//		ЗапросИИ.Добавить(СтрШаблон(СтрокаШаблон, ТекУровень, ЭлементДерева.ОригинальноеИмя, ЭлементДерева.ТипЭлемента));
//
//		ЗаполнитьЗапросКИИ(ЭлементДерева, ЗапросИИ, ТекУровень);
//	КонецЦикла;
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьИменаЭлементовПоОтветуИИ(ЭлементДереваРодитель, СтруктураОтвета)
//	ЭлементыДерева = ЭлементДереваРодитель.ПолучитьЭлементы();
//	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
//
//		Если СтруктураОтвета.Свойство(ЭлементДерева.ОригинальноеИмя) Тогда
//			ЭлементДерева.Имя = СтруктураОтвета[ЭлементДерева.ОригинальноеИмя];
//		КонецЕсли;
//
//		ЗаполнитьИменаЭлементовПоОтветуИИ(ЭлементДерева, СтруктураОтвета);
//	КонецЦикла;
//
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьИменаРеквизитовПоОтветуИИ(ЭлементДереваРодитель, СтруктураОтвета)
//	ЭлементыДерева = ЭлементДереваРодитель.ПолучитьЭлементы();
//	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
//
//		Если СтруктураОтвета.Свойство(ЭлементДерева.ОригинальноеИмя) Тогда
//			ЭлементДерева.Имя = СтруктураОтвета[ЭлементДерева.ОригинальноеИмя];
//			Если СтрНачинаетсяС(ЭлементДерева.Имя, "Таблица") Тогда
//				ЭлементДерева.Имя = Сред(ЭлементДерева.Имя, СтрДлина("Таблица") + 1);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//
//КонецПроцедуры

//#КонецОбласти

#Область Перечисления

&НаКлиенте
Процедура ДобавитьПеречисление(ПараметрыВыполнения, ЭлементДерева)
	ИмяПеречисления = ЭлементДерева.Имя;
	ИмяФайла = СлужебныеФункции().ОбъединитьПути(КаталогXML, "Enums", ИмяПеречисления + ".xml");
	
	ДокументDOM = Новый ДокументDOM;
	УзелMetaDataObject = ДобавитьДочернийУзел(ДокументDOM, ДокументDOM, "MetaDataObject");
	УзелMetaDataObject.УстановитьСоответствиеПространстваИмен("", ПараметрыВыполнения.АттрибутMDClasses);
	Для Каждого КлючЗначение Из ПараметрыВыполнения.АттрибутыОбщие Цикл
		УзелMetaDataObject.УстановитьСоответствиеПространстваИмен(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	УзелMetaDataObject.УстановитьАтрибут("version", ПараметрыВыполнения.ВерсияXML);
	
	УзелEnum = ДобавитьДочернийУзел(ДокументDOM, УзелMetaDataObject, "Enum");
	УзелEnum.УстановитьАтрибут("uuid", XMLСтрока(ЭлементДерева.УИД));
	
	Категории = СтрРазделить("Ref,Manager,List", ",");
	МассивУзловInternalInfo = Новый Массив;
	Для Каждого Катогория Из Категории Цикл
		МассивУзловInternalInfo.Добавить(Новый Структура("name, category", СтрШаблон("Enum%1.%2", Катогория, ИмяПеречисления), Катогория));
	КонецЦикла;
	
	ДобавитьУзелыInternalInfo(ДокументDOM, УзелEnum, МассивУзловInternalInfo);
	
	УзелProperties = ДобавитьДочернийУзел(ДокументDOM, УзелEnum, "Properties");
	УзелName = ДобавитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ИмяПеречисления);
	
	УзелChildObjects = ДобавитьДочернийУзел(ДокументDOM, УзелEnum, "ChildObjects");
	
	ЭлементыПодчиненные = ЭлементДерева.ПолучитьЭлементы();
	Если ЭлементыПодчиненные.Количество() > 0 Тогда
		ЭлементыЗначения = ЭлементыПодчиненные[0].ПолучитьЭлементы();
		Для Каждого ЭлементЗначение Из ЭлементыЗначения Цикл
			УзелEnumValue = ДобавитьДочернийУзел(ДокументDOM, УзелChildObjects, "EnumValue");
			УзелEnumValue.УстановитьАтрибут("uuid", XMLСтрока(ЭлементЗначение.УИД));
			УзелProperties = ДобавитьДочернийУзел(ДокументDOM, УзелEnumValue, "Properties");
			ДобавитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ЭлементЗначение.Имя);
		КонецЦикла;
	КонецЕсли;
	
	СоздатьКаталог(СлужебныеФункции().ОбъединитьПути(КаталогXML, "Enums"));
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗначениеПеречисления(ПараметрыВыполнения, ДокументDOM, УзелChildObjects)
	
КонецПроцедуры

#КонецОбласти


#Область Справочники

&НаКлиенте
Процедура ДобавитьСправочник(ПараметрыВыполнения, ЭлементДерева)
	ИмяПеречисления = ЭлементДерева.Имя;
	ИмяФайла = СлужебныеФункции().ОбъединитьПути(КаталогXML, "Catalogs", ИмяПеречисления + ".xml");
	
	ДокументDOM = Новый ДокументDOM;
	УзелMetaDataObject = ДобавитьДочернийУзел(ДокументDOM, ДокументDOM, "MetaDataObject");
	УзелMetaDataObject.УстановитьСоответствиеПространстваИмен("", ПараметрыВыполнения.АттрибутMDClasses);
	Для Каждого КлючЗначение Из ПараметрыВыполнения.АттрибутыОбщие Цикл
		УзелMetaDataObject.УстановитьСоответствиеПространстваИмен(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	УзелMetaDataObject.УстановитьАтрибут("version", ПараметрыВыполнения.ВерсияXML);
	
	УзелEnum = ДобавитьДочернийУзел(ДокументDOM, УзелMetaDataObject, "Catalog");
	УзелEnum.УстановитьАтрибут("uuid", XMLСтрока(ЭлементДерева.УИД));
	
	Категории = СтрРазделить("Object,Ref,Selection,Manager,List", ",");
	МассивУзловInternalInfo = Новый Массив;
	Для Каждого Катогория Из Категории Цикл
		МассивУзловInternalInfo.Добавить(Новый Структура("name, category", СтрШаблон("Catalog%1.%2", Катогория, ИмяПеречисления), Катогория));
	КонецЦикла;
	
	ДобавитьУзелыInternalInfo(ДокументDOM, УзелEnum, МассивУзловInternalInfo);
	
	УзелProperties = ДобавитьДочернийУзел(ДокументDOM, УзелEnum, "Properties");
	УзелName = ДобавитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ИмяПеречисления);
	
	УзелChildObjects = ДобавитьДочернийУзел(ДокументDOM, УзелEnum, "ChildObjects");
	
	СоздатьКаталог(СлужебныеФункции().ОбъединитьПути(КаталогXML, "Catalogs"));
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ОткрытьФайлКонфигурации(ИмяФайла, ДляЗаписи)
	Результат = мКэшОткрытыхФайлов.Получить(ИмяФайла);
	
	Если Результат = Неопределено Тогда 
		Если НЕ СлужебныеФункции().ФайлСуществует(ИмяФайла) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Результат = Новый Структура("ДокументDOM, ДляЗаписи", Неопределено, Ложь);
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		Результат.ДокументDOM = ДокументDOM;
		
		мКэшОткрытыхФайлов.Вставить(ИмяФайла, Результат);
	КонецЕсли;
	
	Если ДляЗаписи Тогда
		Результат.ДляЗаписи = Истина;
	КонецЕсли;
	
	Возврат Результат.ДокументDOM;
КонецФункции

#Область ДеревоИзменений

&НаКлиенте
Функция СоздатьПолучитьРазделВДеревеИзменений(Тип)   
	Если мЭлементыДереваРазделы.Свойство(Тип) Тогда
		Возврат мЭлементыДереваРазделы[Тип];
	КонецЕсли;
	
	ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(Тип);
	
	Если ОписаниеРаздела = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный раздел метаданных: %1'"), Тип);
	КонецЕсли;
	
	СтрокаРаздел = ДеревоИзменений.ПолучитьЭлементы().Добавить();
	СтрокаРаздел.Имя = ОписаниеРаздела.Имя;
	СтрокаРаздел.Картинка = ОписаниеРаздела.Картинка;
	
	мЭлементыДереваРазделы.Вставить(ОписаниеРаздела.Имя, СтрокаРаздел);
	
	Возврат СтрокаРаздел;
КонецФункции 

&НаКлиенте
Функция ПолучитьРазделМетаданныхПоИмени(Имя)
	ОписаниеРазделов = ПолучитьОписаниеРазделовМетаданных();
	Для Каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
		Если ОписаниеРаздела.Имя = Имя Тогда
			Возврат ОписаниеРаздела;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементДереваИзмененийПоИмени(ЭлементРодитель, Имя)
	Подэлементы = ЭлементРодитель.ПолучитьЭлементы();
	Для Каждого Элемент Из Подэлементы Цикл
		Если Элемент.Имя = Имя Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДеревоИзменений()    
	мКэшОткрытыхФайлов = Новый Соответствие;
	мЭлементыДереваРазделы = Новый Структура;       
	ДеревоИзменений.ПолучитьЭлементы().Очистить();
	
	СтрокаОбъект = СоздатьПолучитьОбъектКонфигурации(ТипОбъекта, ИмяОбъекта);    
	
	Для Каждого СхемаРеквизита Из Параметры.СхемыФормы.СхемаРеквизиты Цикл
		ОписаниеРеквизита = СоздатьПолучитьРеквизитОбъекта(СтрокаОбъект, СхемаРеквизита.Имя, СхемаРеквизита.ОписаниеТипов);
	КонецЦикла;             
	
	ДобавитьЭлементВДеревоИзмененийРекурсивно(СтрокаОбъект, Параметры.СхемыФормы.СхемаЭлементы, Неопределено); 
	
	//ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(ТипОбъекта);
	//СтрокаФорма = СоздатьФорму(ОписаниеОсновногоОбъекта, ОписаниеРаздела.ОсновнаяФорма);
	//ОписаниеФормы = СоздатьПолучитьФорму(Размещение, Имя);
	////ЗаписатьВДеревоИзменений(ОписаниеОсновногоОбъекта);   
	//
	//
	//ОписаниеФормы = ПолучитьОписаниеФормы(); 
	//ОписаниеФормы.Размещение = ОписаниеОсновногоОбъекта;
	//ОписаниеФормы.Имя = "Форма";
	
	
	
	//мЭлементыДереваРазделы = Новый Структура;
	//ДеревоИзменений.ПолучитьЭлементы().Очистить();
	//
	//МассивРазделов = СтрРазделить("Справочники,Перечисления", ",");
	//Для Каждого Раздел Из МассивРазделов Цикл
	//	
	//	ЭтоРазделРасположенияФормы = (ТипОбъекта = "Справочник" И Раздел = "Справочники") ИЛИ (ТипОбъекта = "Перечисление" И Раздел = "Перечисления");
	//	
	//	Если НЕ ЭтоРазделРасположенияФормы И (НЕ Параметры.СхемыФормы.СхемаМетаданные.Свойство(Раздел) ИЛИ Параметры.СхемыФормы.СхемаМетаданные[Раздел].Количество() = 0) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если Раздел = "Справочники" Тогда
	//		ТекКартинка = БиблиотекаКартинок.Справочник;
	//	Иначе
	//		ТекКартинка = БиблиотекаКартинок.Перечисление;
	//	КонецЕсли;
	//	
	//	СтрокаРаздел = ДеревоИзменений.ПолучитьЭлементы().Добавить();
	//	СтрокаРаздел.Имя = Раздел;
	//	СтрокаРаздел.ОригинальноеИмя = СтрокаРаздел.Имя;
	//	СтрокаРаздел.Картинка = ТекКартинка;
	//	
	//	мЭлементыДереваРазделы.Вставить(Раздел, СтрокаРаздел);
	//	
	//	Если ЭтоРазделРасположенияФормы Тогда
	//		СтрокаОбъект = СтрокаРаздел.ПолучитьЭлементы().Добавить();
	//		СтрокаОбъект.Имя = ИмяОбъекта;
	//		СтрокаОбъект.ОригинальноеИмя = СтрокаОбъект.Имя;
	//		СтрокаОбъект.Картинка = ТекКартинка;
	//		СтрокаОбъект.ЭтоНовый = Ложь;
	//		
	//		СтрокаРеквизиты = СтрокаОбъект.ПолучитьЭлементы().Добавить();
	//		СтрокаРеквизиты.Имя = "Реквизиты";
	//		СтрокаРеквизиты.ОригинальноеИмя = СтрокаРеквизиты.Имя;
	//		СтрокаРеквизиты.Картинка = БиблиотекаКартинок.Реквизит;
	//		СтрокаРеквизиты.ЭтоНовый = Ложь;
	//		
	//		мЭлементДереваРеквизиты = СтрокаРеквизиты;
	//		
	//		Для Каждого ОписаниеРеквизита Из Параметры.СхемыФормы.СхемаРеквизиты Цикл
	//			СтрокаРеквизит = СтрокаРеквизиты.ПолучитьЭлементы().Добавить();
	//			//СтрокаРеквизиты.Пометка = Истина;
	//			//СтрокаРеквизиты.ТекИмя = ОписаниеРеквизита.Имя;
	//			СтрокаРеквизит.Имя = ОписаниеРеквизита.Имя;
	//			СтрокаРеквизит.ОригинальноеИмя = СтрокаРеквизит.Имя;
	//			СтрокаРеквизит.Картинка = БиблиотекаКартинок.Реквизит;
	//			СтрокаРеквизит.ЭтоНовый = Истина;
	//			СтрокаРеквизит.УИД = Новый УникальныйИдентификатор;
	//			
	//			ЭтоДерево = ОписаниеРеквизита.ОписаниеТипов.Типы.Найти("ДеревоЗначений") <> Неопределено;
	//			ЭтоТаблица = ЭтоДерево ИЛИ ОписаниеРеквизита.ОписаниеТипов.Типы.Найти("ТаблицаЗначений") <> Неопределено;
	//			Если НЕ ЭтоТаблица Тогда
	//				СтрокаРеквизит.ОписаниеТипов = ОписаниеРеквизита.ОписаниеТипов;
	//			КонецЕсли;
	//			
	//			СтрокаРеквизит.ЭтоТаблица = ЭтоТаблица;
	//			СтрокаРеквизит.ЭтоДерево = ЭтоДерево;
	//			
	//			Если ЭтоТаблица Тогда
	//				СтрокаРеквизит.Картинка = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
	//			КонецЕсли;
	//			
	//			Для Каждого ОписаниеПодчиненногоРеквизита Из ОписаниеРеквизита.Подчиненные Цикл
	//				СтрокаПодчиненныйРеквизит = СтрокаРеквизит.ПолучитьЭлементы().Добавить();
	//				//СтрокаПодчиненныйРеквизит.Пометка = Истина;
	//				//СтрокаПодчиненныйРеквизит.ТекИмя = ОписаниеПодчиненногоРеквизита.Имя;
	//				СтрокаПодчиненныйРеквизит.Имя = ОписаниеПодчиненногоРеквизита.Имя;
	//				СтрокаПодчиненныйРеквизит.ОригинальноеИмя = СтрокаПодчиненныйРеквизит.Имя;
	//				СтрокаПодчиненныйРеквизит.Картинка = БиблиотекаКартинок.Реквизит;
	//				СтрокаПодчиненныйРеквизит.ЭтоНовый = Истина;
	//				
	//				СтрокаПодчиненныйРеквизит.УИД = Новый УникальныйИдентификатор;
	//				СтрокаПодчиненныйРеквизит.ОписаниеТипов = ОписаниеПодчиненногоРеквизита.ОписаниеТипов;
	//				//СтрокаПодчиненныйРеквизит.ОписаниеТипов = ОбработкаОбъект.ПолучитьОписаниеТипов(ОписаниеПодчиненногоРеквизита.ОписаниеТипов);
	//			КонецЦикла;
	//		КонецЦикла;
	//		
	//		
	//		ДобавитьЭлементВДеревоЭлементов(Параметры.СхемыФормы.СхемаЭлементы, СтрокаОбъект.ПолучитьЭлементы());
	//		
	//	КонецЕсли;
	//	
	//	Если НЕ Параметры.СхемыФормы.СхемаМетаданные.Свойство(Раздел) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Для Каждого КЗОбъект Из Параметры.СхемыФормы.СхемаМетаданные[Раздел] Цикл
	//		ОписаниеОбъектаМетаданных = КЗОбъект.Значение;
	//		
	//		СтрокаОбъект = СтрокаРаздел.ПолучитьЭлементы().Добавить();
	//		СтрокаОбъект.Имя = КЗОбъект.Ключ;
	//		СтрокаОбъект.ОригинальноеИмя = СтрокаОбъект.Имя;
	//		СтрокаОбъект.Картинка = ТекКартинка;
	//		СтрокаОбъект.УИД = Новый УникальныйИдентификатор;
	//		СтрокаОбъект.ЭтоНовый = Истина;
	//		Если ОписаниеОбъектаМетаданных.Значения.Количество() > 0 Тогда
	//			СтрокаЗначения = СтрокаОбъект.ПолучитьЭлементы().Добавить();
	//			СтрокаЗначения.Имя = "Значения";
	//			СтрокаЗначения.ОригинальноеИмя = СтрокаЗначения.Имя;
	//			СтрокаЗначения.Картинка = БиблиотекаКартинок.Реквизит;
	//			
	//			Для Каждого Значение Из ОписаниеОбъектаМетаданных.Значения Цикл
	//				СтрокаЗначение = СтрокаЗначения.ПолучитьЭлементы().Добавить();
	//				СтрокаЗначение.Картинка = БиблиотекаКартинок.Реквизит;
	//				СтрокаЗначение.Имя = Значение;
	//				СтрокаЗначение.ОригинальноеИмя = СтрокаЗначение.Имя;
	//				СтрокаЗначение.ЭтоНовый = Истина;
	//				СтрокаЗначение.УИД = Новый УникальныйИдентификатор;
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеРазделовМетаданных()
	Результат = Новый Массив;
	
	ПараметрыМетаданных = ПолучитьПараметрыРазделаМетаданных();
	ПараметрыМетаданных.Имя = "Справочник";             
	ПараметрыМетаданных.ОсновнаяФорма = "ФормаЭлемента";
	ПараметрыМетаданных.ВнутреннееИмя = "Catalog";
	ПараметрыМетаданных.ВнутреннееИмяМнож = "Catalogs";
	ПараметрыМетаданных.Картинка = БиблиотекаКартинок.Справочник;
	Результат.Добавить(ПараметрыМетаданных);
	
	ПараметрыМетаданных = ПолучитьПараметрыРазделаМетаданных();
	ПараметрыМетаданных.Имя = "Документ";
	ПараметрыМетаданных.ОсновнаяФорма = "ФормаДокумента";
	ПараметрыМетаданных.ВнутреннееИмя = "Document";
	ПараметрыМетаданных.ВнутреннееИмяМнож = "Documents";
	ПараметрыМетаданных.Картинка = БиблиотекаКартинок.Документ;
	Результат.Добавить(ПараметрыМетаданных);
	
	ПараметрыМетаданных = ПолучитьПараметрыРазделаМетаданных();
	ПараметрыМетаданных.Имя = "Перечисление";  
	ПараметрыМетаданных.ОсновнаяФорма = "Форма";
	ПараметрыМетаданных.ВнутреннееИмя = "Enum";	
	ПараметрыМетаданных.ВнутреннееИмяМнож = "Enums";
	ПараметрыМетаданных.Картинка = БиблиотекаКартинок.Перечисление;
	Результат.Добавить(ПараметрыМетаданных);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыРазделаМетаданных()
	Результат = Новый Структура("Имя,ОсновнаяФорма,ВнутреннееИмя,ВнутреннееИмяМнож,Картинка");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ДеревоКонфигурации

//&НаКлиенте
//Процедура ПрочитатьДеревоКонфигурации()  
//	ИмяФайлаConfiguration = КаталогXML + "\Configuration.xml";
//	
//	ЧтениеXML = Новый ЧтениеXML;
//	ЧтениеXML.ОткрытьФайл(ИмяФайлаConfiguration);
//	
//	ПостроительDOM = Новый ПостроительDOM;
//	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
//	ЧтениеXML.Закрыть();
//	
//	
//	//УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
//	//
//	//Для Каждого Аттрибут Из УзелMetaDataObject.Атрибуты Цикл
//	//	
//	//	Если Аттрибут.Имя = "version" Тогда
//	//		мПараметрыВыполнения.ВерсияXML = Аттрибут.Значение;
//	//		Продолжить;
//	//	КонецЕсли;
//	//	
//	//	Если ПустаяСтрока(Аттрибут.Префикс) Тогда
//	//		Продолжить;
//	//	КонецЕсли;
//	//	
//	//	мПараметрыВыполнения.АттрибутыОбщие.Вставить(Аттрибут.ЛокальноеИмя, Аттрибут.Значение);
//	//	
//	//КонецЦикла;

//	//УзелConfiguration = УзелMetaDataObject.ПервыйДочерний;
//	//МассивУзлыChildObjects = УзелConfiguration.ПолучитьЭлементыПоИмени("ChildObjects"); 
//	//УзлыChildObjects = МассивУзлыChildObjects[0].ДочерниеУзлы;
//	//
//	//Для Каждого УзелChildObjects Из УзлыChildObjects Цикл
//	//	//ПодчиненнныеЭлементы = СоответетствиеГруппУзлам.Получить(УзелChildObjects.ИмяУзла);
//	//	//Если ПодчиненнныеЭлементы = Неопределено Тогда
//	//	//	Продолжить;
//	//	//КонецЕсли;
//	//	
//	//	ДобавляемыйЭлемент = ПодчиненнныеЭлементы.Добавить();
//	//	ДобавляемыйЭлемент.ИмяОбъекта = УзелChildObjects.ПоследнийДочерний.ЗначениеУзла;
//	//	//ДобавляемыйЭлемент.Картинка = СоответетствиеКартинокУзлам.Получить(УзелChildObjects.ИмяУзла);
//	//КонецЦикла;
//	
//	
//	ПрочитаноДеревоКонфигурации = Истина;
//КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьЭлементыФормы(СтрокаОбъект, СхемыЭлементов, СтрокаРодитель)
	Для Каждого СхемаЭлемента Из СхемыЭлементов Цикл
		ДобавитьЭлементВДеревоИзмененийРекурсивно(СтрокаОбъект, СхемаЭлемента, СтрокаРодитель);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТипВидЭлемента(ТипЭлемента, ВидЭлемента)
	Если (ТипЭлемента = "ПолеФормы" ИЛИ ТипЭлемента = "ГруппаФормы" ИЛИ ТипЭлемента = "ДекорацияФормы") И ВидЭлемента <> Неопределено Тогда
		Возврат ВидЭлемента;
	КонецЕсли;	
	
	Возврат ТипЭлемента;
КонецФункции

&НаКлиенте
Функция ПолучитьВидЭлемента(СхемаЭлемента) 
	ОписаниеВида = Неопределено;  
	СхемаЭлемента.НаборСвойств.Свойство("Вид", ОписаниеВида);
	Если ОписаниеВида = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеВида.Значение;
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементВДеревоИзмененийРекурсивно(СтрокаОбъект, СхемаЭлемента, СтрокаРодитель) 
	Если СхемаЭлемента.Тип = "Форма" Тогда    
		ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(ТипОбъекта);
		СтрокаЭлемент = СоздатьФорму(СтрокаОбъект, ОписаниеРаздела.ОсновнаяФорма);
	Иначе                             
		СтрокаЭлемент = СоздатьЭлементФормы(
			СтрокаРодитель, 
			СхемаЭлемента.Имя, 
			СхемаЭлемента.Тип, 
			ПолучитьВидЭлемента(СхемаЭлемента));
	КонецЕсли;  
		
	ЗаполнитьНаборСвойств(СтрокаЭлемент, СхемаЭлемента);
	
	Если НЕ СхемаЭлемента.Свойство("ПодчиненныеЭлементы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЭлементыФормы(СтрокаОбъект, СхемаЭлемента.ПодчиненныеЭлементы, СтрокаЭлемент);
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьНаборСвойств(СтрокаЭлемент, СхемаЭлемента)
	Для Каждого КлючЗначение Из СхемаЭлемента.НаборСвойств Цикл
		Если КлючЗначение.Ключ = "Вид" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрЗначение = КлючЗначение.Значение;
		
		Значение = СтрЗначение.Значение;
		
		
		
		Если ТипыЗначенийСвойств().Свойство(СтрЗначение.Тип) Тогда 
			Тип = СтрЗначение.Тип;
		ИначеЕсли СтрЗначение.ЭтоСистемноеПеречисление Тогда
			Тип = ТипыЗначенийСвойств().СистемноеПеречисление;
		Иначе
			Тип = Неопределено;
		КонецЕсли;
		
		УстановитьСвойствоЭлементаФормы(СтрокаЭлемент, КлючЗначение.Ключ, Значение, Тип);
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеОбработки()
	Возврат ВладелецФормы.ПолучитьИдентификаторОбработки();
КонецФункции

&НаКлиенте
Процедура УстановитьКаталогВПараметрыВыполнения(ИмяНовойФормы)
	КаталогВидовОбъектов = ПолучитьАнглийскоеИмяКаталогаXML(ТипОбъекта);
	
	мПараметрыВыполнения.Вставить("ИмяНовойФормы", ИмяНовойФормы);
	
	мПараметрыВыполнения.КаталогXML = КаталогXML;
	
	мПараметрыВыполнения.КаталогForms = КаталогXML + "\" + КаталогВидовОбъектов + "\" + ИмяОбъекта + "\Forms";
	мПараметрыВыполнения.КаталогФормы = мПараметрыВыполнения.КаталогForms + "\" + ИмяНовойФормы;
	мПараметрыВыполнения.КаталогExt = мПараметрыВыполнения.КаталогФормы + "\Ext";
	
	мПараметрыВыполнения.ИмяФайлаФормы = мПараметрыВыполнения.КаталогForms + "\" + ИмяНовойФормы + ".xml";
	мПараметрыВыполнения.ИмяФайлаForm = мПараметрыВыполнения.КаталогExt + "\" + "Form.xml";
	
	мПараметрыВыполнения.ИмяФайлаОбъекта = КаталогXML + "\" + КаталогВидовОбъектов + "\" + ИмяОбъекта + ".xml";
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоКонфигурации()
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыеОбъектыВConfiguration()
	ИмяФайла = СлужебныеФункции().ОбъединитьПути(КаталогXML, "Configuration.xml");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	УзелConfiguration = УзелMetaDataObject.ПервыйДочерний;
	
	МассивУзлыChildObjects = УзелConfiguration.ПолучитьЭлементыПоИмени("ChildObjects");
	УзелChildObjects = МассивУзлыChildObjects[0];
	
	Для Каждого КЗРазделы Из мЭлементыДереваРазделы Цикл
		Если КЗРазделы.Ключ = "Перечисления" Тогда
			ЭлементыДерева = КЗРазделы.Значение.ПолучитьЭлементы();
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				Если НЕ ЭлементДерева.ЭтоНовый Тогда
					Продолжить;
				КонецЕсли;
				
				ДобавитьДочернийУзел(ДокументDOM, УзелChildObjects, "Enum", ЭлементДерева.Имя);
			КонецЦикла;
		КонецЕсли;
		Если КЗРазделы.Ключ = "Справочники" Тогда
			ЭлементыДерева = КЗРазделы.Значение.ПолучитьЭлементы();
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				Если НЕ ЭлементДерева.ЭтоНовый Тогда
					Продолжить;
				КонецЕсли;
				
				ДобавитьДочернийУзел(ДокументDOM, УзелChildObjects, "Catalog", ЭлементДерева.Имя);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлФормы(ПараметрыВыполнения)
	ДокументDOM = Новый ДокументDOM;
	УзелMetaDataObject = ДобавитьДочернийУзел(ДокументDOM, ДокументDOM, "MetaDataObject");
	УзелMetaDataObject.УстановитьСоответствиеПространстваИмен("", ПараметрыВыполнения.АттрибутMDClasses);
	Для Каждого КлючЗначение Из ПараметрыВыполнения.АттрибутыОбщие Цикл
		УзелMetaDataObject.УстановитьСоответствиеПространстваИмен(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	УзелMetaDataObject.УстановитьАтрибут("version", ПараметрыВыполнения.ВерсияXML);
	
	УзелForm = ДобавитьДочернийУзел(ДокументDOM, УзелMetaDataObject, "Form");
	УзелForm.УстановитьАтрибут("uuid", ПараметрыВыполнения.ИдентификаторФормы);
	УзелMetaDataObject.ДобавитьДочерний(УзелForm);
	
	УзелProperties = ДобавитьДочернийУзел(ДокументDOM, УзелForm, "Properties");
	
	УзелFormType = ДобавитьДочернийУзел(ДокументDOM, УзелProperties, "FormType", "Managed");
	
	УзелName = ДобавитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ПараметрыВыполнения.ИмяНовойФормы);
	
	УзелSynonym = ДобавитьДочернийУзел(ДокументDOM, УзелProperties, "Synonym");
	ДобавитьУзелСтрока(ДокументDOM, УзелSynonym, "Форма новая");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыполнения.ИмяФайлаФормы);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлForm(ПараметрыВыполнения)
	ДокументDOM = Новый ДокументDOM;
	УзелForm = ДобавитьДочернийУзел(ДокументDOM, ДокументDOM, "Form");
	УзелForm.УстановитьСоответствиеПространстваИмен("", ПараметрыВыполнения.АттрибутForm);
	Для Каждого КлючЗначение Из ПараметрыВыполнения.АттрибутыОбщие Цикл
		УзелForm.УстановитьСоответствиеПространстваИмен(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	УзелForm.УстановитьАтрибут("version", ПараметрыВыполнения.ВерсияXML);
	
	УзелCommands = ДобавитьДочернийУзел(ДокументDOM, УзелForm, "Commands");
	
	УзелAttributes = ДобавитьДочернийУзел(ДокументDOM, УзелForm, "Attributes");
	ДобавитьРеквизитыФормы(ПараметрыВыполнения, ДокументDOM, УзелAttributes);
	
	УзелAutoCommandBar = ДобавитьДочернийУзел(ДокументDOM, УзелForm, "AutoCommandBar");
	УзелAutoCommandBar.УстановитьАтрибут("name", "ФормаКоманднаяПанель");
	УзелAutoCommandBar.УстановитьАтрибут("id", "-1");
	
	ЭлементДереваФорма = мЭлементДереваФорма;
	УзелChildItems = ДобавитьДочернийУзел(ДокументDOM, УзелForm, "ChildItems");
	ДобавитьЭлементыФормыИерархически(ПараметрыВыполнения, ЭлементДереваФорма.ПолучитьЭлементы(), ДокументDOM, УзелChildItems, УзелCommands, УзелAutoCommandBar);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыполнения.ИмяФайлаForm);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФормуВФайлОбъекта(ПараметрыВыполнения)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(мПараметрыВыполнения.ИмяФайлаОбъекта);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	УзелОбъект = УзелMetaDataObject.ПервыйДочерний;
	
	МассивУзлыChildObjects = УзелОбъект.ПолучитьЭлементыПоИмени("ChildObjects");
	УзелChildObjects = МассивУзлыChildObjects[0];
	
	УзелForm = ДобавитьДочернийУзел(ДокументDOM, УзелChildObjects, "Form");
	УзелForm.ТекстовоеСодержимое = ПараметрыВыполнения.ИмяНовойФормы;
	
	ДобавитьРеквизитыОбъектаВФайлОбъекта(ПараметрыВыполнения, ДокументDOM, УзелChildObjects);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыполнения.ИмяФайлаОбъекта);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизитыОбъектаВФайлОбъекта(ПараметрыВыполнения, ДокументDOM, УзелChildObjects)
	СтрокиДерева = мЭлементДереваРеквизиты.ПолучитьЭлементы();
	Для Каждого СтрокаДеревоРеквизиты Из СтрокиДерева Цикл
		//Если НЕ СтрокаДеревоРеквизиты.Пометка Тогда
		//	Продолжить;
		//КонецЕсли;
		Если СтрокаДеревоРеквизиты.ЭтоРеквизитФормы Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДеревоРеквизиты.ЭтоТаблица Тогда
			ДобавитьРеквизитыТабличнойЧастиОбъекта(ПараметрыВыполнения, ДокументDOM, УзелChildObjects, СтрокаДеревоРеквизиты);
			Продолжить;
		КонецЕсли;
		
		ДобавитьРеквизитОбъекта(ПараметрыВыполнения, ДокументDOM, УзелChildObjects, СтрокаДеревоРеквизиты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизитОбъекта(ПараметрыВыполнения, ДокументDOM, УзелРодитель, СтрокаДеревоРеквизиты)
	УзелЭлемента = ДобавитьДочернийУзел(ДокументDOM, УзелРодитель, "Attribute");
	УзелЭлемента.УстановитьАтрибут("uuid", XMLСтрока(СтрокаДеревоРеквизиты.УИД));
	
	УзелProperties = ДобавитьДочернийУзел(ДокументDOM, УзелЭлемента, "Properties");
	
	УзелName = ДобавитьДочернийУзел(ДокументDOM, УзелProperties, "Name");
	УзелName.ТекстовоеСодержимое = СтрокаДеревоРеквизиты.Имя;
	
	ДобавитьОписаниеТипов(ПараметрыВыполнения, ДокументDOM, УзелProperties, СтрокаДеревоРеквизиты.ОписаниеТипов);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизитыТабличнойЧастиОбъекта(ПараметрыВыполнения, ДокументDOM, УзелРодитель, СтрокаДеревоРеквизиты)
	УзелTabularSection = ДобавитьДочернийУзел(ДокументDOM, УзелРодитель, "TabularSection");
	УзелTabularSection.УстановитьАтрибут("uuid", XMLСтрока(СтрокаДеревоРеквизиты.УИД));
	
	ДобавитьУзелInternalInfoВФайлОбъекта(ПараметрыВыполнения, ДокументDOM, УзелTabularSection, СтрокаДеревоРеквизиты.Имя);
	
	УзелProperties = ДобавитьДочернийУзел(ДокументDOM, УзелTabularSection, "Properties");
	
	УзелName = ДобавитьДочернийУзел(ДокументDOM, УзелProperties, "Name");
	УзелName.ТекстовоеСодержимое = СтрокаДеревоРеквизиты.Имя;
	
	УзелChildObjects = ДобавитьДочернийУзел(ДокументDOM, УзелTabularSection, "ChildObjects");
	
	Подчинененные = СтрокаДеревоРеквизиты.ПолучитьЭлементы();
	Для Каждого Подчиненный Из Подчинененные Цикл
		//Если НЕ Подчиненный.Пометка Тогда
		//	Продолжить;
		//КонецЕсли;
		Если Подчиненный.ЭтоРеквизитФормы Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьРеквизитОбъекта(ПараметрыВыполнения, ДокументDOM, УзелChildObjects, Подчиненный);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУзелInternalInfoВФайлОбъекта(ПараметрыВыполнения, ДокументDOM, УзелРодитель, ИмяТабличнойЧасти)
	ТипОбъектаАнгл = ПолучитьАнглийскоеИмяОбъектаМетаданных(ТипОбъекта);
	ИмяTabularSection = СтрШаблон(
			"%1TabularSection.%2.%3",
			ТипОбъектаАнгл,
			ИмяОбъекта,
			ИмяТабличнойЧасти);
	
	TabularSectionRow = СтрШаблон(
			"%1TabularSectionRow.%2.%3",
			ТипОбъектаАнгл,
			ИмяОбъекта,
			ИмяТабличнойЧасти);
	
	УзелInternalInfo = ДобавитьДочернийУзел(ДокументDOM, УзелРодитель, "InternalInfo");
	
	УзелGeneratedType = ДобавитьДочернийУзел(ДокументDOM, УзелInternalInfo, "xr:GeneratedType");
	УзелGeneratedType.УстановитьАтрибут("name", ИмяTabularSection);
	УзелGeneratedType.УстановитьАтрибут("category", "TabularSection");
	ДобавитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:TypeId", XMLСтрока(Новый УникальныйИдентификатор));
	ДобавитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:ValueId", XMLСтрока(Новый УникальныйИдентификатор));
	
	УзелGeneratedType = ДобавитьДочернийУзел(ДокументDOM, УзелInternalInfo, "xr:GeneratedType");
	УзелGeneratedType.УстановитьАтрибут("name", TabularSectionRow);
	УзелGeneratedType.УстановитьАтрибут("category", "TabularSectionRow");
	ДобавитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:TypeId", XMLСтрока(Новый УникальныйИдентификатор));
	ДобавитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:ValueId", XMLСтрока(Новый УникальныйИдентификатор));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУзелыInternalInfo(ДокументDOM, УзелРодитель, МассивДобавляемыхУзлов)
	УзелInternalInfo = ДобавитьДочернийУзел(ДокументDOM, УзелРодитель, "InternalInfo");
	
	Для Каждого ОписаниеУзла Из МассивДобавляемыхУзлов Цикл
		УзелGeneratedType = ДобавитьДочернийУзел(ДокументDOM, УзелInternalInfo, "xr:GeneratedType");
		УзелGeneratedType.УстановитьАтрибут("name", ОписаниеУзла.name);
		УзелGeneratedType.УстановитьАтрибут("category", ОписаниеУзла.category);
		ДобавитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:TypeId", XMLСтрока(Новый УникальныйИдентификатор));
		ДобавитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:ValueId", XMLСтрока(Новый УникальныйИдентификатор));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементыФормыИерархически(ПараметрыВыполнения, ЭлементыДерева, ДокументDOM, УзелXML, УзелCommands, УзелAutoCommandBar)
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Тип = "КнопкаФормы" Тогда
			Если ЭлементДерева.Имя = "ЗаписатьИЗакрыть" ИЛИ ЭлементДерева.Имя = "Записать" ИЛИ ЭлементДерева.Имя = "Закрыть" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЭлементДерева.Имя = "КоманднаяПанель" Тогда
			Подчиненные = ЭлементДерева.ПолучитьЭлементы();
			Если Подчиненные.Количество() > 0 Тогда
				УзелChildItems = ДобавитьДочернийУзел(ДокументDOM, УзелAutoCommandBar, "ChildItems");
				ДобавитьЭлементыФормыИерархически(ПараметрыВыполнения, Подчиненные, ДокументDOM, УзелChildItems, УзелCommands, УзелAutoCommandBar);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		УзелЭлемента = ДобавитьДочернийУзел(
				ДокументDOM,
				УзелXML,
				ЭлементДерева.ТипАнгл);
		
		Если ЭлементДерева.Тип = "КнопкаФормы" Тогда
			УзелCommand = ДобавитьДочернийУзел(ДокументDOM, УзелCommands, "Command");
			УзелCommand.УстановитьАтрибут("name", ЭлементДерева.Имя);
			УзелCommand.УстановитьАтрибут("id", XMLСтрока(мПараметрыВыполнения.Идентификатор));
			мПараметрыВыполнения.Идентификатор = мПараметрыВыполнения.Идентификатор + 1;
		КонецЕсли;
		
		УзелЭлемента.УстановитьАтрибут("name", ЭлементДерева.Имя);
		УзелЭлемента.УстановитьАтрибут("id", XMLСтрока(мПараметрыВыполнения.Идентификатор));
		
		мПараметрыВыполнения.Идентификатор = мПараметрыВыполнения.Идентификатор + 1;
		
		Для Каждого КлючЗначение Из ЭлементДерева.НаборСвойств Цикл
			ИмяСвойства = КлючЗначение.Ключ;
			
			УзелСвойств = ДобавитьДочернийУзел(ДокументDOM, УзелЭлемента, ИмяСвойства);
			
			Если КлючЗначение.Ключ = "Title" Тогда
				ДобавитьУзелСтрока(ДокументDOM, УзелСвойств, КлючЗначение.Значение.Значение);
				Продолжить;
			КонецЕсли;
			
			Если КлючЗначение.Ключ = "Picture" Тогда
				ДобавитьУзелКартинка(ДокументDOM, УзелСвойств, КлючЗначение.Значение.Значение);
				Продолжить;
			КонецЕсли;
			
			Если КлючЗначение.Ключ = "DataPath" Тогда
				ТекПутьКДанным = КлючЗначение.Значение;
				ТекПутьКДанным = ПолучитьПутьКДанным(ПараметрыВыполнения, КлючЗначение.Значение.Значение);
				УзелСвойств.ТекстовоеСодержимое = ТекПутьКДанным;
				Продолжить;
			КонецЕсли;
			
			ЗначениеСвойства = ПолучитьЗначение(КлючЗначение.Значение);
			УзелСвойств.ТекстовоеСодержимое = ЗначениеСвойства;
		КонецЦикла;
		
		Подчиненные = ЭлементДерева.ПолучитьЭлементы();
		Если Подчиненные.Количество() > 0 Тогда
			УзелChildItems = ДобавитьДочернийУзел(ДокументDOM, УзелЭлемента, "ChildItems");
			ДобавитьЭлементыФормыИерархически(ПараметрыВыполнения, Подчиненные, ДокументDOM, УзелChildItems, УзелCommands, УзелAutoCommandBar);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУзелКартинка(ДокументDOM, УзелPicture, Картинка)
	//УзелPicture = ДобавитьДочернийУзел(ДокументDOM, УзелСвойств, "Picture");
	ДобавитьДочернийУзел(ДокументDOM, УзелPicture, "xr:Ref", "StdPicture." + Картинка);
	ДобавитьДочернийУзел(ДокументDOM, УзелPicture, "xr:LoadTransparent", "true");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизитыФормы(ПараметрыВыполнения, ДокументDOM, УзелXML)
	ЕстьРеквизитыОбъекта = Ложь;
	
	ДополнительныеКолонки = Новый Массив;
	
	СтрокиРеквизиты = мЭлементДереваРеквизиты.ПолучитьЭлементы();
	Для Каждого СтрокаДеревоРеквизиты Из СтрокиРеквизиты Цикл
		//Если НЕ СтрокаДеревоРеквизиты.Пометка Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если НЕ СтрокаДеревоРеквизиты.ЭтоРеквизитФормы Тогда
			ЕстьРеквизитыОбъекта = Истина;
			Продолжить;
		КонецЕсли;
		
		УзелЭлемента = ДобавитьДочернийУзел(ДокументDOM, УзелXML, "Attribute");
		УзелЭлемента.УстановитьАтрибут("id", XMLСтрока(мПараметрыВыполнения.Идентификатор));
		УзелЭлемента.УстановитьАтрибут("name", СтрокаДеревоРеквизиты.Имя);
		
		Если СтрокаДеревоРеквизиты.ЭтоТаблица Тогда
			УзелType = ДобавитьДочернийУзел(ДокументDOM, УзелЭлемента, "Type");
			
			ТипТаблицы = "v8:ValueTable";
			Если СтрокаДеревоРеквизиты.ЭтоДерево Тогда
				ТипТаблицы = "v8:ValueTree";
			КонецЕсли;
			
			ДобавитьДочернийУзел(ДокументDOM, УзелType, "v8:Type", ТипТаблицы);
		Иначе
			ДобавитьОписаниеТипов(ПараметрыВыполнения, ДокументDOM, УзелЭлемента, СтрокаДеревоРеквизиты.ОписаниеТипов);
		КонецЕсли;
		
		
		мПараметрыВыполнения.Идентификатор = мПараметрыВыполнения.Идентификатор + 1;
		
		Если СтрокаДеревоРеквизиты.ЭтоТаблица Тогда
			ДобавитьРеквизитыФормыКолонки(ДокументDOM, СтрокаДеревоРеквизиты, УзелЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьРеквизитыОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьРеквизитФормыОбъект(ДокументDOM, УзелXML);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизитФормыОбъект(ДокументDOM, УзелXML)
	УзелAttribute = ДобавитьДочернийУзел(ДокументDOM, УзелXML, "Attribute");
	УзелAttribute.УстановитьАтрибут("id", XMLСтрока(мПараметрыВыполнения.Идентификатор));
	УзелAttribute.УстановитьАтрибут("name", "Объект");
	
	УзелType = ДобавитьДочернийУзел(ДокументDOM, УзелAttribute, "Type");
	
	ПредставлениеТипаОбъекта = СтрШаблон("cfg:%1Object.%2", ПолучитьАнглийскоеИмяОбъектаМетаданных(ТипОбъекта), ИмяОбъекта);
	
	УзелЭлементType = ДобавитьДочернийУзел(ДокументDOM, УзелType, "v8:Type", ПредставлениеТипаОбъекта);
	
	ДобавитьДочернийУзел(ДокументDOM, УзелAttribute, "MainAttribute", Истина);
	ДобавитьДочернийУзел(ДокументDOM, УзелAttribute, "SavedData", Истина);
	
	УзелColumns = ДобавитьДочернийУзел(ДокументDOM, УзелAttribute, "Columns");
	
	мПараметрыВыполнения.Идентификатор = мПараметрыВыполнения.Идентификатор + 1;
	
	СтрокиРеквизиты = мЭлементДереваРеквизиты.ПолучитьЭлементы();
	Для Каждого СтрокаДеревоРеквизиты Из СтрокиРеквизиты Цикл
		//Если НЕ СтрокаДеревоРеквизиты.Пометка Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если СтрокаДеревоРеквизиты.ЭтоРеквизитФормы Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаДеревоРеквизиты.ЭтоТаблица Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьРеквизитыФормыДополнительныеКолонки(ДокументDOM, СтрокаДеревоРеквизиты, УзелColumns);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизитыФормыДополнительныеКолонки(ДокументDOM, СтрокаТаблица, УзелColumns)
	СтрокиКолонки = СтрокаТаблица.ПолучитьЭлементы();
	Если СтрокиКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаКолонка Из СтрокиКолонки Цикл
		//Если НЕ СтрокаКолонка.Пометка Тогда
		//	Продолжить;
		//КонецЕсли;
		//
		Если НЕ СтрокаКолонка.ЭтоРеквизитФормы Тогда
			Продолжить;
		КонецЕсли;
		
		УзелAdditionalColumns = ДобавитьДочернийУзел(ДокументDOM, УзелColumns, "AdditionalColumns");
		УзелAdditionalColumns.УстановитьАтрибут("table", ПолучитьПутьКДанным(мПараметрыВыполнения, СтрокаТаблица.Имя));
		
		УзелЭлемента = ДобавитьДочернийУзел(ДокументDOM, УзелAdditionalColumns, "Column");
		УзелЭлемента.УстановитьАтрибут("id", XMLСтрока(мПараметрыВыполнения.Идентификатор));
		УзелЭлемента.УстановитьАтрибут("name", СтрокаКолонка.Имя);
		
		ДобавитьОписаниеТипов(мПараметрыВыполнения, ДокументDOM, УзелЭлемента, СтрокаКолонка.ОписаниеТипов);
		
		мПараметрыВыполнения.Идентификатор = мПараметрыВыполнения.Идентификатор + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизитыФормыКолонки(ДокументDOM, СтрокаТаблица, УзелРодитель)
	СтрокиРеквизиты = СтрокаТаблица.ПолучитьЭлементы();
	Если СтрокиРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УзелColumns = ДобавитьДочернийУзел(ДокументDOM, УзелРодитель, "Columns");
	
	Для Каждого СтрокаДеревоРеквизиты Из СтрокиРеквизиты Цикл
		//Если НЕ СтрокаДеревоРеквизиты.Пометка Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если НЕ СтрокаДеревоРеквизиты.ЭтоРеквизитФормы Тогда
			//ЕстьРеквизитыОбъекта = Истина;
			Продолжить;
		КонецЕсли;
		
		УзелЭлемента = ДобавитьДочернийУзел(ДокументDOM, УзелColumns, "Column");
		УзелЭлемента.УстановитьАтрибут("id", XMLСтрока(мПараметрыВыполнения.Идентификатор));
		УзелЭлемента.УстановитьАтрибут("name", СтрокаДеревоРеквизиты.Имя);
		
		ДобавитьОписаниеТипов(мПараметрыВыполнения, ДокументDOM, УзелЭлемента, СтрокаДеревоРеквизиты.ОписаниеТипов);
		
		мПараметрыВыполнения.Идентификатор = мПараметрыВыполнения.Идентификатор + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПутьКДанным(ПараметрыВыполенния, ИмяРеквизита)
	МассивЧастей = СтрРазделить(ИмяРеквизита, ".");
	
	ТекЭлементДерева = Неопределено;
	ЭлементыДерева = мЭлементДереваРеквизиты.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		//Если ЭлементДерева.ТекИмя = МассивЧастей[0] Тогда
		Если ЭлементДерева.Имя = МассивЧастей[0] Тогда
			ТекЭлементДерева = ЭлементДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = "";
	Если НЕ ТекЭлементДерева.ЭтоРеквизитФормы Тогда
		Результат = "Объект.";
	КонецЕсли;
	Результат = Результат + ТекЭлементДерева.Имя;
	
	Если МассивЧастей.Количество() > 1 Тогда
		ЭлементыДерева = ТекЭлементДерева.ПолучитьЭлементы();
		ТекЭлементДерева = Неопределено;
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			//Если ЭлементДерева.ТекИмя = МассивЧастей[1] Тогда
			Если ЭлементДерева.Имя = МассивЧастей[1] Тогда
				ТекЭлементДерева = ЭлементДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Результат = Результат + "." + ТекЭлементДерева.Имя;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеТипов(ПараметрыВыполнения, ДокументDOM, УзелРодитель, ОписаниеТипов)
	Если ОписаниеТипов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелType = ДобавитьДочернийУзел(ДокументDOM, УзелРодитель, "Type");
	
	Для Каждого ТекТип Из ОписаниеТипов.Типы Цикл
		ДобавитьДочернийУзел(ДокументDOM, УзелType, "v8:Type", ПолучитьПредставлениеТипа(ТекТип));
	КонецЦикла;
	
	//ЗаписьУзловDOM = Новый ЗаписьУзловDOM;
	//ЗаписьУзловDOM.Открыть(ДокументDOM);
	
	//ЗаписьУзловDOM.ЗаписатьНачалоЭлемента("Type");
	//ЗаписьУзловDOM.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/core");
	//ЗаписьУзловDOM.ЗаписатьСоответствиеПространстваИмен("cfg", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	//
	//СериализаторXDTO.ЗаписатьXML(
	//	ЗаписьУзловDOM,
	//	ОписаниеТипов, , ФормаXML.Текст);
	
	//ЗаписьУзловDOM.ЗаписатьКонецЭлемента();
	//
	//УзелТип = ЗаписьУзловDOM.УзелDOM.ПоследнийДочерний;
	//УзелРодитель.ДобавитьДочерний(УзелТип);
	//
	//ЗаписьУзловDOM.Закрыть();
	
	//<v8:NumberQualifiers>
	//	<v8:Digits>10</v8:Digits>
	//	<v8:FractionDigits>0</v8:FractionDigits>
	//	<v8:AllowedSign>Any</v8:AllowedSign>
	//</v8:NumberQualifiers>
	//<v8:StringQualifiers>
	//	<v8:Length>10</v8:Length>
	//	<v8:AllowedLength>Variable</v8:AllowedLength>
	//</v8:StringQualifiers>
	//<v8:DateQualifiers>
	//	<v8:DateFractions>Date</v8:DateFractions>
	//</v8:DateQualifiers>
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеТипа(Знач ТекТип)
	Если СтрНачинаетсяС(ТекТип, "СправочникСсылка.") Тогда
		Возврат СтрЗаменить(ТекТип, "СправочникСсылка.", "cfg:CatalogRef.");
	КонецЕсли;
	
	Если СтрНачинаетсяС(ТекТип, "ПеречислениеСсылка.") Тогда
		Возврат СтрЗаменить(ТекТип, "ПеречислениеСсылка.", "cfg:EnumRef.");
	КонецЕсли;
	
	СтрТипы = Новый Структура;
	СтрТипы.Вставить("Строка", "xs:string");
	СтрТипы.Вставить("Булево", "xs:boolean");
	СтрТипы.Вставить("Число", "xs:decimal");
	СтрТипы.Вставить("Дата", "xs:dateTime");
	
	Если СтрТипы.Свойство(ТекТип) Тогда
		Возврат СтрТипы[ТекТип];
	КонецЕсли;
	
	Возврат ТекТип;
КонецФункции

&НаКлиенте
Функция ДобавитьДочернийУзел(ДокументDOM, Родитель, ИмяЭлемента, ТекстовоеСодержимое = Неопределено)
	Узел = ДокументDOM.СоздатьЭлемент(ИмяЭлемента);
	
	Если ТекстовоеСодержимое <> Неопределено Тогда
		Узел.ТекстовоеСодержимое = XMLСтрока(ТекстовоеСодержимое);
	КонецЕсли;
	
	Родитель.ДобавитьДочерний(Узел);
	
	Возврат Узел;
КонецФункции

&НаКлиенте
Процедура ДобавитьУзелСтрока(ДокументDOM, Родитель, Текст)
	Узел = ДобавитьДочернийУзел(ДокументDOM, Родитель, "v8:item");
	
	УзелLang = ДобавитьДочернийУзел(ДокументDOM, Узел, "v8:lang");
	УзелLang.ТекстовоеСодержимое = "ru";
	
	УзелContent = ДобавитьДочернийУзел(ДокументDOM, Узел, "v8:content");
	УзелContent.ТекстовоеСодержимое = XMLСтрока(Текст);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначение(СтрЗначение)
	Если СтрЗначение.ЭтоСистемноеПеречисление Тогда
		Возврат СтрЗначение.Значение;
	КонецЕсли;
	
	Возврат XMLСтрока(СтрЗначение.Значение);
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееИмяТипаЭлемента(ТипЭлемента)
	Возврат УправлениеСвойствами().ПолучитьАнглийскоеИмяТипаЭлемента(ТипЭлемента);
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееИмяСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства)
	Возврат УправлениеСвойствами().ПолучитьАнглийскоеИмяСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства);
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееЗначениеСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства, ЗначениеСвойства)
	Возврат УправлениеСвойствами().ПолучитьАнглийскоеЗначениеСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства, ЗначениеСвойства);
КонецФункции

&НаКлиенте
Функция ПолучитьАнглийскоеИмяОбъектаМетаданных(ИмяОбъекта)
	Соответствие = Новый Структура;
	Соответствие.Вставить("Справочник", "Catalog");
	Соответствие.Вставить("Документ", "Document");
	
	Возврат Соответствие[ИмяОбъекта];
КонецФункции

&НаКлиенте
Функция ПолучитьАнглийскоеИмяКаталогаXML(ИмяОбъекта)
	Соответствие = Новый Структура;
	Соответствие.Вставить("Справочник", "Catalogs");
	Соответствие.Вставить("Документ", "Documents");
	Соответствие.Вставить("Перечисление", "Enums");
	
	Возврат Соответствие[ИмяОбъекта];
КонецФункции

&НаКлиенте
Процедура ОбновитьПредставлениеОбъекта()
	ПредставлениеОбъекта = СтрШаблон(
			"%1.%2",
			ТипОбъекта,
			ИмяОбъекта);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПутьКФайлуКонфигурации()
	Возврат КаталогXML + "\Configuration.xml";
КонецФункции 

&НаКлиенте
Функция ПолучитьПутьКФайлуОбъекта(Тип, Имя) 
	ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(Тип);
	Возврат СлужебныеФункции().ОбъединитьПути(КаталогXML, ОписаниеРаздела.ВнутреннееИмяМнож, Имя + ".xml");
КонецФункции


#КонецОбласти