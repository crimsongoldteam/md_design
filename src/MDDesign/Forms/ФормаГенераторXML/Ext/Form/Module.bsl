// MIT License

// Copyright (c) 2025 Zherebtsov Nikita <nikita@crimsongold.ru>

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/crimsongoldteam/md_design

#Область ОписаниеПеременных

// Кэш пространств имен файлов конфигурации
&НаКлиенте
Перем мКэшПространствИмен;

// Соответствие разделов метаданных элементам дерева
&НаКлиенте
Перем мЭлементыДереваРазделы;

// Открытые на изменение файлы конфигурации
&НаКлиенте
Перем мФайлыКонфигурацииВРаботе;

// Открытые на изменение модули конфигурации
&НаКлиенте
Перем мМодулиКонфигурацииВРаботе;

// Основная форма, строка таблицы ДеревоИзменений
&НаКлиенте
Перем мОсновнаяФорма;

#КонецОбласти

#Область ОбработчикиСобытийФормы

#Область ПрограммныйИнтерфейс

// Возвращает структуру с разделами метаданных конфигурации
//
// Возвращаемое значение:
//  Структура - соответствие имен разделов метаданных
&НаКлиенте
Функция РазделыМетаданных()
	Результат = Новый Структура;
	
	ОписаниеРазделов = ПолучитьОписаниеРазделовМетаданных();
	Для Каждого РазделМетаданных Из ОписаниеРазделов Цикл
		Результат.Вставить(РазделМетаданных.Имя, РазделМетаданных.Имя);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с типами значений свойств элементов формы
//
// Возвращаемое значение:
//  Структура - соответствие типов значений свойств
&НаКлиенте
Функция ТипыЗначенийСвойств()
	Результат = Новый Структура;
	Результат.Вставить("СистемноеПеречисление", "СистемноеПеречисление");
	Результат.Вставить("БиблиотекаКартинок", "БиблиотекаКартинок");
	Результат.Вставить("WebЦвета", "WebЦвета");
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с типами форм объектов конфигурации
//
// Возвращаемое значение:
//  Структура - соответствие типов форм
&НаКлиенте
Функция ТипыФорм()
	Результат = Новый Структура;
	Для Каждого КлючЗначение Из ТипыФормВнутренний() Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Ключ);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ОбработчикиСобытийФормы()
	Результат = Новый Структура;
	Для Каждого КлючЗначение Из ОбработчикиСобытийФормыВнутренний() Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Ключ);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СоздатьПолучитьМетод(СтрокаИсточник, Имя, Область, ЭтоФункция = Ложь, ТипМодуля = Неопределено)
	СтрокаМодуль = СоздатьПолучитьСтрокуМодуль(СтрокаИсточник, ТипМодуля);
	СтруктураМодуля = СтрокаМодуль.Данные;
	
	СуществующийМетод = ПолучитьМетод(СтруктураМодуля.СемантическоеДерево, Имя);
	Если СуществующийМетод = Неопределено Тогда
		ПараметрыМетода = ПолучитьПараметрыМетода();
		ПараметрыМетода.Содержимое.Имя = Имя;
		ПараметрыМетода.Содержимое.ЭтоФункция = ЭтоФункция;
		ПараметрыМетода.Область = Область;
		
		ДобавитьМетодВОбласть(СтруктураМодуля.СтруктураОбластей, ПараметрыМетода);
		Возврат ПараметрыМетода;
	КонецЕсли;
	
	ПараметрыМетода = ПолучитьПараметрыМетода();
	ПараметрыМетода.Существует = Истина;
	ПараметрыМетода.Содержимое = СуществующийМетод.Содержимое;
	ПараметрыМетода.Позиция = СуществующийМетод.Позиция;
	ПараметрыМетода.Область = Область;
	
	СтруктураМодуля.ИзмененныеМетоды.Добавить(ПараметрыМетода);
	
	Возврат ПараметрыМетода;
КонецФункции

&НаКлиенте
Функция ДобавитьПараметрВМетод(Метод, Имя, ЗначениеПоУмолчанию = Неопределено, ПоЗначению = Ложь, Описание = Неопределено)
	Результат = Новый Структура;
	Результат.Вставить("Имя", Имя);
	Результат.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
	Результат.Вставить("ПоЗначению", ПоЗначению);
	Результат.Вставить("Описание", Описание);
	Результат.Вставить("Тип", Неопределено);
	
	Метод.Содержимое.Параметры.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СоздатьПолучитьСтрокуМодуль(СтрокаИсточник, ТипМодуля)
	Если СтрокаИсточник.Данные.Модуль <> Неопределено Тогда
		Возврат ДеревоИзменений.НайтиПоИдентификатору(СтрокаИсточник.Данные.Модуль);
	КонецЕсли;
	СтрокаМодуль = ДобавитьСтрокуВДеревоИзменений(
			СтрокаИсточник,
			ТипыСтрокДереваИзменений().Модуль,
			"Модуль",
			Истина);
	
	Путь = ПолучитьПутьКФайлуМодуля(СтрокаИсточник, ТипМодуля);
	
	Текст = ПолучитьТекстМодуля(Путь);
	СемантическоеДерево = ПостроительТекстаМодуля().РазобратьМодуль(Текст);
	СтрокаМодуль.Данные = ПолучитьПараметрыМодуля(СемантическоеДерево, Текст);
	
	мМодулиКонфигурацииВРаботе.Вставить(СтрокаМодуль, Путь);
	
	Возврат СтрокаМодуль;
КонецФункции

// Создает или получает объект конфигурации в дереве изменений
//
// Параметры:
//  Тип - Строка - тип объекта конфигурации (Справочник, Документ, и т.д.)
//  Имя - Строка - имя объекта конфигурации
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений объекта конфигурации

&НаКлиенте
Функция СоздатьПолучитьОбъектКонфигурации(Знач Тип, Знач Имя)
	СтрокаРаздел = СоздатьПолучитьРазделВДеревеИзменений(Тип);
	
	ЭлементыРаздела = СтрокаРаздел.ПолучитьЭлементы();
	Для Каждого ЭлементРаздела Из ЭлементыРаздела Цикл
		Если ЭлементРаздела.Имя = Имя Тогда
			Возврат ЭлементРаздела;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаОбъект = ДобавитьСтрокуВДеревоИзменений(
			СтрокаРаздел,
			Тип,
			Имя,
			НЕ ЕстьОбъектКонфигурации(Тип, Имя));
	
	СтрокаОбъект.Данные.УИД = Новый УникальныйИдентификатор;
	СтрокаОбъект.Данные.НаборСвойств = Новый Структура;
	
	Возврат СтрокаОбъект;
КонецФункции

// Создает или получает реквизит объекта конфигурации в дереве изменений
//
// Параметры:
//  СтрокаОбъект - ДанныеФормыЭлементДерева - строка дерева изменений объекта конфигурации
//  Имя - Строка - имя реквизита
//  ОписаниеТипов - Структура - описание типов реквизита
//  СтрокаРодитель - ДанныеФормыЭлементДерева - родительская строка (для табличных частей)
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений реквизита
&НаКлиенте
Функция СоздатьПолучитьРеквизитОбъектаКонфигурации(СтрокаОбъект, Знач Имя, ОписаниеТипов, СтрокаРодитель = Неопределено)
	
	ИмяТабличнойЧасти = Неопределено;
	Если СтрокаРодитель <> Неопределено Тогда
		СтрокаРеквизиты = СтрокаРодитель;
		ИмяТабличнойЧасти = СтрокаРодитель.Имя;
	Иначе
		ИДСтрокиРеквизиты = СтрокаОбъект.Данные.Реквизиты;
		Если ИДСтрокиРеквизиты = Неопределено Тогда
			СтрокаРеквизиты = ДобавитьСтрокуВДеревоИзменений(СтрокаОбъект, ТипыСтрокДереваИзменений().Реквизиты);
			
			СтрокаОбъект.Данные.Реквизиты = СтрокаРеквизиты.ПолучитьИдентификатор();
		Иначе
			СтрокаРеквизиты = ДеревоИзменений.НайтиПоИдентификатору(ИДСтрокиРеквизиты);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРеквизит = ПолучитьЭлементДереваИзмененийПоИмени(СтрокаРеквизиты, Имя);
	
	Если СтрокаРеквизит <> Неопределено Тогда
		Возврат СтрокаРеквизит;
	КонецЕсли;
	
	Тип = ТипыСтрокДереваИзменений().Реквизит;
	Если ОписаниеТипов.Типы.Найти("ДеревоЗначений") <> Неопределено Тогда
		Тип = ТипыСтрокДереваИзменений().РеквизитДеревоЗначений;
	ИначеЕсли ОписаниеТипов.Типы.Найти("ТаблицаЗначений") <> Неопределено Тогда
		Тип = ТипыСтрокДереваИзменений().РеквизитТаблицаЗначений;
	Иначе
		Тип = ТипыСтрокДереваИзменений().Реквизит;
	КонецЕсли;
	
	ЭтоТаблицаДерево = ЭтоРеквизитТабличнаяЧасть(Тип);
	
	ЭтоНовый = СтрокаОбъект.ЭтоНовый ИЛИ
		НЕ ЕстьРеквизитОбъектаКонфигурации(СтрокаОбъект.Тип, СтрокаОбъект.Имя, Имя, ЭтоТаблицаДерево, ИмяТабличнойЧасти);
	СтрокаРеквизит = ДобавитьСтрокуВДеревоИзменений(
			СтрокаРеквизиты,
			Тип,
			Имя,
			ЭтоНовый);
	
	СтрокаРеквизит.Данные.УИД = Новый УникальныйИдентификатор;
	
	Если НЕ ЭтоТаблицаДерево Тогда
		СтрокаРеквизит.Данные.ОписаниеТипов = ОписаниеТипов;
	КонецЕсли;
	
	Возврат СтрокаРеквизит;
КонецФункции

// Создает форму для объекта конфигурации в дереве изменений
//
// Параметры:
//  СтрокаОбъект - ДанныеФормыЭлементДерева - строка дерева изменений объекта конфигурации
//  Имя - Строка - имя формы
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений формы
&НаКлиенте
Функция СоздатьФорму(СтрокаОбъект, Имя)
	ИДСтрокиФормы = СтрокаОбъект.Данные.Формы;
	Если ИДСтрокиФормы = Неопределено Тогда
		СтрокаФормы = ДобавитьСтрокуВДеревоИзменений(СтрокаОбъект, ТипыСтрокДереваИзменений().Формы);
		СтрокаОбъект.Данные.Формы = СтрокаФормы.ПолучитьИдентификатор();
	Иначе
		СтрокаФормы = ДеревоИзменений.НайтиПоИдентификатору(ИДСтрокиФормы);
	КонецЕсли;
	//
	//Если ЕстьФормаКонфигурации() Тогда
	//	ВызватьИсключение СтрШаблон(НСтр("ru = 'Форма с именем ""%1"" уже существует'"), Тип);
	//КонецЕсли;
	
	СтрокаФорма = ДобавитьСтрокуВДеревоИзменений(
			СтрокаФормы,
			ТипыСтрокДереваИзменений().Форма,
			Имя,
			Истина);
	
	СтрокаФорма.Данные.НаборСвойств = Новый Структура;
	СтрокаФорма.Данные.УИД = Новый УникальныйИдентификатор;
	СтрокаФорма.Данные.ОбработчикиСобытий = Новый Структура;
	
	Возврат СтрокаФорма;
КонецФункции

&НаКлиенте
Функция ПолучитьОсновнуюФорму()
	Возврат мОсновнаяФорма;
КонецФункции

&НаКлиенте
Процедура УстановитьОбработчикСобытияФормы(СтрокаФорма, ИмяСобытия, ИмяМетода = Неопределено)
	СтрокаФорма.Данные.ОбработчикиСобытий.Вставить(ИмяСобытия, ?(ИмяМетода = Неопределено, ИмяСобытия, ИмяМетода));
КонецПроцедуры

// Устанавливает свойство объекта конфигурации
//
// Параметры:
//  СтрокаОбъект - ДанныеФормыЭлементДерева - строка дерева изменений объекта конфигурации
//  Имя - Строка - имя свойства
//  Значение - ДанныеФормыЭлементДерева - значение свойства (форма)
&НаКлиенте
Процедура УстановитьСвойствоОбъектаКонфигурации(СтрокаОбъект, Имя, Значение)
	Если ТипыФорм().Свойство(Имя) Тогда
		ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(СтрокаОбъект.Тип);
		ПолноеИмя = ОписаниеРаздела.ВнутреннееИмя + "."
			+ СтрокаОбъект.Имя + "."
			+ "Form."
			+ Значение.Имя;
		СтрокаОбъект.Данные.НаборСвойств.Вставить(ТипыФормВнутренний()[Имя], ПолноеИмя);
	КонецЕсли;
КонецПроцедуры

// Создает элемент формы в дереве изменений
//
// Параметры:
//  СтрокаРодитель - ДанныеФормыЭлементДерева - родительская строка дерева изменений
//  ИмяЭлемента - Строка - имя элемента формы
//  ТипЭлемента - Строка - тип элемента формы
//  ВидЭлемента - Строка - вид элемента формы (необязательный)
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений элемента формы
&НаКлиенте
Функция СоздатьЭлементФормы(СтрокаРодитель, Знач ИмяЭлемента, Знач ТипЭлемента, Знач ВидЭлемента = Неопределено)
	Если СтрокаРодитель.Тип = "Форма" Тогда
		ИДСтрокиФормы = СтрокаРодитель.Данные.Элементы;
		Если ИДСтрокиФормы = Неопределено Тогда
			СтрокаЭлементы = ДобавитьСтрокуВДеревоИзменений(СтрокаРодитель, ТипыСтрокДереваИзменений().Элементы);
			СтрокаРодитель.Данные.Элементы = СтрокаЭлементы.ПолучитьИдентификатор();
		Иначе
			СтрокаЭлементы = ДеревоИзменений.НайтиПоИдентификатору(ИДСтрокиФормы);
		КонецЕсли;
	Иначе
		СтрокаЭлементы = СтрокаРодитель;
	КонецЕсли;
	
	СтрокаЭлемент = ДобавитьСтрокуВДеревоИзменений(
			СтрокаЭлементы,
			ТипыСтрокДереваИзменений().Элемент,
			ИмяЭлемента,
			Истина);
	
	СтрокаЭлемент.Данные.ТипЭлемента = ТипЭлемента;
	
	Если ТипЭлемента = "КнопкаФормы" Тогда
		ВидЭлемента = Неопределено;
	КонецЕсли;
	
	СтрокаЭлемент.Данные.ВидЭлемента = ?(ВидЭлемента = Неопределено, "БезВида", ВидЭлемента);
	
	ТипВидЭлемента = ПолучитьТипВидЭлемента(ТипЭлемента, ВидЭлемента);
	ТипВнутренний = ПолучитьВнутреннееИмяТипаЭлемента(ТипВидЭлемента);
	Если ТипВнутренний = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Для типа элемента ""%1"" в макете ""ТипыЭлементов"" не указано внутреннее название.'"), ТипЭлемента);
		Сообщение.Сообщить();
	КонецЕсли;
	СтрокаЭлемент.Данные.ТипЭлементаВнутренний = ТипВнутренний;
	
	СтрокаЭлемент.Данные.НаборСвойств = Новый Структура;
	
	Возврат СтрокаЭлемент;
КонецФункции

// Создает реквизит формы в дереве изменений
//
// Параметры:
//  СтрокаФорма - ДанныеФормыЭлементДерева - строка дерева изменений формы
//  Имя - Строка - имя реквизита формы
//  ОписаниеТипов - Структура - описание типов реквизита
//  СтрокаРодитель - ДанныеФормыЭлементДерева - родительская строка (для табличных частей)
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - строка дерева изменений реквизита формы
&НаКлиенте
Функция СоздатьРеквизитФормы(СтрокаФорма, Знач Имя, ОписаниеТипов, СтрокаРодитель = Неопределено)
	Если СтрокаРодитель <> Неопределено Тогда
		СтрокаРеквизитыФормы = СтрокаРодитель;
		Если ЭтоРеквизитТабличнаяЧасть(СтрокаРодитель.Тип) Тогда
			СтрокаРеквизитыФормы = ПолучитьОтражениеТабличнойЧастиОбъектаНаФорме(СтрокаФорма, СтрокаРодитель);
		КонецЕсли;
	Иначе
		ИДСтрокиРеквизитыФормы = СтрокаФорма.Данные.Реквизиты;
		Если ИДСтрокиРеквизитыФормы = Неопределено Тогда
			СтрокаРеквизитыФормы = ДобавитьСтрокуВДеревоИзменений(СтрокаФорма, ТипыСтрокДереваИзменений().РеквизитыФормы);
			СтрокаФорма.Данные.Реквизиты = СтрокаРеквизитыФормы.ПолучитьИдентификатор();
		Иначе
			СтрокаРеквизитыФормы = ДеревоИзменений.НайтиПоИдентификатору(ИДСтрокиРеквизитыФормы);
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеТипов.Типы.Найти("ДеревоЗначений") <> Неопределено Тогда
		Тип = ТипыСтрокДереваИзменений().РеквизитФормыДеревоЗначений;
	ИначеЕсли ОписаниеТипов.Типы.Найти("ТаблицаЗначений") <> Неопределено Тогда
		Тип = ТипыСтрокДереваИзменений().РеквизитФормыТаблицаЗначений;
	Иначе
		Тип = ТипыСтрокДереваИзменений().РеквизитФормы;
	КонецЕсли;
	
	СтрокаРеквизит = ДобавитьСтрокуВДеревоИзменений(
			СтрокаРеквизитыФормы,
			Тип,
			Имя,
			Истина);
	
	СтрокаРеквизит.Данные.ОсновнойРеквизит = Ложь;
	СтрокаРеквизит.Данные.СохраняемыеДанные = Ложь;
	СтрокаРеквизит.Данные.ОписаниеТипов = ОписаниеТипов;
	
	Возврат СтрокаРеквизит;
КонецФункции

// Создает структуру описания типов для реквизита
//
// Параметры:
//  Тип - Строка - тип данных
//
// Возвращаемое значение:
//  Структура - описание типов с настройками
&НаКлиенте
Функция СоздатьОписаниеТипов(Тип)
	Результат = Новый Структура;
	Результат.Вставить("ДлинаСтроки", 0);
	Результат.Вставить("ЧастиДаты", Неопределено);
	Результат.Вставить("ДлинаЧисла", 0);
	Результат.Вставить("ТочностьЧисла", 0);
	Результат.Вставить("Типы", Новый Массив);
	Результат.Типы.Добавить(Тип);
	Возврат Результат;
КонецФункции

// Устанавливает свойство элемента формы
//
// Параметры:
//  СтрокаЭлементФормы - ДанныеФормыЭлементДерева - строка дерева изменений элемента формы
//  Имя - Строка - имя свойства
//  Значение - Произвольный - значение свойства
//  Тип - Строка - тип значения свойства (необязательный)
&НаКлиенте
Процедура УстановитьСвойствоЭлементаФормы(СтрокаЭлементФормы, Имя, Значение, Тип = Неопределено)
	СтрокаЭлементФормы.Данные.НаборСвойств.Вставить(Имя, Новый Структура("Значение,Тип", Значение, Тип));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТелоМетода(Метод, Текст)
	Метод.Содержимое.Тело = ПолучитьТекстТелаСОтступами(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКТелуМетода(Метод, Текст)
	Если ПустаяСтрока(Метод.Содержимое.Тело) Тогда
		УстановитьТелоМетода(Метод, Текст);
		Возврат;
	КонецЕсли;
	
	МассивСтрокТело = СтрРазделить(Метод.Содержимое.Тело, Символы.ПС);
	Если НЕ ПустаяСтрока(МассивСтрокТело[МассивСтрокТело.ВГраница()]) Тогда
		Метод.Содержимое.Тело =
			Метод.Содержимое.Тело + Символы.ПС;
	КонецЕсли;
	
	Метод.Содержимое.Тело =
		Метод.Содержимое.Тело
		+ ПолучитьТекстТелаСОтступами(Текст);
КонецПроцедуры

// Добавляет отступы к каждой строке текста
//
// Параметры:
//  Строка - Строка - исходный текст
//
// Возвращаемое значение:
//  Строка - текст с добавленными отступами
&НаКлиенте
Функция ПолучитьТекстТелаСОтступами(Строка)
	МассивСтрок = СтрРазделить(Строка, Символы.ПС);
	МассивСтрокРезультат = Новый Массив;
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		МассивСтрокРезультат.Добавить(Символы.Таб + ТекСтрока);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрокРезультат, Символы.ПС);
КонецФункции

// Проверяет существование реквизита в объекте конфигурации
//
// Параметры:
//  ТипОбъекта - Строка - тип объекта конфигурации
//  ИмяОбъекта - Строка - имя объекта конфигурации
//  ИмяРеквизита - Строка - имя реквизита
//  ЭтаТабличнаяЧасть - Булево - признак табличной части
//  ИмяТабличнойЧасти - Строка - имя табличной части (необязательный)
//
// Возвращаемое значение:
//  Булево - Истина, если реквизит существует
&НаКлиенте
Функция ЕстьРеквизитОбъектаКонфигурации(ТипОбъекта, ИмяОбъекта, ИмяРеквизита, ЭтаТабличнаяЧасть, ИмяТабличнойЧасти = Неопределено)
	Путь = ПолучитьПутьКФайлуОбъекта(ТипОбъекта, ИмяОбъекта);
	ДокументКонфигурации = ОткрытьФайлКонфигурации(Путь, Ложь);
	
	Если ИмяТабличнойЧасти = Неопределено Тогда
		ШаблонЗапроса =
			"//*[local-name()='%1']/
			|*[local-name()='Properties']/
			|*[local-name()='Name' and text()='%2']";
		ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ?(ЭтаТабличнаяЧасть, "TabularSection", "Attribute"), ИмяРеквизита);
	Иначе
		ШаблонЗапроса =
			"//*[local-name()='TabularSection'][*[local-name()='Properties']/
			|*[local-name()='Name' and .='%1']]/
			|*[local-name()='ChildObjects']/
			|*[local-name()='Attribute'][*[local-name()='Properties']/
			|*[local-name()='Name' and .='%2']]";
		ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ИмяТабличнойЧасти, ИмяРеквизита);
	КонецЕсли;
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументКонфигурации);
	Выражение = ДокументКонфигурации.СоздатьВыражениеXPath(ТекстЗапроса, Разыменователь);
	Результат = Выражение.Вычислить(ДокументКонфигурации, ТипРезультатаDOMXPath.Булево);
	
	Возврат Результат.БулевоЗначение;
	
КонецФункции

// Проверяет существование объекта конфигурации
//
// Параметры:
//  Тип - Строка - тип объекта конфигурации
//  Имя - Строка - имя объекта конфигурации
//
// Возвращаемое значение:
//  Булево - Истина, если объект существует
&НаКлиенте
Функция ЕстьОбъектКонфигурации(Тип, Имя)
	ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(Тип);
	ВнутреннийТип = ОписаниеРаздела.ВнутреннееИмя;
	
	ШаблонЗапроса =
		"/*[local-name()='MetaDataObject']/
		|*[local-name()='Configuration']/
		|*[local-name()='ChildObjects']/
		|*[local-name()='%1' and text()='%2']";
	
	ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ВнутреннийТип, Имя);
	
	ДокументКонфигурации = ОткрытьФайлКонфигурации(ПолучитьПутьКФайлуКонфигурации(), Ложь);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументКонфигурации);
	Выражение = ДокументКонфигурации.СоздатьВыражениеXPath(ТекстЗапроса, Разыменователь);
	Результат = Выражение.Вычислить(ДокументКонфигурации, ТипРезультатаDOMXPath.Булево);
	
	Возврат Результат.БулевоЗначение;
КонецФункции

&НаКлиенте
Функция ЭтоСтандартныйРеквизит(ТипОбъекта, ИмяРеквизита)
	ОписаниеРаздела = УправлениеСвойствами().ПолучитьРазделМетаданныхПоИмени(ТипОбъекта);
	Возврат ОписаниеРаздела.СтандартныеРеквизиты.Свойство(ИмяРеквизита);
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Разделы = ПолучитьОписаниеРазделовМетаданных();
	Для Каждого Раздел Из Разделы Цикл
		Элементы.ТипОбъекта.СписокВыбора.Добавить(Раздел.Имя, Раздел.Представление, , Раздел.Картинка);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	ЗаполнитьДеревоИзменений();
	
	мКэшПространствИмен = Новый Структура();
	мКэшПространствИмен.Вставить("ВерсияXML", "1.0");
	мКэшПространствИмен.Вставить("АттрибутыОбщие", Новый Соответствие);
	мКэшПространствИмен.Вставить("АттрибутMDClasses", "http://v8.1c.ru/8.3/MDClasses");
	мКэшПространствИмен.Вставить("АттрибутForm", "http://v8.1c.ru/8.3/xcf/logform");
	
	ПрочитатьАттрибуты();
	
	Для Каждого КлючЗначениеРазделы Из мЭлементыДереваРазделы Цикл
		ОбъектыКонфигурации = КлючЗначениеРазделы.Значение.ПолучитьЭлементы();
		
		Для Каждого ОбъектКонфигурации Из ОбъектыКонфигурации Цикл
			ВыгрузитьОбъектКонфигурации(ОбъектКонфигурации);
		КонецЦикла;
	КонецЦикла;
	
	ЗаписатьФайлыКонфигурации();
	ЗаписатьМодулиКонфигурации();
	
	Закрыть();
	Состояние(НСтр("ru = 'Выгрузка успешно завершена'"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИменаГрупп(Команда)
	//ЗапросИИ = Новый Массив;
	//ЗаполнитьЗапросКИИ(мЭлементДереваФорма, ЗапросИИ, "");
	//
	//ЗапросИИСтрока = СтрСоединить(ЗапросИИ, Символы.ПС);
	
	//
	//Настройки = РаботаСИИ().ПолучитьНастройки();
	//Настройки.ПровайдерИИ = ВладелецФормы.ПровайдерИИ;
	//Настройки.МодельИИ = ВладелецФормы.МодельИИ;
	//Настройки.ТокенИИ = ВладелецФормы.ТокенИИ;
	//
	//Ответ = РаботаСИИ().ПолучитьИменаЭлементовФормы(ЗапросИИСтрока, Настройки);
	//
	//Если Ответ = Неопределено Тогда
	//	ВызватьИсключение "Не удалось получить ответ от ИИ!";
	//КонецЕсли;
	//
	//ПозицияНачала = СтрНайти(Ответ, "{");
	//Ответ = Сред(Ответ, ПозицияНачала);
	//
	//ОтветСтруктура = СлужебныеФункции().JSONВСтруктуру(Ответ);
	//
	//ЗаполнитьИменаЭлементовПоОтветуИИ(мЭлементДереваФорма, ОтветСтруктура);
	//
	//ЗаполнитьИменаРеквизитовПоОтветуИИ(мЭлементДереваРеквизиты, ОтветСтруктура);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкрипт(Команда)
	ЗаполнитьДеревоИзменений();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогXMLНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Каталог = КаталогXML;
	ДиалогВыбораКаталога.Заголовок = НСтр("ru = 'Выберите каталог xml-выгрузки конфигурации'");
	
	Оповещение = Новый ОписаниеОповещения("КаталогXMLНачалоВыбораЗавершение", ЭтотОбъект);
	ДиалогВыбораКаталога.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура КаталогXMLНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтотОбъект.КаталогXML = Результат[0];
КонецПроцедуры

&НаКлиенте
Процедура ИмяОбъектаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(КаталогXML) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Заполните каталог XML'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяОбъектаНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура("КаталогXML", КаталогXML);
	
	ОткрытьФорму(ПолучитьОписаниеОбработки() + ".Форма.ФормаВыбораОбъектаКонфигурации", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ИмяОбъектаНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ИмяОсновногоОбъекта = РезультатЗакрытия.ИмяОбъекта;
	ЭтотОбъект.ТипОсновногоОбъекта = РезультатЗакрытия.ТипОбъекта;
	
	ЗаполнитьДеревоИзменений();
КонецПроцедуры

&НаКлиенте
Процедура ТекстСкриптаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТаблицаСкриптов.ТекущиеДанные;
	ТекущаяСтрока.Текст = ЭтотОбъект.ТекстСкрипта;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыДеревоИзменений

&НаКлиенте
Процедура ДеревоИзмененийПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ДеревоИзменений.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено
		ИЛИ ТекущаяСтрока.Тип <> ТипыСтрокДереваИзменений().Модуль Тогда
		Элементы.ТекстМодуля.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ТекстМодуля.Видимость = Истина;
	ЭтотОбъект.ТекстМодуля = ТекущаяСтрока.Данные.Текст;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыТаблицаСкрптов

&НаКлиенте
Процедура ТаблицаСкриптовПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ТаблицаСкриптов.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Элементы.ТекстСкрипта.Доступность = Ложь;
		ЭтотОбъект.ТекстСкрипта = "";
		Возврат;
	КонецЕсли;
	
	Элементы.ТекстСкрипта.Доступность = Истина;
	ЭтотОбъект.ТекстСкрипта = ТекущаяСтрока.Текст;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Модули

&НаКлиенте
Функция ПостроительТекстаМодуля()
	Возврат ВладелецФормы.ПостроительТекстаМодуля();
КонецФункции

&НаКлиенте
Функция УправлениеСвойствами()
	Возврат ВладелецФормы.УправлениеСвойствами();
КонецФункции

&НаКлиенте
Функция СлужебныеФункции()
	Возврат ВладелецФормы.СлужебныеФункции();
КонецФункции

&НаКлиенте
Функция РаботаСИИ()
	Возврат ВладелецФормы.РаботаСИИ();
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеОбработки()
	Возврат ВладелецФормы.ПолучитьИдентификаторОбработки();
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееИмяТипаЭлемента(ТипЭлемента)
	Возврат УправлениеСвойствами().ПолучитьАнглийскоеИмяТипаЭлемента(ТипЭлемента);
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееИмяСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства)
	Возврат УправлениеСвойствами().ПолучитьАнглийскоеИмяСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства);
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееЗначениеСистемногоПеречисления(ТипЭлемента, ВидЭлемента, ИмяСвойства, ЗначениеСвойства)
	Возврат УправлениеСвойствами().ПолучитьАнглийскоеЗначениеСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства, ЗначениеСвойства);
КонецФункции

#КонецОбласти

#Область ВыполнениеСкриптов

// Создает и возвращает структуру описания метода
//
// Параметры:
//
//
// Возвращаемое значение:
//  Структура - Описание характеристик метода
&НаКлиенте
Функция МетодСтруктураОписания() Экспорт
	Структ = Новый Структура(
			"Имя, Контекст, Комментарий, КомментарийОднострочный, КомментарийОднострочныйКонец, КомментарийВозвращаемоеЗначение, 
			|Параметры, Экспортная, Асинх, Тело, Аннотация, ИмяРасширяемогоМетода, ЭтоФункция, 
			|ИнструкцииПрепроцессора");
	Структ.Параметры = НоваяТаблицаПараметров();
	Структ.ИнструкцииПрепроцессора = СтруктураИнструкцийПрепроцессораПоУмолчанию();
	Возврат Структ;
КонецФункции

// Создает и возвращает новую таблицу для параметров функции или процедуры
//
// Параметры:
//
//
// Возвращаемое значение:
//  Массив - Массив структур параметров
Функция НоваяТаблицаПараметров() Экспорт
	Возврат Новый Массив;
КонецФункции

// Создает и возвращает структуру с инструкциями препроцессора по умолчанию.
//
// Параметры:
//
//
// Возвращаемое значение:
//  Структура - Содержит настройки инструкций препроцессора.
&НаКлиенте
Функция СтруктураИнструкцийПрепроцессораПоУмолчанию() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Клиент", Истина);
	Результат.Вставить("Сервер", Истина);
	Результат.Вставить("ТонкийКлиент", Истина);
	Результат.Вставить("ВебКлиент", Истина);
	Результат.Вставить("МобильныйАвтономныйСервер", Истина);
	Результат.Вставить("МобильноеПриложениеКлиент", Истина);
	Результат.Вставить("МобильноеПриложениеСервер", Истина);
	Результат.Вставить("МобильныйКлиент", Истина);
	Результат.Вставить("ТолстыйКлиентОбычноеПриложение", Истина);
	Результат.Вставить("ТолстыйКлиентУправляемоеПриложение", Истина);
	Результат.Вставить("ВнешнееСоединение", Истина);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Выгрузка

&НаКлиенте
Процедура ВыгрузитьОбъектКонфигурации(СтрокаОбъектКонфигурации)
	Если СтрокаОбъектКонфигурации.Тип = РазделыМетаданных().Справочник Тогда
		ВыгрузитьСправочник(СтрокаОбъектКонфигурации);
		Возврат;
	КонецЕсли;
	
	Если СтрокаОбъектКонфигурации.Тип = РазделыМетаданных().Документ Тогда
		ВыгрузитьДокумент(СтрокаОбъектКонфигурации);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлыКонфигурации()
	Для Каждого КлючЗначение Из мФайлыКонфигурацииВРаботе Цикл
		Значение = КлючЗначение.Значение;
		ИмяФайла = КлючЗначение.Ключ;
		Если НЕ Значение.ДляЗаписи Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураИмяФайла = СлужебныеФункции().РазложитьПолноеИмяФайла(ИмяФайла);
		СоздатьКаталог(СтруктураИмяФайла.Путь);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайла); // BSLLS:ExternalAppStarting-off
		
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(Значение.ДокументDOM, ЗаписьXML);
		
		ЗаписьXML.Закрыть();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьМодулиКонфигурации()
	Для Каждого КлючЗначение Из мМодулиКонфигурацииВРаботе Цикл
		ИмяФайла = КлючЗначение.Значение;
		СтруктураИмяФайла = СлужебныеФункции().РазложитьПолноеИмяФайла(ИмяФайла);
		СоздатьКаталог(СтруктураИмяФайла.Путь);
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(КлючЗначение.Ключ.Данные.Текст);
		ТекстовыйДокумент.Записать(ИмяФайла);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьАттрибуты()
	ДокументDOM = ОткрытьФайлКонфигурации(ПолучитьПутьКФайлуКонфигурации(), Ложь);
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	
	Для Каждого Аттрибут Из УзелMetaDataObject.Атрибуты Цикл
		
		Если Аттрибут.Имя = "version" Тогда
			мКэшПространствИмен.ВерсияXML = Аттрибут.Значение;
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Аттрибут.Префикс) Тогда
			Продолжить;
		КонецЕсли;
		
		мКэшПространствИмен.АттрибутыОбщие.Вставить(Аттрибут.ЛокальноеИмя, Аттрибут.Значение);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОткрытьФайлКонфигурации(ИмяФайла, ДляЗаписи)
	Результат = мФайлыКонфигурацииВРаботе.Получить(ИмяФайла);
	
	Если Результат <> Неопределено Тогда
		Результат.ДляЗаписи = Результат.ДляЗаписи ИЛИ ДляЗаписи;
		Возврат Результат.ДокументDOM;
	КонецЕсли;
	
	ФайлСуществует = СлужебныеФункции().ФайлСуществует(ИмяФайла);
	
	Результат = Новый Структура("ДокументDOM, ДляЗаписи", Неопределено, ДляЗаписи);
	
	Если ФайлСуществует Тогда
		Результат.ДокументDOM = ПрочитатьФайлКонфигурации(ИмяФайла);
	Иначе
		Если НЕ ДляЗаписи Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В выгрузке не найден файл: %1'"), ИмяФайла);;
		КонецЕсли;
		Результат.ДокументDOM = Новый ДокументDOM;
	КонецЕсли;
	
	мФайлыКонфигурацииВРаботе.Вставить(ИмяФайла, Результат);
	
	Возврат Результат.ДокументDOM;
КонецФункции

&НаКлиенте
Функция ПрочитатьФайлКонфигурации(ИмяФайла)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла); // BSLLS:ExternalAppStarting-off
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
КонецФункции

#Область ДеревоИзменений

&НаКлиенте
Функция ЭтоРеквизитТабличнаяЧасть(Тип)
	Возврат Тип = ТипыСтрокДереваИзменений().РеквизитДеревоЗначений
		ИЛИ Тип = ТипыСтрокДереваИзменений().РеквизитТаблицаЗначений;
КонецФункции

&НаКлиенте
Функция ПолучитьОтражениеТабличнойЧастиОбъектаНаФорме(СтрокаФорма, СтрокаТабличнаяЧасть)
	ИДТабличнойЧасти = СтрокаТабличнаяЧасть.ПолучитьИдентификатор();
	СтрокаРеквизитыФормы = ДеревоИзменений.НайтиПоИдентификатору(СтрокаФорма.Данные.Реквизиты);
	
	СтрокиРеквизиты = СтрокаРеквизитыФормы.ПолучитьЭлементы();
	
	СтрокаОбъект = Неопределено;
	Для Каждого СтрокаРеквизит Из СтрокиРеквизиты Цикл
		Если СтрокаРеквизит.Данные.ОсновнойРеквизит Тогда
			СтрокаОбъект = СтрокаРеквизит;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаРеквизитыОбъекта = СтрокаОбъект.ПолучитьЭлементы();
	
	Для Каждого СтрокаРеквизитОбъекта Из СтрокаРеквизитыОбъекта Цикл
		Если СтрокаРеквизитОбъекта.Данные.ТабличнаяЧасть = ИДТабличнойЧасти Тогда
			Возврат СтрокаРеквизитОбъекта;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаТабличнаяЧасть = ДобавитьСтрокуВДеревоИзменений(
			СтрокаОбъект,
			ТипыСтрокДереваИзменений().ОтражениеТабличнойЧасти,
			СтрокаТабличнаяЧасть.Имя,
			Ложь);
	СтрокаТабличнаяЧасть.Данные.ТабличнаяЧасть = ИДТабличнойЧасти;
	
	Возврат СтрокаТабличнаяЧасть;
КонецФункции

&НаКлиенте
Функция ТипыСтрокДереваИзменений()
	Результат = Новый Структура;
	
	ОписаниеТипов = ПолучитьОписаниеТиповСтрокДереваИзменений();
	Для Каждого КлючЗначение Из ОписаниеТипов Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Ключ);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеТиповСтрокДереваИзменений()
	КонстантаРеквизитФормы = "СохраняемыеДанные,ОсновнойРеквизит,ОписаниеТипов";
	
	Результат = Новый Структура;
	
	Результат.Вставить("Формы",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Форма, НСтр("ru = 'Формы'")));
	
	Результат.Вставить("Реквизиты",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, НСтр("ru = 'Реквизиты'")));
	
	Результат.Вставить("Элементы",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.ОформлениеДефисЖелтый, НСтр("ru = 'Элементы'"), "Элементы"));
	
	Результат.Вставить("Форма",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Форма, , "Реквизиты,Элементы,НаборСвойств,УИД,Модуль,ОбработчикиСобытий,НаборСвойствВнутренний"));
	
	Результат.Вставить("Реквизит",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , "ОписаниеТипов,УИД"));
	
	Результат.Вставить("РеквизитТаблицаЗначений",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , "УИД"));
	
	Результат.Вставить("РеквизитДеревоЗначений",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , "УИД"));
	
	Результат.Вставить("РеквизитыФормы",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, НСтр("ru = 'Реквизиты'")));
	
	Результат.Вставить("ОтражениеТабличнойЧасти",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , "ТабличнаяЧасть"));
	
	Результат.Вставить("РеквизитФормы",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , КонстантаРеквизитФормы));
	
	Результат.Вставить("РеквизитФормыТаблицаЗначений",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , КонстантаРеквизитФормы));
	
	Результат.Вставить("РеквизитФормыДеревоЗначений",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.Реквизит, , КонстантаРеквизитФормы));
	
	Результат.Вставить("Модуль",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.РежимПросмотраСпискаСписок));
	
	Результат.Вставить("Элемент",
		СоздатьОписаниеТипСтрокиДереваИзменений(БиблиотекаКартинок.ОформлениеДефисЖелтый, , "НаборСвойств,ТипЭлемента,ВидЭлемента,ТипЭлементаВнутренний"));
	
	Для Каждого Раздел Из ПолучитьОписаниеРазделовМетаданных() Цикл
		
		Результат.Вставить(Раздел.Имя,
			СоздатьОписаниеТипСтрокиДереваИзменений(Раздел.Картинка, Раздел.Представление, "Реквизиты,Формы,УИД,НаборСвойств"));
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СоздатьОписаниеТипСтрокиДереваИзменений(Картинка, Имя = Неопределено, Данные = Неопределено)
	Результат = Новый Структура;
	Результат.Вставить("Картинка", Картинка);
	Результат.Вставить("Имя", Имя);
	Результат.Вставить("Данные", Данные);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуВДеревоИзменений(СтрокаРодитель, Тип, Имя = Неопределено, ЭтоНовый = Ложь)
	Результат = СтрокаРодитель.ПолучитьЭлементы().Добавить();
	Результат.Тип = Тип;
	
	Описание = ПолучитьОписаниеТиповСтрокДереваИзменений()[Тип];
	
	Результат.Имя = ?(Имя = Неопределено, Описание.Имя, Имя);;
	Результат.Картинка = Описание.Картинка;
	
	Результат.ЭтоНовый = ЭтоНовый;
	
	Если Описание.Данные <> Неопределено Тогда
		Результат.Данные = Новый Структура;
		МассивКлючей = СтрРазделить(Описание.Данные, ",");
		Для Каждого Ключ Из МассивКлючей Цикл
			Результат.Данные.Вставить(СокрЛП(Ключ));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СоздатьПолучитьРазделВДеревеИзменений(Тип)
	Если мЭлементыДереваРазделы.Свойство(Тип) Тогда
		Возврат мЭлементыДереваРазделы[Тип];
	КонецЕсли;
	
	СтрокаРаздел = ДобавитьСтрокуВДеревоИзменений(
			ДеревоИзменений,
			Тип);
	
	мЭлементыДереваРазделы.Вставить(Тип, СтрокаРаздел);
	
	Возврат СтрокаРаздел;
КонецФункции

&НаКлиенте
Функция ПолучитьРазделМетаданныхПоИмени(Имя)
	ОписаниеРазделов = ПолучитьОписаниеРазделовМетаданных();
	Для Каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
		Если ОписаниеРаздела.Имя = Имя Тогда
			Возврат ОписаниеРаздела;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементДереваИзмененийПоИмени(ЭлементРодитель, Имя)
	Подэлементы = ЭлементРодитель.ПолучитьЭлементы();
	Для Каждого Элемент Из Подэлементы Цикл
		Если Элемент.Имя = Имя Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДеревоИзменений()
	мФайлыКонфигурацииВРаботе = Новый Соответствие;
	мМодулиКонфигурацииВРаботе = Новый Соответствие;
	мЭлементыДереваРазделы = Новый Структура;
	
	ДеревоИзменений.ПолучитьЭлементы().Очистить();
	
	СтрокаОбъект = СоздатьПолучитьОбъектКонфигурации(ТипОсновногоОбъекта, ИмяОсновногоОбъекта);
	
	СтрокаФорма = ДобавитьФормуВДеревоИзменений(СтрокаОбъект, Параметры.СхемыФормы.СхемаЭлементы);
	мОсновнаяФорма = СтрокаФорма;
	
	УстановитьСвойствоОбъектаКонфигурации(СтрокаОбъект, ТипыФорм().ОсновнаяФормаОбъекта, СтрокаФорма);
	
	ЗаполнитьРеквизиты(СтрокаОбъект, СтрокаФорма);
	
	ВыполнитьСкрипты();
	
	СформироватьТекстыМодулей();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизиты(СтрокаОбъект, СтрокаФорма)
	Для Каждого СхемаРеквизита Из Параметры.СхемыФормы.СхемаРеквизиты Цикл
		Если СхемаРеквизита.ЭтоРеквизитФормы Тогда
			СтрокаРеквизит = СоздатьРеквизитФормы(СтрокаФорма, СхемаРеквизита.Имя, СхемаРеквизита.ОписаниеТипов);
			Для Каждого СхемаПодчиненногоРеквизита Из СхемаРеквизита.Подчиненные Цикл
				СоздатьРеквизитФормы(СтрокаОбъект, СхемаПодчиненногоРеквизита.Имя, СхемаПодчиненногоРеквизита.ОписаниеТипов, СтрокаРеквизит);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Если ЭтоСтандартныйРеквизит(СтрокаОбъект.Тип, СхемаРеквизита.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизит = СоздатьПолучитьРеквизитОбъектаКонфигурации(СтрокаОбъект, СхемаРеквизита.Имя, СхемаРеквизита.ОписаниеТипов);
		
		Для Каждого СхемаПодчиненногоРеквизита Из СхемаРеквизита.Подчиненные Цикл
			Если СхемаПодчиненногоРеквизита.ЭтоРеквизитФормы Тогда
				СоздатьРеквизитФормы(СтрокаФорма, СхемаПодчиненногоРеквизита.Имя, СхемаПодчиненногоРеквизита.ОписаниеТипов, СтрокаРеквизит);
			Иначе
				СоздатьПолучитьРеквизитОбъектаКонфигурации(СтрокаОбъект, СхемаПодчиненногоРеквизита.Имя, СхемаПодчиненногоРеквизита.ОписаниеТипов, СтрокаРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкрипты()
	Для Каждого СтрокаСкрипт Из ТаблицаСкриптов Цикл
		Выполнить(СтрокаСкрипт.Текст);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстыМодулей()
	Для Каждого КлючЗначение Из мМодулиКонфигурацииВРаботе Цикл
		СформироватьТекстМодуля(КлючЗначение.Ключ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеРазделовМетаданных()
	Результат = Новый Массив;
	
	ПараметрыМетаданных = ПолучитьПараметрыРазделаМетаданных();
	ПараметрыМетаданных.Имя = "Справочник";
	ПараметрыМетаданных.Представление = НСтр("ru = 'Справочники'");
	ПараметрыМетаданных.ОсновнаяФорма = "ФормаЭлемента";
	ПараметрыМетаданных.ВнутреннееИмя = "Catalog";
	ПараметрыМетаданных.ВнутреннееИмяМнож = "Catalogs";
	ПараметрыМетаданных.Картинка = БиблиотекаКартинок.Справочник;
	Результат.Добавить(ПараметрыМетаданных);
	
	ПараметрыМетаданных = ПолучитьПараметрыРазделаМетаданных();
	ПараметрыМетаданных.Имя = "Документ";
	ПараметрыМетаданных.Представление = НСтр("ru = 'Документы'");
	ПараметрыМетаданных.ОсновнаяФорма = "ФормаДокумента";
	ПараметрыМетаданных.ВнутреннееИмя = "Document";
	ПараметрыМетаданных.ВнутреннееИмяМнож = "Documents";
	ПараметрыМетаданных.Картинка = БиблиотекаКартинок.Документ;
	Результат.Добавить(ПараметрыМетаданных);
	
	ПараметрыМетаданных = ПолучитьПараметрыРазделаМетаданных();
	ПараметрыМетаданных.Имя = "Перечисление";
	ПараметрыМетаданных.Представление = НСтр("ru = 'Перечисления'");
	ПараметрыМетаданных.ОсновнаяФорма = "Форма";
	ПараметрыМетаданных.ВнутреннееИмя = "Enum";
	ПараметрыМетаданных.ВнутреннееИмяМнож = "Enums";
	ПараметрыМетаданных.Картинка = БиблиотекаКартинок.Перечисление;
	Результат.Добавить(ПараметрыМетаданных);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыРазделаМетаданных()
	Возврат Новый Структура("Имя,Представление,ОсновнаяФорма,ВнутреннееИмя,ВнутреннееИмяМнож,Картинка");
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЭлементыФормы(СтрокаОбъект, СхемыЭлементов, СтрокаРодитель)
	Для Каждого СхемаЭлемента Из СхемыЭлементов Цикл
		ДобавитьЭлементВДеревоИзмененийРекурсивно(СтрокаОбъект, СхемаЭлемента, СтрокаРодитель);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТипВидЭлемента(ТипЭлемента, ВидЭлемента)
	ЭтоЭлементСВидом = (ТипЭлемента = "ПолеФормы" ИЛИ ТипЭлемента = "ГруппаФормы" ИЛИ ТипЭлемента = "ДекорацияФормы") И ВидЭлемента <> Неопределено;
	
	Если ЭтоЭлементСВидом Тогда
		Возврат ВидЭлемента;
	КонецЕсли;
	
	Возврат ТипЭлемента;
КонецФункции

&НаКлиенте
Функция ПолучитьВидЭлемента(СхемаЭлемента)
	ОписаниеВида = Неопределено;
	СхемаЭлемента.НаборСвойств.Свойство("Вид", ОписаниеВида);
	Если ОписаниеВида = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеВида.Значение;
КонецФункции

&НаКлиенте
Функция ДобавитьФормуВДеревоИзменений(СтрокаОбъект, СхемаЭлемента)
	ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(ТипОсновногоОбъекта);
	СтрокаФорма = СоздатьФорму(СтрокаОбъект, ОписаниеРаздела.ОсновнаяФорма);
	
	РеквизитОбъект = СоздатьРеквизитФормы(СтрокаФорма, "Объект", СоздатьОписаниеТипов(ТипОсновногоОбъекта + "Объект." + СтрокаОбъект.Имя));
	РеквизитОбъект.Данные.ОсновнойРеквизит = Истина;
	
	Если СхемаЭлемента.Свойство("ПодчиненныеЭлементы") Тогда
		ЗаполнитьЭлементыФормы(СтрокаОбъект, СхемаЭлемента.ПодчиненныеЭлементы, СтрокаФорма);
	КонецЕсли;
	
	Возврат СтрокаФорма;
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементВДеревоИзмененийРекурсивно(СтрокаОбъект, СхемаЭлемента, СтрокаРодитель)
	СтрокаЭлемент = СоздатьЭлементФормы(
			СтрокаРодитель,
			СхемаЭлемента.Имя,
			СхемаЭлемента.Тип,
			ПолучитьВидЭлемента(СхемаЭлемента));
	
	ЗаполнитьНаборСвойств(СтрокаЭлемент, СхемаЭлемента);
	
	Если НЕ СхемаЭлемента.Свойство("ПодчиненныеЭлементы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЭлементыФормы(СтрокаОбъект, СхемаЭлемента.ПодчиненныеЭлементы, СтрокаЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборСвойств(СтрокаЭлемент, СхемаЭлемента)
	Для Каждого КлючЗначение Из СхемаЭлемента.НаборСвойств Цикл
		Если КлючЗначение.Ключ = "Вид" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрЗначение = КлючЗначение.Значение;
		
		Значение = СтрЗначение.Значение;
		
		Если ТипыЗначенийСвойств().Свойство(СтрЗначение.Тип) Тогда
			Тип = СтрЗначение.Тип;
		ИначеЕсли СтрЗначение.ЭтоСистемноеПеречисление Тогда
			Тип = ТипыЗначенийСвойств().СистемноеПеречисление;
		Иначе
			Тип = Неопределено;
		КонецЕсли;
		
		УстановитьСвойствоЭлементаФормы(СтрокаЭлемент, КлючЗначение.Ключ, Значение, Тип);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбъектПоСтрокеФормы(СтрокаДерева)
	СтрокаФормы = СтрокаДерева.ПолучитьРодителя();
	
	Возврат СтрокаФормы.ПолучитьРодителя();
КонецФункции

#КонецОбласти

#Область ВыгрузкаОбъекта

#Область Перечисления

&НаКлиенте
Процедура ДобавитьПеречисление(ПараметрыВыполнения, ЭлементДерева)
	ИмяПеречисления = ЭлементДерева.Имя;
	ИмяФайла = СлужебныеФункции().ОбъединитьПути(КаталогXML, "Enums", ИмяПеречисления + ".xml");
	
	ДокументDOM = Новый ДокументDOM;
	УзелMetaDataObject = ВыгрузитьДочернийУзел(ДокументDOM, ДокументDOM, "MetaDataObject");
	УзелMetaDataObject.УстановитьСоответствиеПространстваИмен("", ПараметрыВыполнения.АттрибутMDClasses);
	Для Каждого КлючЗначение Из ПараметрыВыполнения.АттрибутыОбщие Цикл
		УзелMetaDataObject.УстановитьСоответствиеПространстваИмен(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	УзелMetaDataObject.УстановитьАтрибут("version", ПараметрыВыполнения.ВерсияXML);
	
	УзелEnum = ВыгрузитьДочернийУзел(ДокументDOM, УзелMetaDataObject, "Enum");
	УзелEnum.УстановитьАтрибут("uuid", XMLСтрока(ЭлементДерева.Данные.УИД));
	
	Категории = СтрРазделить("Ref,Manager,List", ",");
	МассивУзловInternalInfo = Новый Массив;
	Для Каждого Катогория Из Категории Цикл
		МассивУзловInternalInfo.Добавить(Новый Структура("name, category", СтрШаблон("Enum%1.%2", Катогория, ИмяПеречисления), Катогория));
	КонецЦикла;
	
	ДобавитьУзелыInternalInfo(ДокументDOM, УзелEnum, МассивУзловInternalInfo);
	
	УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелEnum, "Properties");
	ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ИмяПеречисления);
	
	УзелChildObjects = ВыгрузитьДочернийУзел(ДокументDOM, УзелEnum, "ChildObjects");
	
	ЭлементыПодчиненные = ЭлементДерева.ПолучитьЭлементы();
	Если ЭлементыПодчиненные.Количество() > 0 Тогда
		ЭлементыЗначения = ЭлементыПодчиненные[0].ПолучитьЭлементы();
		Для Каждого ЭлементЗначение Из ЭлементыЗначения Цикл
			УзелEnumValue = ВыгрузитьДочернийУзел(ДокументDOM, УзелChildObjects, "EnumValue");
			УзелEnumValue.УстановитьАтрибут("uuid", XMLСтрока(ЭлементЗначение.Данные.УИД));
			УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелEnumValue, "Properties");
			ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ЭлементЗначение.Имя);
		КонецЦикла;
	КонецЕсли;
	
	СоздатьКаталог(СлужебныеФункции().ОбъединитьПути(КаталогXML, "Enums"));
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла); // BSLLS:ExternalAppStarting-off
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗначениеПеречисления(ПараметрыВыполнения, ДокументDOM, УзелChildObjects)
	
КонецПроцедуры

#КонецОбласти

#Область Справочники

&НаКлиенте
Процедура ВыгрузитьСправочник(СтрокаОбъектКонфигурации)
	Если СтрокаОбъектКонфигурации.ЭтоНовый Тогда
		ВыгрузитьОбъектСправочник(СтрокаОбъектКонфигурации);
		ВыгрузитьОбъектВConfiguration(СтрокаОбъектКонфигурации);
	КонецЕсли;
	
	Если СтрокаОбъектКонфигурации.Данные.Реквизиты <> Неопределено Тогда
		СтрокаРеквизиты = ДеревоИзменений.НайтиПоИдентификатору(СтрокаОбъектКонфигурации.Данные.Реквизиты);
		ВыгрузитьРеквизитыОбъектаКонфигурации(СтрокаОбъектКонфигурации, СтрокаРеквизиты.ПолучитьЭлементы());
	КонецЕсли;
	
	Если СтрокаОбъектКонфигурации.Данные.Формы <> Неопределено Тогда
		СтрокаФормы = ДеревоИзменений.НайтиПоИдентификатору(СтрокаОбъектКонфигурации.Данные.Формы);
		ВыгрузитьФормы(СтрокаОбъектКонфигурации, СтрокаФормы.ПолучитьЭлементы());
	КонецЕсли;
	
	ВыгрузитьСвойстваОбъектаКонфигурации(СтрокаОбъектКонфигурации);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбъектСправочник(СтрокаОбъектКонфигурации)
	ИмяСправочника = СтрокаОбъектКонфигурации.Имя;
	
	ИмяФайла = ПолучитьПутьКФайлуОбъекта(СтрокаОбъектКонфигурации.Тип, СтрокаОбъектКонфигурации.Имя);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	УзелMetaDataObject = ВыгрузитьУзелMetaDataObject(ДокументDOM);
	
	УзелCatalog = ВыгрузитьДочернийУзел(ДокументDOM, УзелMetaDataObject, "Catalog");
	УзелCatalog.УстановитьАтрибут("uuid", XMLСтрока(СтрокаОбъектКонфигурации.Данные.УИД));
	
	Категории = СтрРазделить("Object,Ref,Selection,Manager,List", ",");
	МассивУзловInternalInfo = Новый Массив;
	Для Каждого Катогория Из Категории Цикл
		МассивУзловInternalInfo.Добавить(Новый Структура("name,category", СтрШаблон("Catalog%1.%2", Катогория, ИмяСправочника), Катогория));
	КонецЦикла;
	
	ДобавитьУзелыInternalInfo(ДокументDOM, УзелCatalog, МассивУзловInternalInfo);
	
	УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелCatalog, "Properties");
	ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ИмяСправочника);
	Для Каждого КлючЗначение Из СтрокаОбъектКонфигурации.Данные.НаборСвойств Цикл
		ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	ВыгрузитьДочернийУзел(ДокументDOM, УзелCatalog, "ChildObjects");
КонецПроцедуры

#КонецОбласти

#Область Документы

&НаКлиенте
Процедура ВыгрузитьДокумент(СтрокаОбъектКонфигурации)
	Если СтрокаОбъектКонфигурации.ЭтоНовый Тогда
		ВыгрузитьОбъектДокумент(СтрокаОбъектКонфигурации);
		ВыгрузитьОбъектВConfiguration(СтрокаОбъектКонфигурации);
	КонецЕсли;
	
	Если СтрокаОбъектКонфигурации.Данные.Реквизиты <> Неопределено Тогда
		СтрокаРеквизиты = ДеревоИзменений.НайтиПоИдентификатору(СтрокаОбъектКонфигурации.Данные.Реквизиты);
		ВыгрузитьРеквизитыОбъектаКонфигурации(СтрокаОбъектКонфигурации, СтрокаРеквизиты.ПолучитьЭлементы());
	КонецЕсли;
	
	Если СтрокаОбъектКонфигурации.Данные.Формы <> Неопределено Тогда
		СтрокаФормы = ДеревоИзменений.НайтиПоИдентификатору(СтрокаОбъектКонфигурации.Данные.Формы);
		ВыгрузитьФормы(СтрокаОбъектКонфигурации, СтрокаФормы.ПолучитьЭлементы());
	КонецЕсли;
	
	ВыгрузитьСвойстваОбъектаКонфигурации(СтрокаОбъектКонфигурации);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбъектДокумент(СтрокаОбъектКонфигурации)
	ИмяСправочника = СтрокаОбъектКонфигурации.Имя;
	
	ИмяФайла = ПолучитьПутьКФайлуОбъекта(СтрокаОбъектКонфигурации.Тип, СтрокаОбъектКонфигурации.Имя);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	УзелMetaDataObject = ВыгрузитьУзелMetaDataObject(ДокументDOM);
	
	УзелCatalog = ВыгрузитьДочернийУзел(ДокументDOM, УзелMetaDataObject, "Document");
	УзелCatalog.УстановитьАтрибут("uuid", XMLСтрока(СтрокаОбъектКонфигурации.Данные.УИД));
	
	Категории = СтрРазделить("Object,Ref,Selection,Manager,List", ",");
	МассивУзловInternalInfo = Новый Массив;
	Для Каждого Катогория Из Категории Цикл
		МассивУзловInternalInfo.Добавить(Новый Структура("name,category", СтрШаблон("Document%1.%2", Катогория, ИмяСправочника), Катогория));
	КонецЦикла;
	
	ДобавитьУзелыInternalInfo(ДокументDOM, УзелCatalog, МассивУзловInternalInfo);
	
	УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелCatalog, "Properties");
	ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name", ИмяСправочника);
	Для Каждого КлючЗначение Из СтрокаОбъектКонфигурации.Данные.НаборСвойств Цикл
		ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	ВыгрузитьДочернийУзел(ДокументDOM, УзелCatalog, "ChildObjects");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыгрузитьОбъектВConfiguration(СтрокаОбъектКонфигурации)
	ДокументDOM = ОткрытьФайлКонфигурации(ПолучитьПутьКФайлуКонфигурации(), Истина);
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	УзелConfiguration = УзелMetaDataObject.ПервыйДочерний;
	
	МассивУзлыChildObjects = УзелConfiguration.ПолучитьЭлементыПоИмени("ChildObjects");
	УзелChildObjects = МассивУзлыChildObjects[0];
	
	Раздел = ПолучитьРазделМетаданныхПоИмени(СтрокаОбъектКонфигурации.Тип);
	
	ВыгрузитьДочернийУзел(ДокументDOM, УзелChildObjects, Раздел.ВнутреннееИмя, СтрокаОбъектКонфигурации.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСвойстваОбъектаКонфигурации(СтрокаОбъектКонфигурации)
	ИмяФайла = ПолучитьПутьКФайлуОбъекта(СтрокаОбъектКонфигурации.Тип, СтрокаОбъектКонфигурации.Имя);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	УзелОбъект = УзелMetaDataObject.ПервыйДочерний;
	
	УзелProperties = УзелОбъект.ПолучитьЭлементыПоИмени("Properties")[0];
	
	НаборСвойств = СтрокаОбъектКонфигурации.Данные.НаборСвойств;
	Для Каждого КлючЗначение Из НаборСвойств Цикл
		МассивУзлов = УзелProperties.ПолучитьЭлементыПоИмени(КлючЗначение.Ключ);
		Если МассивУзлов.Количество() = 0 Тогда
			ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, КлючЗначение.Ключ, КлючЗначение.Значение);
			Продолжить;
		КонецЕсли;
		
		УзелСвойство = МассивУзлов[0];
		УзелСвойство.ТекстовоеСодержимое = КлючЗначение.Значение;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеквизитыОбъектаКонфигурации(СтрокаОбъектКонфигурации, СтрокиРеквизиты)
	ИмяФайла = ПолучитьПутьКФайлуОбъекта(СтрокаОбъектКонфигурации.Тип, СтрокаОбъектКонфигурации.Имя);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	УзелОбъект = УзелMetaDataObject.ПервыйДочерний;
	
	МассивУзлыChildObjects = УзелОбъект.ПолучитьЭлементыПоИмени("ChildObjects");
	УзелChildObjects = МассивУзлыChildObjects[0];
	
	Для Каждого СтрокаДеревоРеквизиты Из СтрокиРеквизиты Цикл
		Если ЭтоРеквизитТабличнаяЧасть(СтрокаДеревоРеквизиты.Тип) Тогда
			ВыгрузитьТабличнуюЧастьОбъекта(ДокументDOM, УзелChildObjects, СтрокаДеревоРеквизиты);
			Продолжить;
		КонецЕсли;
		
		ВыгрузитьРеквизитОбъекта(ДокументDOM, УзелChildObjects, СтрокаДеревоРеквизиты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеквизитОбъекта(ДокументDOM, УзелРодитель, СтрокаДеревоРеквизиты)
	Если НЕ СтрокаДеревоРеквизиты.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	УзелЭлемента = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "Attribute");
	УзелЭлемента.УстановитьАтрибут("uuid", XMLСтрока(СтрокаДеревоРеквизиты.Данные.УИД));
	
	УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелЭлемента, "Properties");
	
	УзелName = ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name");
	УзелName.ТекстовоеСодержимое = СтрокаДеревоРеквизиты.Имя;
	
	ВыгрузитьОписаниеТипов(ДокументDOM, УзелProperties, СтрокаДеревоРеквизиты.Данные.ОписаниеТипов);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТабличнуюЧастьОбъекта(ДокументDOM, УзелРодитель, СтрокаТабличнаяЧасть)
	Если СтрокаТабличнаяЧасть.ЭтоНовый Тогда
		УзелTabularSection = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "TabularSection");
		УзелTabularSection.УстановитьАтрибут("uuid", XMLСтрока(СтрокаТабличнаяЧасть.Данные.УИД));
		
		ВыгрузитьУзелInternalInfoВФайлОбъекта(мКэшПространствИмен, ДокументDOM, УзелTabularSection, СтрокаТабличнаяЧасть.Имя);
		
		УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелTabularSection, "Properties");
		
		УзелName = ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name");
		УзелName.ТекстовоеСодержимое = СтрокаТабличнаяЧасть.Имя;
		
		УзелChildObjects = ВыгрузитьДочернийУзел(ДокументDOM, УзелTabularSection, "ChildObjects");
	Иначе
		УзелChildObjects = ПолучитьУзелTabularSectionChildObjects(ДокументDOM, СтрокаТабличнаяЧасть.Имя);
	КонецЕсли;
	
	Подчинененные = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
	Для Каждого Подчиненный Из Подчинененные Цикл
		ВыгрузитьРеквизитОбъекта(ДокументDOM, УзелChildObjects, Подчиненный);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУзелTabularSectionChildObjects(ДокументDOM, ИмяТабличнойЧасти)
	ШаблонЗапроса =
		"//*[local-name()='TabularSection'][*[local-name()='Properties']/
		|*[local-name()='Name' and .='%1']]/
		|*[local-name()='ChildObjects']";
	ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ИмяТабличнойЧасти);
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	Выражение = ДокументDOM.СоздатьВыражениеXPath(ТекстЗапроса, Разыменователь);
	Результат = Выражение.Вычислить(ДокументDOM, ТипРезультатаDOMXPath.ЛюбойНеупорядоченныйУзел);
	
	Возврат Результат.ОдиночныйУзелЗначение;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьУзелКартинка(ДокументDOM, УзелPicture, Картинка)
	//УзелPicture = ДобавитьДочернийУзел(ДокументDOM, УзелСвойств, "Picture");
	ВыгрузитьДочернийУзел(ДокументDOM, УзелPicture, "xr:Ref", Картинка);
	ВыгрузитьДочернийУзел(ДокументDOM, УзелPicture, "xr:LoadTransparent", "true");
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОписаниеТипов(ДокументDOM, УзелРодитель, ОписаниеТипов)
	Если ОписаниеТипов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелType = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "Type");
	
	Для Каждого ТекТип Из ОписаниеТипов.Типы Цикл
		ВыгрузитьДочернийУзел(ДокументDOM, УзелType, "v8:Type", ПолучитьПредставлениеТипа(ТекТип));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеТипа(Знач ТекТип)
	Если СтрНачинаетсяС(ТекТип, "Справочник.") Тогда
		Возврат СтрЗаменить(ТекТип, "Справочник.", "cfg:CatalogRef.");
	КонецЕсли;              

	Если СтрНачинаетсяС(ТекТип, "Документ.") Тогда
		Возврат СтрЗаменить(ТекТип, "Документ.", "cfg:DocumentRef.");
	КонецЕсли;

	Если СтрНачинаетсяС(ТекТип, "ДокументОбъект.") Тогда
		Возврат СтрЗаменить(ТекТип, "ДокументОбъект.", "cfg:DocumentObject.");
	КонецЕсли;
	
	Если СтрНачинаетсяС(ТекТип, "СправочникОбъект.") Тогда
		Возврат СтрЗаменить(ТекТип, "СправочникОбъект.", "cfg:CatalogObject.");
	КонецЕсли;
	
	Если СтрНачинаетсяС(ТекТип, "Перечисление.") Тогда
		Возврат СтрЗаменить(ТекТип, "Перечисление.", "cfg:EnumRef.");
	КонецЕсли;
	
	СтрТипы = Новый Структура;
	СтрТипы.Вставить("Строка", "xs:string");
	СтрТипы.Вставить("Булево", "xs:boolean");
	СтрТипы.Вставить("Число", "xs:decimal");
	СтрТипы.Вставить("Дата", "xs:dateTime");
	СтрТипы.Вставить("ТаблицаЗначений", "v8:ValueTable");
	СтрТипы.Вставить("ДеревоЗначений", "v8:ValueTree");
	
	Если СтрТипы.Свойство(ТекТип) Тогда
		Возврат СтрТипы[ТекТип];
	КонецЕсли;
	
	Возврат ТекТип;
КонецФункции

#КонецОбласти

#Область ВыгрузкаФормы

&НаКлиенте
Функция ПолучитьВнутреннийНаборСвойств(ЭлементДерева)
	ТипЭлемента = ЭлементДерева.Данные.ТипЭлемента;
	ВидЭлемента = ЭлементДерева.Данные.ВидЭлемента;
	НаборСвойств = ЭлементДерева.Данные.НаборСвойств;
	
	Результат = Новый Структура;  
	
	Для Каждого КлючЗначение Из НаборСвойств Цикл
		Имя = КлючЗначение.Ключ;
		ИмяВнутреннее = ПолучитьВнутреннееИмяСвойства(ТипЭлемента, ВидЭлемента, Имя);
		Если ИмяВнутреннее = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Для свойства ""%1"" типа ""%2"" в макете ""Свойства"" не указано внутреннее название.'"),
				Имя,
				ТипЭлемента + " - " + ВидЭлемента);
		КонецЕсли;
			
		ЗначениеВнутреннее = ПолучитьВнутреннееЗначениеСвойства(ТипЭлемента, ВидЭлемента, Имя, КлючЗначение.Значение);			
		
		Результат.Вставить(ИмяВнутреннее, ЗначениеВнутреннее);
	КонецЦикла;  
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееЗначениеСвойства(ТипЭлемента, ВидЭлемента, ИмяСвойства, ЗначениеСвойства)
	Значение = ЗначениеСвойства.Значение;
	ТипСвойства = ЗначениеСвойства.Тип;
	Если ТипСвойства = ТипыЗначенийСвойств().WebЦвета Тогда
		Возврат "web:" + УправлениеСвойствами().ПолучитьВнутреннееИмяЦвета(ЗначениеСвойства.Значение);	
	КонецЕсли;
	
	Если ТипСвойства = ТипыЗначенийСвойств().СистемноеПеречисление Тогда
		Результат = ПолучитьВнутреннееЗначениеСистемногоПеречисления(ТипЭлемента, ВидЭлемента, ИмяСвойства, Значение);
		Если Результат = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Для значения ""%1"" свойства ""%2"" тип ""%3"" в макете ""Свойства"" не указано внутреннее название.'"),
				Значение,
				ИмяСвойства,
				ТипЭлемента + " - " + ВидЭлемента);
		КонецЕсли;	
		Возврат Результат;
	КонецЕсли;     
	
	Если ТипЭлемента = "КнопкаФормы" И ИмяСвойства = "ИмяКоманды" Тогда
		Возврат "Form.Command." + Значение;
	КонецЕсли;	
	
	Если ТипСвойства = ТипыЗначенийСвойств().БиблиотекаКартинок Тогда   
		Возврат ПолучитьВнутреннееЗначениеКартнинки(Значение);
	КонецЕсли;
	
	Возврат XMLСтрока(Значение);
КонецФункции   

&НаКлиенте
Функция ПолучитьВнутреннееЗначениеКартнинки(Значение)
	СтандартныеКартинки = УправлениеСвойствами().ПолучитьСтандартныеКартинки();
	Если СтандартныеКартинки.Свойство(Значение) Тогда
		Возврат СтрШаблон("StdPicture.%1", СтандартныеКартинки[Значение]);
	КонецЕсли;
	
	Возврат СтрШаблон("CommonPicture.%1", Значение);
КонецФункции

&НаКлиенте
Функция ТипыФормВнутренний()
	Результат = Новый Структура;
	Результат.Вставить("ОсновнаяФормаГруппы", "DefaultFolderForm");
	Результат.Вставить("ОсновнаяФормаДляВыбора", "DefaultChoiceForm");
	Результат.Вставить("ОсновнаяФормаДляВыбораГруппы", "DefaultFolderChoiceForm");
	Результат.Вставить("ОсновнаяФормаОбъекта", "DefaultObjectForm");
	Результат.Вставить("ОсновнаяФормаСписка", "DefaultListForm");
	Результат.Вставить("ДополнительнаяФормаГруппы", "AuxiliaryFolderForm");
	Результат.Вставить("ДополнительнаяФормаДляВыбора", "AuxiliaryChoiceForm");
	Результат.Вставить("ДополнительнаяФормаДляВыбораГруппы", "AuxiliaryFolderChoiceForm");
	Результат.Вставить("ДополнительнаяФормаОбъекта", "AuxiliaryObjectForm");
	Результат.Вставить("ДополнительнаяФормаСписка", "AuxiliaryListForm");
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ОбработчикиСобытийФормыВнутренний()
	Результат = Новый Структура;
	Результат.Вставить("ПриСозданииНаСервере", "OnCreateAtServer");
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьФормы(СтрокаОбъекта, СтрокиФормы)
	Для Каждого СтрокаФорма Из СтрокиФормы Цикл
		ВыгрузитьФорму(СтрокаОбъекта, СтрокаФорма);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФорму(СтрокаОбъекта, СтрокаФорма)
	ВыгрузитьФайлМетаданныхФормы(СтрокаОбъекта, СтрокаФорма);
	ВыгрузитьФайлФормы(СтрокаОбъекта, СтрокаФорма);
	ВыгрузитьФормуВФайлОбъекта(СтрокаОбъекта, СтрокаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлМетаданныхФормы(СтрокаОбъекта, СтрокаФорма)
	ИмяФайла = ПолучитьПутьКФайлуМетаданныхФормы(СтрокаОбъекта.Тип, СтрокаОбъекта.Имя, СтрокаФорма.Имя);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	
	УзелMetaDataObject = ВыгрузитьУзелMetaDataObject(ДокументDOM);
	
	УзелForm = ВыгрузитьДочернийУзел(ДокументDOM, УзелMetaDataObject, "Form");
	УзелForm.УстановитьАтрибут("uuid", XMLСтрока(СтрокаФорма.Данные.УИД));
	УзелMetaDataObject.ДобавитьДочерний(УзелForm);
	
	УзелProperties = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "Properties");
	
	ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "FormType", "Managed");
	
	ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Name", СтрокаФорма.Имя);
	
	УзелSynonym = ВыгрузитьДочернийУзел(ДокументDOM, УзелProperties, "Synonym");
	ВыгрузитьУзелСтрока(ДокументDOM, УзелSynonym, "Форма новая");
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлФормы(СтрокаОбъекта, СтрокаФорма)
	ПараметрыВыгрузки = СоздатьПараметрыВыгрузкиФайлаФормы();
	
	ИмяФайла = ПолучитьПутьКФайлуФормы(СтрокаОбъекта.Тип, СтрокаОбъекта.Имя, СтрокаФорма.Имя);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	ПараметрыВыгрузки.ДокументDOM = ДокументDOM;
	ПараметрыВыгрузки.СтрокаОбъекта = СтрокаОбъекта;
	
	УзелForm = ВыгрузитьДочернийУзел(ДокументDOM, ДокументDOM, "Form");
	УзелForm.УстановитьСоответствиеПространстваИмен("", мКэшПространствИмен.АттрибутForm);
	Для Каждого КлючЗначение Из мКэшПространствИмен.АттрибутыОбщие Цикл
		УзелForm.УстановитьСоответствиеПространстваИмен(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	УзелForm.УстановитьАтрибут("version", мКэшПространствИмен.ВерсияXML);
	
	УзелCommands = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "Commands");
	
	УзелAttributes = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "Attributes");
	СтрокиРеквизиты = Новый Массив;
	Если СтрокаФорма.Данные.Реквизиты <> Неопределено Тогда
		СтрокаРеквизиты = ДеревоИзменений.НайтиПоИдентификатору(СтрокаФорма.Данные.Реквизиты);
		СтрокиРеквизиты = СтрокаРеквизиты.ПолучитьЭлементы();
	КонецЕсли;
	ВыгрузитьРеквизитыФормы(ПараметрыВыгрузки, СтрокиРеквизиты, УзелAttributes);
	
	УзелAutoCommandBar = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "AutoCommandBar");
	УзелAutoCommandBar.УстановитьАтрибут("name", "ФормаКоманднаяПанель");
	УзелAutoCommandBar.УстановитьАтрибут("id", "-1");
	
	ВыгрузитьОбработчикиСобытийФормы(ПараметрыВыгрузки, СтрокаФорма, УзелForm);
	
	УзелChildItems = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "ChildItems");
	
	Если СтрокаФорма.Данные.Элементы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаЭлементы = ДеревоИзменений.НайтиПоИдентификатору(СтрокаФорма.Данные.Элементы);
	ВыгрузитьЭлементыФормыИерархически(
		ПараметрыВыгрузки,
		СтрокаЭлементы.ПолучитьЭлементы(),
		УзелChildItems,
		УзелCommands,
		УзелAutoCommandBar);
КонецПроцедуры

&НаКлиенте
Функция СоздатьПараметрыВыгрузкиФайлаФормы()
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", 1);
	Результат.Вставить("ДокументDOM"); 
	Результат.Вставить("СтрокаОбъекта"); 
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьФормуВФайлОбъекта(СтрокаОбъекта, СтрокаФорма)
	ИмяФайла = ПолучитьПутьКФайлуОбъекта(СтрокаОбъекта.Тип, СтрокаОбъекта.Имя);
	ДокументDOM = ОткрытьФайлКонфигурации(ИмяФайла, Истина);
	
	УзелMetaDataObject = ДокументDOM.ПервыйДочерний;
	УзелОбъект = УзелMetaDataObject.ПервыйДочерний;
	
	МассивУзлыChildObjects = УзелОбъект.ПолучитьЭлементыПоИмени("ChildObjects");
	УзелChildObjects = МассивУзлыChildObjects[0];
	
	УзелForm = ВыгрузитьДочернийУзел(ДокументDOM, УзелChildObjects, "Form");
	УзелForm.ТекстовоеСодержимое = СтрокаФорма.Имя;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлементыФормыИерархически(ПараметрыВыгрузки, ЭлементыДерева, УзелXML, УзелCommands, УзелAutoCommandBar)
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ВыгрузитьКоманднуюПанель(ПараметрыВыгрузки, ЭлементДерева, УзелCommands, УзелAutoCommandBar) Тогда
			Продолжить;
		КонецЕсли;
		
		УзелЭлемента = ВыгрузитьДочернийУзел(
				ДокументDOM,
				УзелXML,
				ЭлементДерева.Данные.ТипЭлементаВнутренний);
		
		ВыгрузитьКомандуФормы(ПараметрыВыгрузки, ЭлементДерева, УзелCommands);
		
		УзелЭлемента.УстановитьАтрибут("name", ЭлементДерева.Имя);
		УзелЭлемента.УстановитьАтрибут("id", XMLСтрока(ПараметрыВыгрузки.Идентификатор));
		
		ПараметрыВыгрузки.Идентификатор = ПараметрыВыгрузки.Идентификатор + 1;
		
		ВыгрузитьНаборСвойствЭлементаФормы(ПараметрыВыгрузки, ДокументDOM, УзелЭлемента, ЭлементДерева);
		
		Подчиненные = ЭлементДерева.ПолучитьЭлементы();
		Если Подчиненные.Количество() > 0 Тогда
			УзелChildItems = ВыгрузитьДочернийУзел(ДокументDOM, УзелЭлемента, "ChildItems");
			ВыгрузитьЭлементыФормыИерархически(ПараметрыВыгрузки, Подчиненные, УзелChildItems, УзелCommands, УзелAutoCommandBar);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКомандуФормы(ПараметрыВыгрузки, ЭлементДерева, УзелCommands)
	Если ЭлементДерева.Тип <> "КнопкаФормы" Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	
	УзелCommand = ВыгрузитьДочернийУзел(ДокументDOM, УзелCommands, "Command");
	УзелCommand.УстановитьАтрибут("name", ЭлементДерева.Имя);
	УзелCommand.УстановитьАтрибут("id", XMLСтрока(ПараметрыВыгрузки.Идентификатор));
	ПараметрыВыгрузки.Идентификатор = ПараметрыВыгрузки.Идентификатор + 1;
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьКоманднуюПанель(ПараметрыВыгрузки, ЭлементДерева, УзелCommands, УзелAutoCommandBar)
	Если ЭлементДерева.Тип = "КнопкаФормы" Тогда
		Если ЭлементДерева.Имя = "ЗаписатьИЗакрыть" ИЛИ ЭлементДерева.Имя = "Записать" ИЛИ ЭлементДерева.Имя = "Закрыть" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементДерева.Имя <> "КоманднаяПанель" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	
	Подчиненные = ЭлементДерева.ПолучитьЭлементы();
	Если Подчиненные.Количество() > 0 Тогда
		УзелChildItems = ВыгрузитьДочернийУзел(ДокументDOM, УзелAutoCommandBar, "ChildItems");
		ВыгрузитьЭлементыФормыИерархически(ПараметрыВыгрузки, Подчиненные, УзелChildItems, УзелCommands, УзелAutoCommandBar);
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьНаборСвойствЭлементаФормы(ПараметрыВыгрузки, ДокументDOM, УзелЭлемента, ЭлементДерева)
	НаборСвойств = ПолучитьВнутреннийНаборСвойств(ЭлементДерева);
	Для Каждого КлючЗначение Из НаборСвойств Цикл
		ИмяСвойства = КлючЗначение.Ключ;
		
		УзелСвойств = ВыгрузитьДочернийУзел(ДокументDOM, УзелЭлемента, ИмяСвойства);
		
		Если КлючЗначение.Ключ = "DataPath" Тогда
			ПутьКДанным = КлючЗначение.Значение;
			Если ЭтоСтандартныйРеквизит(ПараметрыВыгрузки.СтрокаОбъекта.Тип, ЭлементДерева.Имя) Тогда
				ПутьКДанным = СтрЗаменить(
					ПутьКДанным,
					ЭлементДерева.Имя, 
					ПолучитьВнутреннееИмяСтандартногоРеквизита(ПараметрыВыгрузки.СтрокаОбъекта.Тип, ЭлементДерева.Имя));
			КонецЕсли;
			УзелСвойств.ТекстовоеСодержимое = ПутьКДанным;
			Продолжить;
		КонецЕсли;
		
		Если КлючЗначение.Ключ = "Title" Тогда
			ВыгрузитьУзелСтрока(ДокументDOM, УзелСвойств, КлючЗначение.Значение);
			Продолжить;
		КонецЕсли;
		
		Если КлючЗначение.Ключ = "Picture" Тогда
			ВыгрузитьУзелКартинка(ДокументDOM, УзелСвойств, КлючЗначение.Значение);
			Продолжить;
		КонецЕсли;
		
		ЗначениеСвойства = КлючЗначение.Значение;
		УзелСвойств.ТекстовоеСодержимое = ЗначениеСвойства;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеквизитыФормы(ПараметрыВыгрузки, СтрокиРеквизиты, УзелAttributes)
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	Для Каждого СтрокаДеревоРеквизиты Из СтрокиРеквизиты Цикл
		
		УзелAttribute = ВыгрузитьДочернийУзел(ДокументDOM, УзелAttributes, "Attribute");
		УзелAttribute.УстановитьАтрибут("id", XMLСтрока(ПараметрыВыгрузки.Идентификатор));
		УзелAttribute.УстановитьАтрибут("name", СтрокаДеревоРеквизиты.Имя);
		
		ВыгрузитьОписаниеТипов(ДокументDOM, УзелAttribute, СтрокаДеревоРеквизиты.Данные.ОписаниеТипов);
		
		ВыгрузитьДочернийУзел(ДокументDOM, УзелAttribute, "MainAttribute", СтрокаДеревоРеквизиты.Данные.ОсновнойРеквизит);
		ВыгрузитьДочернийУзел(ДокументDOM, УзелAttribute, "SavedData", СтрокаДеревоРеквизиты.Данные.СохраняемыеДанные);
		
		УзелColumns = Неопределено;
		Если СтрокаДеревоРеквизиты.Данные.ОсновнойРеквизит Тогда
			УзелColumns = ВыгрузитьДочернийУзел(ДокументDOM, УзелAttribute, "Columns");
		КонецЕсли;
		
		ПараметрыВыгрузки.Идентификатор = ПараметрыВыгрузки.Идентификатор + 1;
		
		Если СтрокаДеревоРеквизиты.Тип = ТипыСтрокДереваИзменений().РеквизитФормыТаблицаЗначений
			ИЛИ СтрокаДеревоРеквизиты.Тип = ТипыСтрокДереваИзменений().РеквизитФормыДеревоЗначений Тогда
			ВыгрузитьРеквизитыФормыКолонки(ПараметрыВыгрузки, СтрокаДеревоРеквизиты, УзелAttribute);
		КонецЕсли;
		
		Если СтрокаДеревоРеквизиты.Данные.ОсновнойРеквизит Тогда
			СтрокиТаблицы = СтрокаДеревоРеквизиты.ПолучитьЭлементы();
			Для Каждого СтрокаОтражениеТаблицы Из СтрокиТаблицы Цикл
				ВыгрузитьРеквизитыФормыДополнительныеКолонки(ПараметрыВыгрузки, СтрокаОтражениеТаблицы, УзелColumns);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеквизитыФормыДополнительныеКолонки(ПараметрыВыгрузки, СтрокаТаблица, УзелColumns)
	СтрокиКолонки = СтрокаТаблица.ПолучитьЭлементы();
	Если СтрокиКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	
	Для Каждого СтрокаКолонка Из СтрокиКолонки Цикл
		УзелAdditionalColumns = ВыгрузитьДочернийУзел(ДокументDOM, УзелColumns, "AdditionalColumns");
		УзелAdditionalColumns.УстановитьАтрибут("table", "Объект." + СтрокаТаблица.Имя);
		
		УзелЭлемента = ВыгрузитьДочернийУзел(ДокументDOM, УзелAdditionalColumns, "Column");
		УзелЭлемента.УстановитьАтрибут("id", XMLСтрока(ПараметрыВыгрузки.Идентификатор));
		УзелЭлемента.УстановитьАтрибут("name", СтрокаКолонка.Имя);
		
		ВыгрузитьОписаниеТипов(ДокументDOM, УзелЭлемента, СтрокаКолонка.Данные.ОписаниеТипов);
		
		ПараметрыВыгрузки.Идентификатор = ПараметрыВыгрузки.Идентификатор + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеквизитыФормыКолонки(ПараметрыВыгрузки, СтрокаДеревоРеквизиты, УзелРодитель)
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	
	СтрокиРеквизиты = СтрокаДеревоРеквизиты.ПолучитьЭлементы();
	Если СтрокиРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УзелColumns = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "Columns");
	
	Для Каждого СтрокаДеревоРеквизиты Из СтрокиРеквизиты Цикл
		УзелЭлемента = ВыгрузитьДочернийУзел(ДокументDOM, УзелColumns, "Column");
		УзелЭлемента.УстановитьАтрибут("id", XMLСтрока(ПараметрыВыгрузки.Идентификатор));
		УзелЭлемента.УстановитьАтрибут("name", СтрокаДеревоРеквизиты.Имя);
		
		ВыгрузитьОписаниеТипов(ДокументDOM, УзелЭлемента, СтрокаДеревоРеквизиты.Данные.ОписаниеТипов);
		
		ПараметрыВыгрузки.Идентификатор = ПараметрыВыгрузки.Идентификатор + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработчикиСобытийФормы(ПараметрыВыгрузки, СтрокаФорма, УзелForm)
	Если СтрокаФорма.Данные.ОбработчикиСобытий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOM = ПараметрыВыгрузки.ДокументDOM;
	УзелEvents = ВыгрузитьДочернийУзел(ДокументDOM, УзелForm, "Events");
	
	Для Каждого КлючЗначений Из СтрокаФорма.Данные.ОбработчикиСобытий Цикл
		ВнутреннееИмяСобытия = ОбработчикиСобытийФормыВнутренний()[КлючЗначений.Ключ];
		УзелEvent = ВыгрузитьДочернийУзел(ДокументDOM, УзелEvents, "Event", КлючЗначений.Значение);
		УзелEvent.УстановитьАтрибут("name", ВнутреннееИмяСобытия);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Узлы

&НаКлиенте
Функция ВыгрузитьДочернийУзел(ДокументDOM, Родитель, ИмяЭлемента, ТекстовоеСодержимое = Неопределено)
	Узел = ДокументDOM.СоздатьЭлемент(ИмяЭлемента);
	
	Если ТекстовоеСодержимое <> Неопределено Тогда
		Узел.ТекстовоеСодержимое = XMLСтрока(ТекстовоеСодержимое);
	КонецЕсли;
	
	Родитель.ДобавитьДочерний(Узел);
	
	Возврат Узел;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьУзелСтрока(ДокументDOM, Родитель, Текст)
	Узел = ВыгрузитьДочернийУзел(ДокументDOM, Родитель, "v8:item");
	
	УзелLang = ВыгрузитьДочернийУзел(ДокументDOM, Узел, "v8:lang");
	УзелLang.ТекстовоеСодержимое = "ru";
	
	УзелContent = ВыгрузитьДочернийУзел(ДокументDOM, Узел, "v8:content");
	УзелContent.ТекстовоеСодержимое = XMLСтрока(Текст);
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьУзелMetaDataObject(ДокументDOM)
	УзелMetaDataObject = ВыгрузитьДочернийУзел(ДокументDOM, ДокументDOM, "MetaDataObject");
	УзелMetaDataObject.УстановитьСоответствиеПространстваИмен("", мКэшПространствИмен.АттрибутMDClasses);
	Для Каждого КлючЗначение Из мКэшПространствИмен.АттрибутыОбщие Цикл
		УзелMetaDataObject.УстановитьСоответствиеПространстваИмен(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	УзелMetaDataObject.УстановитьАтрибут("version", мКэшПространствИмен.ВерсияXML);
	
	Возврат УзелMetaDataObject;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьУзелInternalInfoВФайлОбъекта(ПараметрыВыполнения, ДокументDOM, УзелРодитель, ИмяТабличнойЧасти)
	ТипОбъектаАнгл = ПолучитьВнутреннееИмяОбъектаМетаданных(ТипОсновногоОбъекта);
	ИмяTabularSection = СтрШаблон(
			"%1TabularSection.%2.%3",
			ТипОбъектаАнгл,
			ИмяОсновногоОбъекта,
			ИмяТабличнойЧасти);
	
	TabularSectionRow = СтрШаблон(
			"%1TabularSectionRow.%2.%3",
			ТипОбъектаАнгл,
			ИмяОсновногоОбъекта,
			ИмяТабличнойЧасти);
	
	УзелInternalInfo = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "InternalInfo");
	
	УзелGeneratedType = ВыгрузитьДочернийУзел(ДокументDOM, УзелInternalInfo, "xr:GeneratedType");
	УзелGeneratedType.УстановитьАтрибут("name", ИмяTabularSection);
	УзелGeneratedType.УстановитьАтрибут("category", "TabularSection");
	ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:TypeId", XMLСтрока(Новый УникальныйИдентификатор));
	ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:ValueId", XMLСтрока(Новый УникальныйИдентификатор));
	
	УзелGeneratedType = ВыгрузитьДочернийУзел(ДокументDOM, УзелInternalInfo, "xr:GeneratedType");
	УзелGeneratedType.УстановитьАтрибут("name", TabularSectionRow);
	УзелGeneratedType.УстановитьАтрибут("category", "TabularSectionRow");
	ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:TypeId", XMLСтрока(Новый УникальныйИдентификатор));
	ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:ValueId", XMLСтрока(Новый УникальныйИдентификатор));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУзелыInternalInfo(ДокументDOM, УзелРодитель, МассивДобавляемыхУзлов)
	УзелInternalInfo = ВыгрузитьДочернийУзел(ДокументDOM, УзелРодитель, "InternalInfo");
	
	Для Каждого ОписаниеУзла Из МассивДобавляемыхУзлов Цикл
		УзелGeneratedType = ВыгрузитьДочернийУзел(ДокументDOM, УзелInternalInfo, "xr:GeneratedType");
		УзелGeneratedType.УстановитьАтрибут("name", ОписаниеУзла.name);
		УзелGeneratedType.УстановитьАтрибут("category", ОписаниеУзла.category);
		ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:TypeId", XMLСтрока(Новый УникальныйИдентификатор));
		ВыгрузитьДочернийУзел(ДокументDOM, УзелGeneratedType, "xr:ValueId", XMLСтрока(Новый УникальныйИдентификатор));
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаМодуля

&НаКлиенте
Функция ПолучитьТекстМодуля(Путь)
	Если НЕ СлужебныеФункции().ФайлСуществует(Путь) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(Путь);
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыМодуля(СемантическоеДерево, Текст)
	Результат = Новый Структура;
	Результат.Вставить("НачальнаяПозиция", 0);
	Результат.Вставить("КонечнаяПозиция", 0);
	Результат.Вставить("Текст", Текст);
	Результат.Вставить("СемантическоеДерево", СемантическоеДерево);
	Результат.Вставить("СтруктураОбластей", ПолучитьСтруктуруОбластей(СемантическоеДерево));
	Результат.Вставить("ИзмененныеМетоды", Новый Массив);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СформироватьТекстМодуля(СтрокаМодуль)
	МассивЗамен = Новый Массив;
	ЗаполнитьЗаменыМодуля(СтрокаМодуль, МассивЗамен);
	СтрокаМодуль.Данные.Текст = ВыполнитьЗамены(МассивЗамен, СтрокаМодуль.Данные.Текст);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаменыМодуля(СтрокаМодуль, МассивЗамен)
	СтруктураМодуля = СтрокаМодуль.Данные;
	
	МассивТекстовЗамены = Новый Массив;
	ПозицияЗамены = СтруктураМодуля.НачальнаяПозиция;
	
	Для Каждого ОписаниеОбласти Из СтруктураМодуля.СтруктураОбластей Цикл
		Если ОписаниеОбласти.ЕстьОбласть Тогда
			ЗаполнитьЗаменыМодуляДобавитьВТаблицуЗамен(МассивЗамен, МассивТекстовЗамены, ПозицияЗамены);
			
			ЗаполнитьЗаменыПоСуществующейОбласти(МассивЗамен, ОписаниеОбласти);
			
			МассивТекстовЗамены = Новый Массив;
			ПозицияЗамены = ОписаниеОбласти.Позиция.Конец;
			Продолжить;
		КонецЕсли;
		
		МассивТекстовЗамены.Добавить(СформироватьТекстОбласти(ОписаниеОбласти));
	КонецЦикла;
	
	ЗаполнитьЗаменыМодуляДобавитьВТаблицуЗамен(МассивЗамен, МассивТекстовЗамены, ПозицияЗамены);
	
	ЗаполнитьЗаментыМодуляИзмененныеМетоды(МассивЗамен, СтруктураМодуля);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаментыМодуляИзмененныеМетоды(МассивЗамен, ПараметрыМодуля)
	Для Каждого ИзмененныеМетод Из ПараметрыМодуля.ИзмененныеМетоды Цикл
		ДобавитьЗамену(
			МассивЗамен,
			ИзмененныеМетод.Содержимое.Тело + Символы.ПС,
			ИзмененныеМетод.Позиция.Начало,
			ИзмененныеМетод.Позиция.Конец - ИзмененныеМетод.Позиция.Начало);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаменыМодуляДобавитьВТаблицуЗамен(МассивЗамен, МассивТекстовЗамены, ПозицияЗамены)
	Если МассивТекстовЗамены.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДобавитьЗамену(МассивЗамен, Символы.ПС + Символы.ПС + СтрСоединить(МассивТекстовЗамены, Символы.ПС), ПозицияЗамены);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаменыПоСуществующейОбласти(МассивЗамен, ОписаниеОбласти)
	Если ОписаниеОбласти.НовыеМетоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстМетодов = СформироватьТекстМетодов(ОписаниеОбласти.НовыеМетоды) + Символы.ПС;
	
	ДобавитьЗамену(МассивЗамен, ТекстМетодов, ОписаниеОбласти.Позиция.Начало);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗамену(МассивЗамен, Текст, Позиция, Длина = 0)
	Результат = Новый Структура;
	Результат.Вставить("Текст", Текст);
	Результат.Вставить("Позиция", Позиция);
	Результат.Вставить("Длина", Длина);
	
	МассивЗамен.Добавить(Результат);
КонецПроцедуры

&НаКлиенте
Функция СформироватьТекстОбласти(ОписаниеОбласти)
	МассивОбласть = Новый Массив;
	
	МассивОбласть.Добавить(ПостроительТекстаМодуля().ТекстОбластьНачало() + " " + ОписаниеОбласти.Имя + Символы.ПС);
	
	МассивОбласть.Добавить(СформироватьТекстМетодов(ОписаниеОбласти.НовыеМетоды));
	
	МассивОбласть.Добавить(ПостроительТекстаМодуля().ТекстОбластьКонец());
	
	Возврат СтрСоединить(МассивОбласть, Символы.ПС);
КонецФункции

&НаКлиенте
Функция СформироватьТекстМетодов(МассивОписанийМетодов)
	МассивТекстовМетодов = Новый Массив;
	
	Для Каждого ПараметрыМетода Из МассивОписанийМетодов Цикл
		МассивТекстовМетодов.Добавить(СформироватьТекстМетода(ПараметрыМетода));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивТекстовМетодов, Символы.ПС);
КонецФункции

&НаКлиенте
Функция СформироватьТекстМетода(ПараметрыМетода)
	СтрЭлемент = Новый Структура("Содержимое, ТипЭлемента");
	СтрЭлемент.Содержимое = ПараметрыМетода.Содержимое;
	СтрЭлемент.ТипЭлемента = ?(ПараметрыМетода.Содержимое.ЭтоФункция, "Функция", "Процедура");
	Возврат ПостроительТекстаМодуля().МетодТекст(СтрЭлемент);
КонецФункции

&НаКлиенте
Функция СортироватьМассивЗамен(МассивЗамен)
	СписокЗначений = Новый СписокЗначений;
	Индекс = 1;
	Для Каждого Элемент Из МассивЗамен Цикл
		СписокЗначений.Добавить(Элемент.Позиция, Индекс);
		Индекс = Индекс + 1;
	КонецЦикла;
	СписокЗначений.СортироватьПоЗначению();
	
	Результат = Новый Массив;
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		ЭлементМассива = МассивЗамен[Число(ЭлементСписка.Представление) - 1];
		Результат.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВыполнитьЗамены(МассивЗамен, Текст)
	Если МассивЗамен.Количество() = 0 Тогда
		Возврат Текст;
	КонецЕсли;
	
	Результат = Новый Массив;
	
	УпорядоченныйМассивЗамен = СортироватьМассивЗамен(МассивЗамен);
	
	ПозицияНачала = 1;
	
	Для Индекс = 0 По УпорядоченныйМассивЗамен.Количество() - 1 Цикл
		
		Замена = УпорядоченныйМассивЗамен[Индекс];
		
		Результат.Добавить(Сред(Текст, ПозицияНачала, Замена.Позиция - ПозицияНачала));
		Результат.Добавить(Замена.Текст);
		
		ПозицияНачала = Замена.Позиция + Замена.Длина;
		
	КонецЦикла;
	
	Результат.Добавить(Сред(Текст, ПозицияНачала));
	
	Возврат СтрСоединить(Результат);
	
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеНовойОбласти(Имя)
	Возврат Новый Структура("Имя, ЕстьОбласть, НовыеМетоды, Позиция", Имя, Ложь, Новый Массив);
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыМетода()
	Результат = Новый Структура;
	Результат.Вставить("Содержимое", МетодСтруктураОписания());
	Результат.Вставить("Область");
	Результат.Вставить("Существует", Ложь);
	Результат.Вставить("Позиция", Неопределено);
	
	Результат.Содержимое.ЭтоФункция = Истина;
	Результат.Содержимое.Экспортная = Ложь;
	Результат.Содержимое.Асинх = Ложь;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьМетод(ДеревоМодуля, Знач Имя)
	Имя = НРег(Имя);
	
	Стек = Новый Массив;
	Для Каждого Строка Из ДеревоМодуля.Строки Цикл
		Стек.Добавить(Строка);
	КонецЦикла;
	
	Пока Стек.Количество() > 0 Цикл
		ЭлементМодуля = Стек[0];
		
		Если (ЭлементМодуля.ТипЭлемента = "Процедура"
				ИЛИ ЭлементМодуля.ТипЭлемента = "Функция")
			И НРег(ЭлементМодуля.Описание) = Имя Тогда
			Возврат ЭлементМодуля;
			
		КонецЕсли;
		
		Для Каждого Строка Из ЭлементМодуля.Строки Цикл
			Стек.Добавить(Строка);
		КонецЦикла;
		
		Стек.Удалить(0);
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ДобавитьМетодВОбласть(СтруктураОбластей, ПараметрыМетода)
	ОписаниеОбласти = ПолучитьОбластьПоИмени(СтруктураОбластей, ПараметрыМетода.Область);
	
	Если ОписаниеОбласти = Неопределено Тогда
		ОписаниеОбласти = ПолучитьОписаниеНовойОбласти(ПараметрыМетода.Область);
		
		ИндексОбласти = ПолучитьИндексВышестоящейОбласти(СтруктураОбластей, ПараметрыМетода.Область);
		СтруктураОбластей.Вставить(ИндексОбласти, ОписаниеОбласти);
	КонецЕсли;
	
	ОписаниеОбласти.НовыеМетоды.Добавить(ПараметрыМетода);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбластьПоИмени(СтруктураОбластей, ИмяОбласти)
	Для Каждого ОписаниеОбласти Из СтруктураОбластей Цикл
		Если НРег(ОписаниеОбласти.Имя) = НРег(ИмяОбласти) Тогда
			Возврат ОписаниеОбласти;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПолучитьИндексВышестоящейОбласти(СтруктураОбластей, ИмяОбласти)
	Результат = 0;
	МассивНижестоящихСтандартныхОбластей = ПолучитьМассивНижестоящихСтандартныхОбластей(ИмяОбласти);
	
	Для Каждого ОписаниеОбласти Из СтруктураОбластей Цикл
		Если МассивНижестоящихСтандартныхОбластей.Найти(НРег(ОписаниеОбласти.Имя)) <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		Результат = Результат + 1;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруОбластей(ДеревоМодуля)
	
	Результат = Новый Массив;
	
	Для Каждого ТекЭлемент Из ДеревоМодуля.Строки Цикл
		Если НЕ ТекЭлемент.ТипЭлемента = "Область" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбласти = ТекЭлемент.Содержимое.Имя;
		
		ОписаниеОбласти = ПолучитьОписаниеНовойОбласти(ИмяОбласти);
		ОписаниеОбласти.ЕстьОбласть = Истина;
		ОписаниеОбласти.Позиция = ТекЭлемент.Позиция;
		
		Результат.Добавить(ОписаниеОбласти);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПозицию(Начало, Конец)
	Возврат Новый Структура("Начало,Конец", Начало, Конец);
КонецФункции

&НаКлиенте
Функция ПолучитьМассивНижестоящихСтандартныхОбластей(ИмяОбласти)
	МассивНижестоящихОбластей = ПолучитьМассивОбластей();
	
	Индекс = МассивНижестоящихОбластей.Найти(НРег(ИмяОбласти));
	
	Если Индекс = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Сч = Индекс + 1 По МассивНижестоящихОбластей.ВГраница() Цикл
		Результат.Добавить(МассивНижестоящихОбластей[Сч]);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьМассивОбластей()
	Результат = Новый Массив;
	Результат.Добавить(НРег("ОписаниеПеременных"));
	Результат.Добавить(НРег("ПрограммныйИнтерфейс"));
	Результат.Добавить(НРег("СлужебныйПрограммныйИнтерфейс"));
	Результат.Добавить(НРег("ОбработчикиСобытийФормы"));
	Результат.Добавить(НРег("ОбработчикиСобытий"));
	Результат.Добавить(НРег("ОбработчикиКомандФормы"));
	Результат.Добавить(НРег("ОбработчикиСобытийЭлементовШапкиФормы"));
	Результат.Добавить(НРег("ОбработчикиСобытийЭлементовТаблицыФормы"));
	Результат.Добавить(НРег("ОбновлениеИнформационнойБазы"));
	Результат.Добавить(НРег("СлужебныеПроцедурыИФункции"));
	Результат.Добавить(НРег("Инициализация"));
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

&НаКлиенте
Функция ПолучитьЗначение(СтрЗначение)
	Если СтрЗначение.ЭтоСистемноеПеречисление Тогда
		Возврат СтрЗначение.Значение;
	КонецЕсли;
	
	Возврат XMLСтрока(СтрЗначение.Значение);
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееИмяОбъектаМетаданных(ИмяОбъекта)
	Соответствие = Новый Структура;
	Соответствие.Вставить("Справочник", "Catalog");
	Соответствие.Вставить("Документ", "Document");
	
	Возврат Соответствие[ИмяОбъекта];
КонецФункции

&НаКлиенте
Функция ПолучитьВнутреннееИмяСтандартногоРеквизита(ТипОбъекта, ИмяРеквизита)
	ОписаниеРаздела = УправлениеСвойствами().ПолучитьРазделМетаданныхПоИмени(ТипОбъекта);
	Возврат ОписаниеРаздела.СтандартныеРеквизиты[ИмяРеквизита];
КонецФункции

#Область Пути

&НаКлиенте
Функция ПолучитьПутьКФайлуКонфигурации()
	Возврат СлужебныеФункции().ОбъединитьПути(КаталогXML, "Configuration.xml");
КонецФункции

&НаКлиенте
Функция ПутьККаталогуТипаОбъекта(ТипОбъекта)
	ОписаниеРаздела = ПолучитьРазделМетаданныхПоИмени(ТипОбъекта);
	Возврат СлужебныеФункции().ОбъединитьПути(КаталогXML, ОписаниеРаздела.ВнутреннееИмяМнож);
КонецФункции

&НаКлиенте
Функция ПутьККаталогуОбъекта(ТипОбъекта, ИмяОбъекта)
	Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуТипаОбъекта(ТипОбъекта), ИмяОбъекта);
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуОбъекта(ТипОбъекта, ИмяОбъекта)
	Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуТипаОбъекта(ТипОбъекта), ИмяОбъекта + ".xml");
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуМетаданныхФормы(ТипОбъекта, ИмяОбъекта, ИмяФормы)
	Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуОбъекта(ТипОбъекта, ИмяОбъекта), "Forms", ИмяФормы + ".xml");
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуФормы(ТипОбъекта, ИмяОбъекта, ИмяФормы)
	Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуОбъекта(ТипОбъекта, ИмяОбъекта), "Forms", ИмяФормы, "Ext", "Form.xml");
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКФайлуМодуля(СтрокаИсточник, ТипМодуля)
	Если СтрокаИсточник.Тип = ТипыСтрокДереваИзменений().Форма Тогда
		СтрокаОбъект = ПолучитьОбъектПоСтрокеФормы(СтрокаИсточник);
		Возврат СлужебныеФункции().ОбъединитьПути(ПутьККаталогуОбъекта(СтрокаОбъект.Тип, СтрокаОбъект.Имя), "Forms", СтрокаИсточник.Имя, "Ext", "Form", "Module.bsl");
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти