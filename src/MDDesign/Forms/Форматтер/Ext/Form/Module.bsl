#Область ОбработчикиСобытийФормы

&НаКлиенте
Функция Форматировать(ФормаГруппы) Экспорт
	ПараметрыВыполнения = НовыеПараметрыФорматирования(Истина, 0);
	ВыполнитьФорматирование(ПараметрыВыполнения, ФормаГруппы);
	
	ФормаГруппы.Формат.Результат.Очистить();
	
	ПараметрыВыполнения = НовыеПараметрыФорматирования(Ложь, 0);
	ВыполнитьФорматирование(ПараметрыВыполнения, ФормаГруппы);
	
	Результат = Новый Массив;
	Для Каждого Строка Из ФормаГруппы.Формат.Результат Цикл
		Результат.Добавить(СокрП(Строка)); 	
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, Символы.ПС);
КонецФункции

#КонецОбласти    

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция Лексема(ИмяПараметра)
	Возврат ВладелецФормы.Лексема(ИмяПараметра);
КонецФункции

&НаКлиенте
Функция НовыеПараметрыФорматирования(РасчетДлины, Длина)
	Результат = Новый Структура();
	Результат.Вставить("РасчетДлины", РасчетДлины);
	Результат.Вставить("Длина", ?(РасчетДлины, 0, Длина));
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыполнитьФорматирование(ПараметрыВыполнения, ЭлементРодитель)    
	
	Подчиненные = ЭлементРодитель.Элементы;
	
	Для Каждого ЭлементДанных Из Подчиненные Цикл 
		
		Выполнена = Ложь;
		ФорматироватьВертикальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;
		
		ФорматироватьСтрочныйЭлемент(ПараметрыВыполнения, ЭлементРодитель, ЭлементДанных);
		ФорматированиеДобавитьРезультат(ЭлементРодитель, ЭлементДанных.Формат.Результат);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьСтрочныйЭлемент(ПараметрыВыполнения, ЭлементРодитель, ЭлементДанных)
	ЭлементДанных.Формат.Результат.Очистить();
	Выполнена = Ложь;
	
	ФорматироватьГоризонтальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ФорматироватьОднострочнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
	
	ФорматироватьТаблицу(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ФорматироватьПолеВвода(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ФорматироватьФлажок(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ФорматироватьНадпись(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
	
	ФорматироватьСтраницы(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ФорматироватьКоманднуюПанель(ПараметрыВыполнения, ЭлементДанных, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#Область ФорматироватьГруппу

&НаКлиенте
Процедура ФорматироватьВертикальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "ВертикальнаяГруппа" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ВыполнитьФорматирование(ПараметрыВыполнения, ЭлементДанных);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьГоризонтальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "ГоризонтальнаяГруппа" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;

	НаборСтрок = Новый Массив;
	Для Каждого ВертикальнаяГруппа Из ЭлементДанных.Элементы Цикл
		ВертикальнаяГруппа.Формат.Результат.Очистить();
		
		СтрокаЗаголовок = Лексема("РазделительГруппаДобавить");
		Если ВертикальнаяГруппа.НаборСвойств.ОтображатьЗаголовок Тогда
			СтрокаЗаголовок = СтрокаЗаголовок + СокрЛП(ВертикальнаяГруппа.НаборСвойств.Заголовок);			
		КонецЕсли; 
		СтрокаЗаголовок = ВыровнитьСтроку(СтрокаЗаголовок, "Лево", ВертикальнаяГруппа.Формат.Длина);
		ВертикальнаяГруппа.Формат.Результат.Добавить(СтрокаЗаголовок);
		
		ПараметрыВыполненияРасчет = НовыеПараметрыФорматирования(ПараметрыВыполнения.РасчетДлины, ВертикальнаяГруппа.Формат.Длина);
		ВыполнитьФорматирование(ПараметрыВыполненияРасчет, ВертикальнаяГруппа);
		
		НаборСтрок.Добавить(ВертикальнаяГруппа.Формат.Результат);
	КонецЦикла;
	
	РазделительПробел = "   ";
	
	Результат = СоединитьСтрокиГоризонтально(
		НаборСтрок, 
		РазделительПробел +  Лексема("РазделительГруппа") + РазделительПробел, 
		РазделительПробел);
	ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьОднострочнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "ОднострочнаяГруппа" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;

	НаборСтрок = Новый Массив;
	Для Каждого ЭлементГруппы Из ЭлементДанных.Элементы Цикл
		ЭлементГруппы.Формат.Результат.Очистить();
		
		ПараметрыВыполненияРасчет = НовыеПараметрыФорматирования(ПараметрыВыполнения.РасчетДлины, ЭлементГруппы.Формат.Длина);
		
		ФорматироватьСтрочныйЭлемент(ПараметрыВыполненияРасчет, ЭлементДанных, ЭлементГруппы);
		
		НаборСтрок.Добавить(ЭлементГруппы.Формат.Результат);
	КонецЦикла;
	
	Результат = СоединитьСтрокиГоризонтально(НаборСтрок, " & ");
	ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьСтраницы(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "Страницы" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ИсключаемыеСвойства = СтрРазделить(
		"Заголовок", Символы.ПС);
	
	Для Каждого Страница Из ЭлементДанных.Элементы Цикл
		Страница.Формат.Результат.Очистить();
		
		ФорматированиеДобавитьРезультат(ЭлементДанных, "");
		Результат = "/" + Страница.НаборСвойств.Заголовок;
		Результат = Результат + ФорматироватьНаборСвойств(Страница.НаборСвойств, ИсключаемыеСвойства);
		ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
		ФорматированиеДобавитьРезультат(ЭлементДанных, "");
		
		ПараметрыВыполненияРасчет = НовыеПараметрыФорматирования(ПараметрыВыполнения.РасчетДлины, Страница.Формат.Длина);
		ВыполнитьФорматирование(ПараметрыВыполненияРасчет, Страница);
		
		Результат = Новый Массив;
		Для Каждого Строка Из Страница.Формат.Результат Цикл
			Результат.Добавить("	" + Строка);
		КонецЦикла;
		
		ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти    

#Область ФорматироватьТаблицу

&НаКлиенте
Процедура ФорматироватьТаблицу(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "Таблица" 
		И НЕ ЭлементДанных.Тип = "Дерево" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ЭлементДанных.Формат.Результат.Очистить();  

	ПустаяСтрока = ФорматироватьГоризонтальноеПоложение(
		"", 
		"Лево", 
		ПараметрыВыполнения.Длина);

	ФорматированиеДобавитьРезультат(ЭлементДанных, ПустаяСтрока);
	
	ИсключаемыеСвойства = Новый Массив;
	Результат = ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
	КонецЕсли;

	ТаблицаЗаголовок = Новый Массив;
	ПараметрыЗаполнения = Новый Структура("ИндексКолонки, ИндексСтроки", 0, 0);
	ЗаполнитьЗаголовокТаблицыПредв(ПараметрыЗаполнения, ТаблицаЗаголовок, ЭлементДанных);
	ТаблицаЗаголовок = ДополнитьМассивНаборовКолонок(ТаблицаЗаголовок);
	
	СвернутаяТаблицаЗаголовок = СвернутьМассивНаборовКолонок(ТаблицаЗаголовок);
	
	ДлиныПоЯчейкам = Новый Соответствие;
	ЗаполнитьДлиныПоКолонкам(ДлиныПоЯчейкам, ЭлементДанных, 0);

	ТаблицаДлин = Новый Соответствие;                  
	ДлинаТаблицы = 0;
	ПолучитьТаблицуДлин(ТаблицаДлин, ДлиныПоЯчейкам, ЭлементДанных, ДлинаТаблицы);

	ЗаполнитьДлинуКолонокТаблицыСверхуВниз(ТаблицаДлин, ЭлементДанных);

	Таблица = СформироватьТаблицу(
		ЭлементДанных, 
		ТаблицаДлин, 
		ТаблицаЗаголовок, 
		СвернутаяТаблицаЗаголовок);
		
	РазделительЯчеек = Лексема("ТаблицаРазделитель");
	Для Каждого Строка Из Таблица Цикл
		Результат = РазделительЯчеек + СтрСоединить(Строка, РазделительЯчеек) + РазделительЯчеек;	
		ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
	КонецЦикла;
КонецПроцедуры   

&НаКлиенте
Функция ДополнитьМассивНаборовКолонок(МассивНаборовКолонок)
	Результат = Новый Массив;
	Если МассивНаборовКолонок.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	КоличествоКолонок = МассивНаборовКолонок[0].Количество();
	
	ТекущийНабор = Новый Массив(КоличествоКолонок);
	
	Для Каждого НаборКолонок Из МассивНаборовКолонок Цикл
		НовыйНабор = Новый Массив;
		
		Для ИндексКолонки = 0 По НаборКолонок.ВГраница() Цикл
			ТекущаяКолонка = НаборКолонок[ИндексКолонки];
			
			Если ТекущаяКолонка = Неопределено Тогда
				ТекущаяКолонка = ТекущийНабор[ИндексКолонки];
			КонецЕсли;	
			
			НовыйНабор.Добавить(ТекущаяКолонка);
			ТекущийНабор[ИндексКолонки] = ТекущаяКолонка;
		КонецЦикла;	
		Результат.Добавить(НовыйНабор); 
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СвернутьМассивНаборовКолонок(МассивНаборовКолонок)
	Результат = Новый Массив;
	Если МассивНаборовКолонок.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	КоличествоКолонок = МассивНаборовКолонок[0].Количество();
	
	ТекущийНабор = Новый Массив(КоличествоКолонок);

	ИндексНабора = МассивНаборовКолонок.ВГраница();
	Пока ИндексНабора >= 0 Цикл   
		НаборКолонок = МассивНаборовКолонок[ИндексНабора];
		ИндексНабора = ИндексНабора - 1;
		
		НовыйНабор = Новый Массив;
		
		Для ИндексКолонки = 0 По НаборКолонок.ВГраница() Цикл
			ТекущаяКолонка = НаборКолонок[ИндексКолонки];
			Если ТекущаяКолонка = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
			Если ТекущаяКолонка.Тип = "ГруппаКолонокТаблицы" Тогда
				ТекущаяКолонка = ТекущийНабор[ИндексКолонки];
			КонецЕсли;
			
			НовыйНабор.Добавить(ТекущаяКолонка);
			ТекущийНабор[ИндексКолонки] = ТекущаяКолонка;
		КонецЦикла;
		
		Результат.Вставить(0, НовыйНабор); 
	КонецЦикла;  
	
	УдалитьДублиИзМассиваНаборов(Результат);
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Процедура УдалитьДублиИзМассиваНаборов(МассивНаборовКолонок)
	ПрошлаяСтрока = Неопределено;    
	ИндексНабора = 0;
	Пока ИндексНабора <= МассивНаборовКолонок.ВГраница() Цикл
		ТекущаяСтрока = МассивНаборовКолонок[ИндексНабора];
		
		Если ПрошлаяСтрока <> Неопределено
			И СтрокиНабораРавны(ПрошлаяСтрока, ТекущаяСтрока) Тогда
			
			МассивНаборовКолонок.Удалить(ИндексНабора);
			Продолжить;
		КонецЕсли;
		
		ПрошлаяСтрока = ТекущаяСтрока;
		ИндексНабора = ИндексНабора + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокиНабораРавны(Набор1, Набор2)
	Для Индекс = 0 По Набор1.ВГраница() Цикл
		Если Набор1[Индекс] <> Набор2[Индекс] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции   

&НаКлиенте
Процедура УстановитьЗначениеВЯчейкеТаблицы(Таблица, ИндексКолонки, ИндексСтроки, Значение, ПустоеЗначение = "")
	Пока ИндексСтроки > Таблица.ВГраница() Цикл
		Таблица.Добавить(Новый Массив);
	КонецЦикла;

	КоличествоКолонок = ИндексКолонки + 1;
	Для Каждого Строка Из Таблица Цикл
		КоличествоКолонок = Макс(КоличествоКолонок, Строка.Количество());
	КонецЦикла;
	
	Для Каждого Строка Из Таблица Цикл
		Пока КоличествоКолонок > Строка.Количество() Цикл
			Строка.Добавить(ПустоеЗначение);
		КонецЦикла;
	КонецЦикла;
	
	Таблица[ИндексСтроки][ИндексКолонки] = Значение;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовокТаблицыПредв(ПараметрыЗаполнения, Таблица, ЭлементДанных)
	Если ЭлементДанных.Колонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекИндексКолонки = ПараметрыЗаполнения.ИндексКолонки;
	ТекИндексСтроки = ПараметрыЗаполнения.ИндексСтроки;
	Для Каждого Колонка Из ЭлементДанных.Колонки Цикл
		НовыеПараметрыЗаполнения = Новый Структура("ИндексКолонки, ИндексСтроки", ТекИндексКолонки, ПараметрыЗаполнения.ИндексСтроки + 1);
		
		ЗаполнитьЗаголовокТаблицыПредв(НовыеПараметрыЗаполнения, Таблица, Колонка);
		
		НовыйИндексСтроки = Макс(НовыеПараметрыЗаполнения.ИндексСтроки, ТекИндексСтроки);
		НовыйИндексКолонки = НовыеПараметрыЗаполнения.ИндексКолонки;
		
		Для СчИндексКолонки = ТекИндексКолонки По НовыйИндексКолонки Цикл
			УстановитьЗначениеВЯчейкеТаблицы(Таблица, СчИндексКолонки, ПараметрыЗаполнения.ИндексСтроки, Колонка, Неопределено);
		КонецЦикла;
		
		ТекИндексСтроки = НовыйИндексСтроки;
		ТекИндексКолонки = НовыйИндексКолонки + 1;
	КонецЦикла;  
	
	ПараметрыЗаполнения.ИндексКолонки = ТекИндексКолонки - 1;
	ПараметрыЗаполнения.ИндексСтроки = ТекИндексСтроки;
КонецПроцедуры

&НаКлиенте
Функция МинимальнаяДлинаКолонкиТаблицы()
	Возврат 5;
КонецФункции

&НаКлиенте
Процедура ПолучитьТаблицуДлин(ПараметрыВыполнения, ДлиныПоЯчейкам, ЭлементДанных, ОбщаяДлина)
	ОбщаяДлина = 0;
	Для Каждого ОписаниеКолонки Из ЭлементДанных.Колонки Цикл
		Длина = СтрДлина(ФорматироватьКолонку(ОписаниеКолонки));
		
		Длина = Макс(МинимальнаяДлинаКолонкиТаблицы(), Длина);
		
		ДлинаЯчейки = ДлиныПоЯчейкам.Получить(ОписаниеКолонки.УИД);
		Если ДлинаЯчейки <> Неопределено Тогда
			Длина = Макс(Длина, ДлинаЯчейки);
		КонецЕсли;
		
		ДлинаНижестоящих = 0;
		ПолучитьТаблицуДлин(ПараметрыВыполнения, ДлиныПоЯчейкам, ОписаниеКолонки, ДлинаНижестоящих);
		
		Длина = Макс(ДлинаНижестоящих, Длина);
		
		ПараметрыВыполнения.Вставить(ОписаниеКолонки.УИД, Длина);
		
		ОбщаяДлина = ОбщаяДлина + Длина;
	КонецЦикла;
КонецПроцедуры      

&НаКлиенте
Процедура ЗаполнитьДлинуКолонокТаблицыСверхуВниз(ПараметрыВыполнения, ЭлементДанных)
	Для Каждого ОписаниеКолонки Из ЭлементДанных.Колонки Цикл
		Длина = ПараметрыВыполнения.Получить(ОписаниеКолонки.УИД);
		
		КоличествоКолонок = ОписаниеКолонки.Колонки.Количество();
		Если КоличествоКолонок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЗначений = Новый Массив;
		Для Каждого Подколонка Из ОписаниеКолонки.Колонки Цикл
			МассивЗначений.Добавить(ПараметрыВыполнения.Получить(Подколонка.УИД));
		КонецЦикла;
		
 		МассивЗначений = РаспределитьЧислоСВыравниванием(Длина, МассивЗначений);
		
		Сч = 0;
		Для Каждого Подколонка Из ОписаниеКолонки.Колонки Цикл                                                                       
			ПараметрыВыполнения.Вставить(Подколонка.УИД, МассивЗначений[Сч]);
			Сч = Сч + 1;
		КонецЦикла;	
		
		ЗаполнитьДлинуКолонокТаблицыСверхуВниз(ПараметрыВыполнения, ОписаниеКолонки);
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Функция РаспределитьЧислоСВыравниванием(ЧислоДляРаспределения, МассивЗначений)
	МассивРезультат = Новый Массив;
	
	Сумма = 0;
	Для каждого ЗначениеИзМассива Из МассивЗначений Цикл
		Сумма = Сумма + ЗначениеИзМассива;
	КонецЦикла;
	
	Если Сумма >= ЧислоДляРаспределения Тогда
		Возврат МассивЗначений;
	КонецЕсли;
	
	СреднееАрифметическое = Цел(ЧислоДляРаспределения / МассивЗначений.Количество());
	
	// Определение "максимальных" значений
	МассивМаксимальныхИндексов = Новый Массив;
	МассивМинимальныхЗначений = Новый Массив;
	Для Индекс = 0 По МассивЗначений.Количество() - 1 Цикл
		Если МассивЗначений[Индекс] >= СреднееАрифметическое Тогда
			МассивМаксимальныхИндексов.Добавить(Индекс);
			МассивРезультат.Добавить(МассивЗначений[Индекс]); // Добавляем сразу значения без изменений
		Иначе
			МассивМинимальныхЗначений.Добавить(Индекс);
			МассивРезультат.Добавить(0); // Заполним нулями для начала
		КонецЕсли;
	КонецЦикла;
	
	// Распределение числа на "минимальные" значения
	Остаток = ЧислоДляРаспределения;
	КолМинимальныхЗначений = МассивМинимальныхЗначений.Количество();
	
	Если КолМинимальныхЗначений = 0 Тогда
		Возврат МассивРезультат;	
	КонецЕсли;
	
	ДоляРаспределения = Цел(Остаток / КолМинимальныхЗначений);
	
	Для каждого ИндексИзМассива Из МассивМинимальныхЗначений Цикл
		МассивРезультат[ИндексИзМассива] = ДоляРаспределения;
		Остаток = Остаток - ДоляРаспределения;
		
		Если Остаток = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Остаток > 0 И КолМинимальныхЗначений > 0 Тогда
		ИндексИзМассива = МассивМинимальныхЗначений[0];
		МассивРезультат[ИндексИзМассива] = МассивРезультат[ИндексИзМассива] + Остаток;
	КонецЕсли;  
	
	Возврат МассивРезультат;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДлиныПоКолонкам(ПараметрыВыполнения, ОписаниеТаблицы, Уровень)	
	Для Каждого Строка Из ОписаниеТаблицы.Строки Цикл
		Для Каждого Ячейка Из Строка.Ячейки Цикл
			ТекущаяДлина = ПараметрыВыполнения.Получить(Ячейка.УИДКолонки);
			Если ТекущаяДлина = Неопределено Тогда
				ТекущаяДлина = 0;
			КонецЕсли;
			ПараметрыВыполнения.Вставить(Ячейка.УИДКолонки, Макс(ТекущаяДлина, СтрДлина(ФорматироватьЯчейку(Ячейка, Уровень))));
		КонецЦикла;
		
		ЗаполнитьДлиныПоКолонкам(ПараметрыВыполнения, Строка, Уровень + 1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ФорматироватьКолонку(Колонка, Длина = 0) 
	ИсключаемыеСвойства = Новый Массив;
	ИсключаемыеСвойства.Добавить("Заголовок");
	Если Колонка.НаборСвойств.ГоризонтальноеПоложение = "Лево" Тогда
		ИсключаемыеСвойства.Добавить("ГоризонтальноеПоложение");
	КонецЕсли;    
	
	Если Колонка.Колонки.Количество() = 0 Тогда
		ИсключаемыеСвойства.Добавить("ГоризонтальноеПоложение");
	КонецЕсли;
	
	Группа = Лексема("ТаблицаКолонкаГруппа");
	Описание = Колонка.НаборСвойств.Заголовок;
	Если Колонка.Тип = "ГруппаКолонокТаблицы" Тогда
		Описание =  Группа + Колонка.НаборСвойств.Заголовок + Группа;
	КонецЕсли; 
	
	Описание = Описание + ФорматироватьНаборСвойств(Колонка.НаборСвойств, ИсключаемыеСвойства);
	
	Описание = " " + Описание + " ";
	Описание = ВыровнитьСтроку(Описание, Колонка.НаборСвойств.ГоризонтальноеПоложение, Длина);
	
	Возврат Описание;
КонецФункции

&НаКлиенте
Функция ФорматироватьРазделитель(Длина, ГоризонтальноеПоложение)
	
	СимволСлева = " ";
	СимволСправа = " ";
	
	Если ГоризонтальноеПоложение = "Право" Тогда
		СимволСправа = ": ";
	КонецЕсли;
	
	Если ГоризонтальноеПоложение = "Центр" Тогда
		СимволСлева = " :";
		СимволСправа = ": ";
	КонецЕсли;
	
	Строка = СимволСлева 
		+ СтрПовторитьСимвол("-", Длина - СтрДлина(СимволСлева) - СтрДлина(СимволСправа))
		+ СимволСправа;
		
	Возврат Строка;
КонецФункции

&НаКлиенте
Функция ФорматироватьЯчейку(Ячейка, Уровень, Колонка = Неопределено, Длина = Неопределено)      
	Строка = Ячейка.Значение;
	
	Строка = ПолучитьСтрокуФлажок(
		Строка, 
		Ячейка.ЕстьФлажок, 
		Ячейка.ЗначениеФлажка, 
		"Право");

	Если Уровень > 0 Тогда
		Строка = СтрПовторитьСимвол(".", Уровень) + " " + Строка;
	КонецЕсли;
		
	Строка = " " + Строка + " ";
	
	Если Колонка <> Неопределено Тогда
		Строка = ВыровнитьСтроку(Строка, Колонка.НаборСвойств.ГоризонтальноеПоложение, Длина);
	КонецЕсли;
	
	Возврат Строка;
КонецФункции

&НаКлиенте
Функция СформироватьТаблицу(ОписаниеДанных, ТаблицаДлин, ТаблицаЗаголовки, ТаблицаСвернутыеЗаголовки)
	Таблица = Новый Массив;
	
	СформироватьЗаголовкиТаблицы(Таблица, ТаблицаДлин, ТаблицаЗаголовки);
	
	ИндексСтроки = ТаблицаЗаголовки.ВГраница() + 1;	

	СформироватьРазделительТаблицы(Таблица, ТаблицаДлин, ТаблицаЗаголовки, ИндексСтроки);
	
	ИндексСтроки = ИндексСтроки + 1;	
	
	СформироватьСтрокиТаблицы(ОписаниеДанных, Таблица, ТаблицаДлин, ТаблицаСвернутыеЗаголовки, ИндексСтроки, 0);
	
	Возврат Таблица;
КонецФункции

&НаКлиенте
Процедура СформироватьЗаголовкиТаблицы(Таблица, ТаблицаДлин, ТаблицаЗаголовки)
	МассивКолонок = Новый Массив;
	
	Для ИндексСтроки = 0 По ТаблицаЗаголовки.ВГраница() Цикл
		МассивКолонокПоСтроке = Новый Массив;
		
		ЗаголовкиСтрока = ТаблицаЗаголовки[ИндексСтроки];
		Для ИндексКолонки = 0 По ЗаголовкиСтрока.ВГраница() Цикл
			Колонка = ЗаголовкиСтрока[ИндексКолонки];
			
			Длина = ТаблицаДлин.Получить(Колонка.УИД);
			
			ЭтоПовторПоСтроке = Ложь;
			ЭтоПовторПоКолонке = Ложь;
			УстановитьПризнакПовтораДляКолонкиТаблицы(МассивКолонок, МассивКолонокПоСтроке, Колонка, ЭтоПовторПоКолонке, ЭтоПовторПоСтроке);
			
			Если ЭтоПовторПоСтроке Тогда
				Значение = "";
			ИначеЕсли ЭтоПовторПоКолонке Тогда
				Значение = СтрПовторитьСимвол(" ", Длина);
			Иначе
				Значение = ФорматироватьКолонку(Колонка, Длина);
			КонецЕсли;
			
			УстановитьЗначениеВЯчейкеТаблицы(Таблица, ИндексКолонки, ИндексСтроки, Значение, "");
		КонецЦикла;
	КонецЦикла;   

КонецПроцедуры 

&НаКлиенте
Процедура СформироватьРазделительТаблицы(Таблица, ТаблицаДлин, ТаблицаЗаголовки, ИндексСтроки)
	ПоследнийЗаголовок = ТаблицаЗаголовки[ТаблицаЗаголовки.ВГраница()];
	
	Для ИндексКолонки = 0 По ПоследнийЗаголовок.ВГраница() Цикл
		Колонка = ПоследнийЗаголовок[ИндексКолонки];
		Длина = ТаблицаДлин.Получить(Колонка.УИД);
		
		Значение = ФорматироватьРазделитель(Длина, Колонка.НаборСвойств.ГоризонтальноеПоложение);
		
		УстановитьЗначениеВЯчейкеТаблицы(Таблица, ИндексКолонки, ИндексСтроки, Значение, "");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСтрокиТаблицы(ОписаниеДанных, Таблица, ТаблицаДлин, ТаблицаСвернутыеЗаголовки, ИндексСтроки, Уровень) 
	Для Каждого Строка Из ОписаниеДанных.Строки Цикл
		СформироватьСтрокуТаблицы(Строка, Таблица, ТаблицаДлин, ТаблицаСвернутыеЗаголовки, ИндексСтроки, Уровень);
		
		ИндексСтроки = ИндексСтроки + ТаблицаСвернутыеЗаголовки.Количество();
		
		СформироватьСтрокиТаблицы(Строка, Таблица, ТаблицаДлин, ТаблицаСвернутыеЗаголовки, ИндексСтроки, Уровень + 1);
	КонецЦикла;
КонецПроцедуры   

&НаКлиенте
Процедура СформироватьСтрокуТаблицы(Строка, Таблица, ТаблицаДлин, ТаблицаСвернутыеЗаголовки, НачальныйИндексСтроки, Уровень) 
	МассивКолонок = Новый Массив;
	
	ЯчейкиПоКолонкам = ПолучитьСоответствиеЯчеекПоКолонкам(Строка.Ячейки);
	
	Для ИндексСтроки = 0 По ТаблицаСвернутыеЗаголовки.ВГраница() Цикл 
		МассивКолонокПоСтроке = Новый Массив;
		
		ЗаголовкиСтрока = ТаблицаСвернутыеЗаголовки[ИндексСтроки];
		Для ИндексКолонки = 0 По ЗаголовкиСтрока.ВГраница() Цикл
			Колонка = ЗаголовкиСтрока[ИндексКолонки];
			
			ЭтоПовторПоСтроке = Ложь;
			ЭтоПовторПоКолонке = Ложь;
			УстановитьПризнакПовтораДляКолонкиТаблицы(МассивКолонок, МассивКолонокПоСтроке, Колонка, ЭтоПовторПоКолонке, ЭтоПовторПоСтроке);
			
			Длина = ТаблицаДлин.Получить(Колонка.УИД);
			
			Ячейка = ЯчейкиПоКолонкам.Получить(Колонка.УИД);
			
			Значение = СформироватьЗначениеЯчейкиТаблицы(Ячейка, Длина, Колонка, ИндексКолонки, Уровень, ЭтоПовторПоКолонке, ЭтоПовторПоСтроке);
			
			УстановитьЗначениеВЯчейкеТаблицы(Таблица, ИндексКолонки, НачальныйИндексСтроки + ИндексСтроки, Значение, "");
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция СформироватьЗначениеЯчейкиТаблицы(Ячейка, Длина, Колонка, ИндексКолонки, Уровень, ЭтоПовторПоКолонке, ЭтоПовторПоСтроке)
	Если ЭтоПовторПоСтроке Тогда
		Возврат "";
	КонецЕсли;	
	
	Если Ячейка = Неопределено ИЛИ ЭтоПовторПоКолонке Тогда 
		Если ИндексКолонки <> 0 Тогда
			Возврат СтрПовторитьСимвол(" ", Длина);
		КонецЕсли;
		
		Значение = " " + ПолучитьОписаниеСУровнем("", Уровень);
		Возврат Значение + СтрПовторитьСимвол(" ", Длина - СтрДлина(Значение));
	КонецЕсли;
	
	ТекУровень = ?(ИндексКолонки = 0, Уровень, 0);
	Значение = ФорматироватьЯчейку(Ячейка, ТекУровень, Колонка, Длина);
	Возврат Значение;
КонецФункции

&НаКлиенте
Процедура УстановитьПризнакПовтораДляКолонкиТаблицы(МассивКолонок, МассивКолонокПоСтроке, Колонка, ЭтоПовторПоКолонке, ЭтоПовторПоСтроке)
	Если МассивКолонокПоСтроке.Найти(Колонка) <> Неопределено Тогда
		ЭтоПовторПоСтроке = Истина;
	КонецЕсли;
	МассивКолонокПоСтроке.Добавить(Колонка);
	
	Если НЕ ЭтоПовторПоСтроке И МассивКолонок.Найти(Колонка) <> Неопределено Тогда
		ЭтоПовторПоКолонке = Истина;
	КонецЕсли;
	МассивКолонок.Добавить(Колонка);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСоответствиеЯчеекПоКолонкам(Ячейки)
	ЯчейкиПоКолонкам = Новый Соответствие;
	Для Каждого Ячейка Из Ячейки Цикл
		ЯчейкиПоКолонкам.Вставить(Ячейка.УИДКолонки, Ячейка);
	КонецЦикла;
	Возврат ЯчейкиПоКолонкам;
КонецФункции

#КонецОбласти

#Область ФорматироватьПолеВвода

&НаКлиенте
Процедура ФорматироватьПолеВвода(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "ПолеВвода" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ИсключаемыеСвойства = СтрРазделить(
		"КнопкаВыпадающегоСписка
		|КнопкаВыбора
		|КнопкаОчистки
		|КнопкаРегулирования
		|КнопкаОткрытия
		|МногострочныйРежим
		|ГоризонтальноеПоложение
		|Высота
		|Заголовок
		|ПоложениеЗаголовка", Символы.ПС);
	
	ЗаголовокЭлемента = ЭлементДанных.НаборСвойств.Заголовок + Лексема("ПолеВводаРазделитель") + " ";
	Результат = ЗаголовокЭлемента + ЭлементДанных.Значение;

	ДлинаЗначения = СтрДлина(ЭлементДанных.Значение);
	ДлинаЗаголовка = СтрДлина(ЗаголовокЭлемента);
		
	СвойстваПоляВвода = "";   
	ФорматироватьДобавитьСвойство(СвойстваПоляВвода, ЭлементДанных.НаборСвойств, "КнопкаВыбора", "В");
	ФорматироватьДобавитьСвойство(СвойстваПоляВвода, ЭлементДанных.НаборСвойств, "КнопкаВыпадающегоСписка", "С");
	ФорматироватьДобавитьСвойство(СвойстваПоляВвода, ЭлементДанных.НаборСвойств, "КнопкаОчистки", "Х");
	ФорматироватьДобавитьСвойство(СвойстваПоляВвода, ЭлементДанных.НаборСвойств, "КнопкаОткрытия", "О");
	ФорматироватьДобавитьСвойство(СвойстваПоляВвода, ЭлементДанных.НаборСвойств, "КнопкаРегулирования", "Д");
	
	Если НЕ ПустаяСтрока(СвойстваПоляВвода) Тогда
		Результат = Результат + "__" + СвойстваПоляВвода;
	КонецЕсли;
	
	Результат = Результат + ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
	
	Результат = ФорматироватьГоризонтальноеПоложение(
		Результат, 
		ЭлементДанных.НаборСвойств.ГоризонтальноеПоложение, 
		ПараметрыВыполнения.Длина);
	
	ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);	

	Если ЭлементДанных.НаборСвойств.Свойство("МногострочныйРежим") 
		И Булево(ЭлементДанных.НаборСвойств.Свойство("МногострочныйРежим")) Тогда
		
		СтрМногострочный = СтрПовторитьСимвол(" ", ДлинаЗаголовка) +  СтрПовторитьСимвол("_", ДлинаЗначения);
		Для СчСтрок = 2 По Число(ЭлементДанных.НаборСвойств.Высота) Цикл // BSLLS:UnusedLocalVariable-off  
			ФорматированиеДобавитьРезультат(ЭлементДанных, СтрМногострочный);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти    

#Область ФорматироватьНадпись

&НаКлиенте
Процедура ФорматироватьНадпись(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "Надпись" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ИсключаемыеСвойства = СтрРазделить(
		"ГоризонтальноеПоложение
		|Заголовок", Символы.ПС);
	
	Результат = ЭлементДанных.НаборСвойств.Заголовок;
	
	Результат = Результат + ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
	
	Результат = ФорматироватьГоризонтальноеПоложение(
		Результат, 
		ЭлементДанных.НаборСвойств.ГоризонтальноеПоложение, 
		ПараметрыВыполнения.Длина);
	
	ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);	
КонецПроцедуры

#КонецОбласти    

#Область ФорматироватьФлажок

&НаКлиенте
Процедура ФорматироватьФлажок(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "Флажок" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ИсключаемыеСвойства = СтрРазделить(
		"Заголовок
		|ГоризонтальноеПоложение
		|ПоложениеЗаголовка", Символы.ПС);
	
	Результат = ЭлементДанных.НаборСвойств.Заголовок;
	
	Результат = ПолучитьСтрокуФлажок(
		Результат, 
		Истина, 
		ЭлементДанных.Значение, 
		ЭлементДанных.НаборСвойств.ПоложениеЗаголовка);
	
	Результат = Результат + ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
	
	Результат = ФорматироватьГоризонтальноеПоложение(
		Результат, 
		ЭлементДанных.НаборСвойств.ГоризонтальноеПоложение, 
		ПараметрыВыполнения.Длина);
	
	ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуФлажок(Строка, ЕстьФлажок, ЗначениеФлажка, ПоложениеЗаголовка)
	Если НЕ ЕстьФлажок Тогда
		Возврат Строка;
	КонецЕсли;
	
	Значение = " ";
	Если ЗначениеФлажка Тогда
		Значение = "X";
	КонецЕсли;
	Значение = "[" + Значение + "]";
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если ПоложениеЗаголовка = "Право" Тогда
		Возврат Значение + " " + Строка;
	КонецЕсли;
	Возврат Строка + " " + Значение;
КонецФункции

#КонецОбласти    

#Область ФорматироватьКоманднуюПанель

&НаКлиенте
Процедура ФорматироватьКоманднуюПанель(ПараметрыВыполнения, ЭлементДанных, Выполнена)
	Если НЕ ЭлементДанных.Тип = "КоманднаяПанель" Тогда
		Возврат;
	КонецЕсли;
	Выполнена = Истина;
	
	ИсключаемыеСвойства = СтрРазделить(
		"ГоризонтальноеПоложение", Символы.ПС);
	
	ЕстьМеню = Ложь;
	
	Кнопки = ПолучитьСписокКнопокБезГрупп(ЭлементДанных);
	
	НаборКнопок = ФорматироватьПолучитьКнопкиКоманднойПанели(ПараметрыВыполнения, Кнопки, ЕстьМеню);
	
	СтрКнопки = СтрСоединить(
		НаборКнопок, 
		" " +  Лексема("КоманднаяПанельРазделительКнопок") + " ");

	Результат = Лексема("КоманднаяПанельНачало") 
		+ " " 
		+ СтрКнопки
		+ " "; 
	
	Если НЕ ЕстьМеню Тогда
		Результат = Результат + Лексема("КоманднаяПанельКонец"); 
	
		Результат = Результат + ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
		
		Результат = ФорматироватьГоризонтальноеПоложение(
			Результат, 
			ЭлементДанных.НаборСвойств.ГоризонтальноеПоложение, 
			ПараметрыВыполнения.Длина);
		
		ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);	
		
		Возврат;
	КонецЕсли;
	
	ПараметрыФорматированияГоризонтальногоПоложения = ФорматироватьГоризонтальноеПоложениеПодготовка(
		Результат, 
		ЭлементДанных.НаборСвойств.ГоризонтальноеПоложение, 
		ПараметрыВыполнения.Длина);
		
	Результат = 
		ПараметрыФорматированияГоризонтальногоПоложения.Слева 
		+ ПараметрыФорматированияГоризонтальногоПоложения.Строка;
		
	ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);	
	
	Для Каждого Кнопка Из Кнопки Цикл
		Если Кнопка.Тип <> "Меню" Тогда
			Продолжить;
		КонецЕсли;	
		
		ФорматироватьМеню(
			ПараметрыВыполнения, 
			ЭлементДанных, 
			Кнопка, 
			0);
	КонецЦикла;
	
	ТекстКонецЭлемента = 
		" " 
		+ Лексема("КоманднаяПанельКонец") 
		+ ПараметрыФорматированияГоризонтальногоПоложения.Справа;
	ФорматированиеДобавитьРезультат(ЭлементДанных, ТекстКонецЭлемента, Истина);	
КонецПроцедуры

&НаКлиенте
Функция ФорматироватьПолучитьКнопкиКоманднойПанели(ПараметрыВыполнения, Кнопки, ЕстьМеню)
	НаборКнопок = Новый Массив;
	Для Каждого Кнопка Из Кнопки Цикл
		Если Кнопка.Тип = "ГруппаКнопок" Тогда
			НаборКнопок.Добавить(" " + Лексема("КоманднаяПанельРазделительМеню"));
			Продолжить;
		КонецЕсли;
		
		Если Кнопка.Тип = "Меню" Тогда
			ЕстьМеню = Истина;
		КонецЕсли;
		
		ПараметрыВыполненияКнопка = НовыеПараметрыФорматирования(ПараметрыВыполнения.РасчетДлины, ПараметрыВыполнения.Длина);
		ФорматироватьКнопкуКоманднойПанели(ПараметрыВыполненияКнопка, Кнопка);
		
		НаборКнопок.Добавить(Кнопка.Формат.Результат[0]);
	КонецЦикла;
	
	Возврат НаборКнопок;
КонецФункции

&НаКлиенте
Процедура ФорматироватьМеню(
		ПараметрыВыполнения, 
		ТекКоманднаяПанель, 
		ЭлементДанных, 
		Уровень)
		
	Если ЭлементДанных.Тип = "ГруппаКнопок" Тогда
		Результат = Лексема("КоманднаяПанельРазделительМеню");
	Иначе
		ЭтоМеню = (Уровень = 0);	
		Результат = ПолучитьФорматированноеОписаниеКнопки(ЭлементДанных, ЭтоМеню);
	КонецЕсли;

	Результат = ПолучитьОписаниеСУровнем(Результат, Уровень);
	
	ФорматированиеДобавитьРезультат(ТекКоманднаяПанель, Результат);	
	
	Если ЭлементДанных.Тип = "Меню" Тогда
		ФорматироватьЭлементыМеню(ПараметрыВыполнения, ТекКоманднаяПанель, Уровень + 1, ЭлементДанных);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьЭлементыМеню(ПараметрыВыполнения, ТекКоманднаяПанель, Уровень, Меню)
	ЭлементыБезГрупп = ПолучитьСписокКнопокБезГрупп(Меню);
	Для Каждого Подменю Из ЭлементыБезГрупп Цикл
		ФорматироватьМеню(
			ПараметрыВыполнения, 
			ТекКоманднаяПанель, 
			Подменю, 
			Уровень);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФорматированноеОписаниеКнопки(ЭлементДанных, ЭтоМеню = Ложь)
	
	ТекстКартинка = Неопределено;
	ТекстЗаголовок = ЭлементДанных.НаборСвойств.Заголовок;
	
	Если ЭлементДанных.Картинка <> Неопределено Тогда
		ТекстКартинка = "@" + ЭлементДанных.Картинка;
	КонецЕсли;

	Если ЭтоМеню И НЕ ПустаяСтрока(ТекстЗаголовок) Тогда
		ТекстКартинка = Неопределено;
	КонецЕсли;
	
	Если ТекстКартинка = Неопределено Тогда
		Возврат ТекстЗаголовок;
	КонецЕсли;
	
	Если ЭлементДанных.НаборСвойств.ПоложениеКартинки = "Лево" Тогда
		Возврат ТекстКартинка + " " + ТекстЗаголовок;
	КонецЕсли;
	
	Возврат ТекстЗаголовок  + " " + ТекстКартинка;
КонецФункции

&НаКлиенте
Процедура ФорматироватьКнопкуКоманднойПанели(ПараметрыВыполнения, ЭлементДанных)
	ИсключаемыеСвойства = СтрРазделить(
		"ПоложениеКартинки
		|Заголовок", Символы.ПС);
	
	Результат = ПолучитьФорматированноеОписаниеКнопки(ЭлементДанных);
	
	Результат = Результат + ФорматироватьНаборСвойств(ЭлементДанных.НаборСвойств, ИсключаемыеСвойства);
	
	ФорматированиеУстановитьРезультат(ЭлементДанных, Результат);	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеСУровнем(Строка, Уровень)
	Если Уровень = 0 Тогда
		Возврат Строка;
	КонецЕсли;	
	
	Результат = СтрПовторитьСимвол(Лексема("Уровень"), Уровень);
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		Результат = Результат + " " + Строка;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокКнопокБезГрупп(Родитель)
	Результат = Новый Массив;
	Для Каждого Кнопка Из Родитель.Элементы Цикл
		Если Кнопка.Тип <> "ГруппаКнопок" Тогда
			Результат.Добавить(Кнопка);
			Продолжить;
		КонецЕсли;
			
		НаборКнопок = ПолучитьСписокКнопокБезГрупп(Кнопка);
		
		Если Результат.Количество() > 0 Тогда
			Результат.Добавить(Кнопка);
		КонецЕсли; 
		
		Для Каждого ДобавляемаяКнопка Из НаборКнопок Цикл
			Результат.Добавить(ДобавляемаяКнопка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ФорматироватьДобавитьСвойство(Строка, Свойства, ИмяСвойство, Значение)   
	Если НЕ Свойства.Свойство(ИмяСвойство) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Свойства[ИмяСвойство] Тогда
		Возврат;
	КонецЕсли;
	Строка = Строка + Значение;
КонецПроцедуры

&НаКлиенте
Функция ФорматироватьНаборСвойств(Свойства, ИсключаемыеСвойства)
	МассивРезультат = Новый Массив;
	Для Каждого КлючЗначение Из Свойства Цикл 
		Если ИсключаемыеСвойства.Найти(КлючЗначение.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСвойство = СтрШаблон("%1 = %2", КлючЗначение.Ключ, КлючЗначение.Значение);
		МассивРезультат.Добавить(СтрокаСвойство);
	КонецЦикла;  
	
	Если МассивРезультат.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат " {" + СтрСоединить(МассивРезультат, "; ") + "}";
КонецФункции

&НаКлиенте
Функция СоединитьСтрокиГоризонтально(
	НаборыСтрок, 
	Символ, 
	СимволПерваяСтрока = Неопределено, 
	ДобавитьВНачалоКонец = Ложь)

	Результат = Новый Массив;
	СчСтроки = 0;
	Пока Истина Цикл
		МассивСтрок = Новый Массив;
		ДобавленаСтрока = Ложь;
		Для Каждого Набор Из НаборыСтрок Цикл
			Если СчСтроки > Набор.ВГраница() Тогда
				МассивСтрок.Добавить("");
				Продолжить;
			КонецЕсли;
			МассивСтрок.Добавить(Набор[СчСтроки]);
			ДобавленаСтрока = Истина;
		КонецЦикла;    
		
		Если НЕ ДобавленаСтрока Тогда
			Прервать;
		КонецЕсли;
		
		ТекСимвол = Символ;
		Если СчСтроки = 0 И СимволПерваяСтрока <> Неопределено Тогда
			ТекСимвол = СимволПерваяСтрока;
		КонецЕсли;

        СтрРезультат = СтрСоединить(МассивСтрок, ТекСимвол);
		Если ДобавитьВНачалоКонец Тогда
			СтрРезультат  = ТекСимвол + СтрРезультат + ТекСимвол;
		КонецЕсли; 
		
		Результат.Добавить(СтрРезультат);
		СчСтроки = СчСтроки + 1;
	КонецЦикла;     

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СтрПовторитьСимвол(Символ, Количество)
	Если Количество <= 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	Для Сч = 1 По Количество Цикл // BSLLS:UnusedLocalVariable-off
		Результат = Результат + Символ;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВыровнитьСтроку(Знач Строка, ГоризонтальноеВыравнивание, Длина)
	КоличествоСимволовКДобавлению = Длина - СтрДлина(Строка);
	Если КоличествоСимволовКДобавлению <= 0 Тогда
		Возврат Строка;
	КонецЕсли;
	
	Если ГоризонтальноеВыравнивание = "Лево" Тогда
		Возврат Строка + СтрПовторитьСимвол(" ", КоличествоСимволовКДобавлению);
	КонецЕсли;
	
	Если ГоризонтальноеВыравнивание = "Право" Тогда
		Возврат СтрПовторитьСимвол(" ", КоличествоСимволовКДобавлению) + Строка;
	КонецЕсли;

	КоличествоСимволовКДобавлениюСлева = Цел(КоличествоСимволовКДобавлению / 2);
	КоличествоСимволовКДобавлениюСправа = КоличествоСимволовКДобавлению - КоличествоСимволовКДобавлениюСлева;
	
	Возврат СтрПовторитьСимвол(
		" ", 
		КоличествоСимволовКДобавлениюСлева) + Строка + СтрПовторитьСимвол(" ", КоличествоСимволовКДобавлениюСправа);
КонецФункции

&НаКлиенте
Процедура ФорматированиеУстановитьРезультат(ЭлементДанных, Результат)
	ФорматированиеДобавитьРезультат(ЭлементДанных, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ФорматированиеЗаменитьРезультат(ЭлементДанных, Результат, Индекс)
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматированиеДобавитьРезультат(ЭлементДанных, Результат, ДобавитьВПоследнююСтроку = Ложь)
	Если ДобавитьВПоследнююСтроку Тогда
		НаборСтрок = ЭлементДанных.Формат.Результат;
		Индекс = НаборСтрок.ВГраница();
		ПоследняяСтрока = НаборСтрок[Индекс];
		НаборСтрок[Индекс] = ПоследняяСтрока + Результат; 
		ЭлементДанных.Формат.Длина = Макс(ЭлементДанных.Формат.Длина, СтрДлина(НаборСтрок[Индекс]));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для Каждого ЭлементРезультат Из Результат Цикл
			ЭлементДанных.Формат.Результат.Добавить(ЭлементРезультат);
			ЭлементДанных.Формат.Длина = Макс(ЭлементДанных.Формат.Длина, СтрДлина(ЭлементРезультат));
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ЭлементДанных.Формат.Результат.Добавить(Результат);
	ЭлементДанных.Формат.Длина = Макс(ЭлементДанных.Формат.Длина, СтрДлина(Результат));
КонецПроцедуры

&НаКлиенте
Функция ФорматироватьГоризонтальноеПоложениеПодготовка(Строка, ГоризонтальноеПоложение, Длина)
	Результат = Новый Структура("Слева,Справа,Строка", "", "" , "");
	СимволСлева = "";
	СимволСправа = "";
	Если ГоризонтальноеПоложение = "Право" Тогда
		СимволСлева = "-> ";
	КонецЕсли;
	
	Если ГоризонтальноеПоложение = "Центр" Тогда
		СимволСлева = "-> ";
		СимволСправа = " <-";
	КонецЕсли;
	
	Результат.Слева = СимволСлева;
	Результат.Справа = СимволСправа;
	Результат.Строка = ВыровнитьСтроку(Строка, ГоризонтальноеПоложение, Длина - СтрДлина(СимволСлева) - СтрДлина(СимволСправа));
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ФорматироватьГоризонтальноеПоложение(Строка, ГоризонтальноеПоложение, Длина)
	Результат = ФорматироватьГоризонтальноеПоложениеПодготовка(Строка, ГоризонтальноеПоложение, Длина);	
	Возврат Результат.Слева 
	    + Результат.Строка
		+ Результат.Справа;
КонецФункции

#КонецОбласти    