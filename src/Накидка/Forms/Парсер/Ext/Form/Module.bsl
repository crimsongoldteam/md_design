#Область ОбработчикиСобытийФормы

&НаКлиенте
Функция Разобрать(СтрокаДляРазбора) Экспорт
	МассивСтрок = СтрРазделить(СтрокаДляРазбора, Символы.ПС);
	
	ДанныеГрупп = ПарсингСтруктуры(МассивСтрок);

	ПарсингВертикальнойГруппы(ДанныеГрупп); 
	
	ПарсингОчистка(ДанныеГрупп);
	
	Возврат ДанныеГрупп;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеКолонкиТаблицы(Родитель) Экспорт   
	Результат = ПолучитьОписаниеЭлемента("КолонкаТаблицы", Родитель); 
	Результат.Вставить("ЕстьКартинка", Ложь);
	Результат.Вставить("ЕстьФлажок", Ложь);
	Результат.Вставить("ЕстьЗначение", Ложь);	
	Результат.Вставить("УИДФлажок", Новый УникальныйИдентификатор);	
	Результат.Вставить("Колонки", Новый Массив);
	
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.НаборСвойств.Вставить("ГоризонтальноеПоложение", "Лево");
	
	Если Родитель <> Неопределено Тогда
		Родитель.Колонки.Добавить(Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеТаблицы(Родитель) Экспорт
	Результат = ПолучитьОписаниеЭлемента("Таблица", Родитель); 
	Результат.Вставить("Колонки", Новый Массив);
	Результат.Вставить("Строки", Новый Массив);
	
	Если Родитель <> Неопределено Тогда
		Родитель.Элементы.Добавить(Результат);
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеСтрокиТаблицы(Родитель) Экспорт
	Результат = ПолучитьОписаниеЭлемента("СтрокаТаблицы", Родитель); 
	Результат.Вставить("Ячейки", Новый Массив);
	Результат.Вставить("Строки", Новый Массив);
	Родитель.Строки.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеЯчейкиТаблицы(СтрокаТаблицы) Экспорт
	Результат = ПолучитьОписаниеЭлемента("ЯчейкаТаблицы", СтрокаТаблицы); 
	Результат.Вставить("Значение", "");
	Результат.Вставить("ЕстьФлажок", Ложь);
	Результат.Вставить("ЕстьКартинка", Ложь);
	Результат.Вставить("ЗначениеФлажка", Ложь);
	Результат.Вставить("Картинка", Неопределено);
	Результат.Вставить("УИДКолонки", Неопределено);
	Результат.Вставить("УИДКолонкиФлажок", Новый УникальныйИдентификатор);	
	
	СтрокаТаблицы.Ячейки.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементПоУИД(ОписаниеЭлементов, УИД) Экспорт
	Если ОписаниеЭлементов.УИД = УИД Тогда
		Возврат ОписаниеЭлементов;
	КонецЕсли;
	
	Если ОписаниеЭлементов.Свойство("Элементы") Тогда
		Для Каждого ОписаниеЭлемента Из ОписаниеЭлементов.Элементы Цикл
			ТекЭлемент = ПолучитьЭлементПоУИД(ОписаниеЭлемента, УИД);
			Если ТекЭлемент <> Неопределено Тогда
				Возврат ТекЭлемент;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОписаниеЭлементов.Свойство("Колонки") Тогда
		Для Каждого ОписаниеЭлемента Из ОписаниеЭлементов.Колонки Цикл
			ТекЭлемент = ПолучитьЭлементПоУИД(ОписаниеЭлемента, УИД);
			Если ТекЭлемент <> Неопределено Тогда
				Возврат ТекЭлемент;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция Лексема(ИмяПараметра)
	Возврат ВладелецФормы.Лексема(ИмяПараметра);
КонецФункции

#Область ПарсингГрупп
 
&НаКлиенте
Функция ПерейтиНаСледующийЭлемент(ПараметрыВыполнения)
	ПараметрыВыполнения.Индекс = ПараметрыВыполнения.Индекс + 1;
	Возврат ПараметрыВыполнения.Индекс <= ПараметрыВыполнения.МассивЭлементов.ВГраница();
КонецФункции
 
&НаКлиенте
Процедура ПерейтиНаПрошлыйЭлемент(ПараметрыВыполнения)
	ПараметрыВыполнения.Индекс = ПараметрыВыполнения.Индекс - 1;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийЭлемент(ПараметрыВыполнения)
	Если ПараметрыВыполнения.Индекс > ПараметрыВыполнения.МассивЭлементов.ВГраница() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыВыполнения.МассивЭлементов[ПараметрыВыполнения.Индекс];
КонецФункции

&НаКлиенте
Функция ПарсингСтруктуры(МассивСтрок)  
	ГруппаФормы = ПолучитьОписаниеФормы();
	
	ПараметрыВыполнения = Новый Структура("Форма,Группы,ЭтоПустаяСтрока", ГруппаФормы, Новый Массив, Ложь);
	ПараметрыВыполнения.Группы.Добавить(ГруппаФормы);

	МожноПолучитьЗаголовокФормы = Истина;
	НомерСтроки = 1;
	Для Каждого Строка Из МассивСтрок Цикл
		ПараметрыВыполнения.ЭтоПустаяСтрока = ПустаяСтрока(Строка);
		
		Текст = НовыйТекст(Строка, НомерСтроки, 1);
		
		Если НЕ ПараметрыВыполнения.ЭтоПустаяСтрока
			И МожноПолучитьЗаголовокФормы Тогда
			МожноПолучитьЗаголовокФормы = Ложь;
			
			Если ПарсингЗаголовкаФормы(ПараметрыВыполнения, Текст) Тогда
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПарсингГруппПоСтроке(ПараметрыВыполнения, Текст);

		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат ПараметрыВыполнения.Форма;
КонецФункции

&НаКлиенте
Функция ПарсингЗаголовкаФормы(ПараметрыВыполнения, Текст)
	Разделитель = Лексема("ФормаЗаголовок");
	Содержимое = ВыделитьНачальныйКонечныйСимволы(Текст, Разделитель, Разделитель);	
	
	Если НЕ Содержимое.ЕстьНачальный 
		И НЕ Содержимое.ЕстьНачальный Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыВыполнения.Форма.НаборСвойств.Заголовок = СокрЛП(Содержимое.Текст.Значение);
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПарсингГруппПоСтроке(ПараметрыВыполнения, Текст)
	ТекущиеГруппы = Новый Массив;
	
	Разделитель = Лексема("РазделительГруппа");
	ТекстВертикальныеГруппы = ПолучитьПодгруппыСтроки(Текст, Разделитель);        

	Сч = 0;
	Для Сч = 0 По ТекстВертикальныеГруппы.ВГраница() Цикл
		ТекстВертикальнаяГруппа = ТекстВертикальныеГруппы[Сч];
		ПрошлаяГруппаОписание = ПараметрыВыполнения.Группы[Сч];
		ПарсингДобавляемыхГрупп(ПараметрыВыполнения, ТекущиеГруппы, ТекстВертикальнаяГруппа, ПрошлаяГруппаОписание);
	КонецЦикла;
	
	ПараметрыВыполнения.Группы = ТекущиеГруппы;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУровеньПоОтступам(Знач Строка)
	Результат = Новый Структура("Строка,Уровень", Строка, 0);
	Если ПустаяСтрока(Результат.Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пробелы = "    ";
	Пока Истина Цикл
		Если СтрНачинаетсяС(Результат.Строка, Пробелы) Тогда
			Результат.Уровень = Результат.Уровень + 1;
			Результат.Строка = Сред(Результат.Строка, СтрДлина(Пробелы));
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Результат.Строка, Символы.Таб) Тогда
			Результат.Уровень = Результат.Уровень + 1;
			Результат.Строка = Сред(Результат.Строка, 2);
			Продолжить;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтраницуПоУровню(ТекущийЭлемент, Уровень) 
	Если ТекущийЭлемент.Тип = "Страница" 
		И ТекущийЭлемент.Родитель.Свойство("Уровень") 
		И ТекущийЭлемент.Родитель.Уровень = Уровень Тогда
		
		Возврат ТекущийЭлемент;
	КонецЕсли;
	
	Если ТекущийЭлемент.Родитель = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьСтраницуПоУровню(ТекущийЭлемент.Родитель, Уровень);
КонецФункции

&НаКлиенте
Процедура ПарсингДобавляемыхГрупп(ПараметрыВыполнения, ТекущиеГруппы, ТекстГруппа, ПрошлаяГруппа)
	РазделительОднострочнаяГруппа = Лексема("РазделительГруппаОднострочная");
	РазделительГруппаДобавить = Лексема("РазделительГруппаДобавить");
	
	ПараметрыТекущейСтраницы = ПолучитьПараметрыТекущейСтраницы(ПараметрыВыполнения, ПрошлаяГруппа, ТекстГруппа);
	Родитель = ПараметрыТекущейСтраницы.Родитель;
	
	Если ПараметрыТекущейСтраницы.ПустаяСтрока Тогда
		СтрочныйЭлемент = ПолучитьОписаниеСтрочногоЭлемента(Родитель);
		СтрочныйЭлемент.Текст =  ТекстГруппа;
		
		ЗаполнитьКоординатыЭлементаПоТекстуВверх(Родитель, ТекстГруппа);
		
		ТекущиеГруппы.Добавить(ПрошлаяГруппа);
		Возврат;
	КонецЕсли;
	
	
	Если ПарсингДобавляемыхСтраниц(ПараметрыТекущейСтраницы, ТекущиеГруппы, ТекстГруппа) Тогда
		Возврат;
	КонецЕсли;

	ДобавляемыеГруппы = ПолучитьПодгруппыСтроки(ТекстГруппа, РазделительОднострочнаяГруппа);
	
	Если ДобавляемыеГруппы.Количество() > 1 Тогда        
		ОднострочнаяГруппа = ПолучитьОписаниеОднострочнойГруппы(Родитель);

		Для Каждого ДобавляемаяГруппа Из ДобавляемыеГруппы Цикл
			СтрочныйЭлемент = ПолучитьОписаниеСтрочногоЭлемента(ОднострочнаяГруппа);
			СтрочныйЭлемент.Текст =  ДобавляемаяГруппа;
			
		КонецЦикла;

		ЗаполнитьКоординатыЭлементаПоТекстуВверх(Родитель, ТекстГруппа);
		
		ТекущиеГруппы.Добавить(ПрошлаяГруппа);
		
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ЭтоПустаяСтрока Тогда   
		Родитель = ПараметрыВыполнения.Форма;
		СтрочныйЭлемент = ПолучитьОписаниеСтрочногоЭлемента(Родитель);
		СтрочныйЭлемент.Текст =  ТекстГруппа;

		ЗаполнитьКоординатыЭлементаПоТекстуВверх(Родитель, ТекстГруппа);
		
		ТекущиеГруппы.Добавить(Родитель);
		Возврат;
	КонецЕсли; 

	ДобавляемыеГруппы = ПолучитьПодгруппыСтроки(ТекстГруппа, РазделительГруппаДобавить);
	
	// Не добавляются новые группы
	Если ДобавляемыеГруппы.Количество() <= 1 Тогда   
		СтрочныйЭлемент = ПолучитьОписаниеСтрочногоЭлемента(Родитель);
		СтрочныйЭлемент.Текст =  ТекстГруппа;
		
		ЗаполнитьКоординатыЭлементаПоТекстуВверх(Родитель, ТекстГруппа);
		
		ТекущиеГруппы.Добавить(Родитель);
		Возврат;
	КонецЕсли;
	
	ГоризонтальнаяГруппа = ПолучитьОписаниеГоризонтальнойГруппы(Родитель);

	// Первый элемент пропускаем
	Для Сч = 1 По ДобавляемыеГруппы.ВГраница() Цикл
		ДобавляемаяГруппа = ДобавляемыеГруппы[Сч];

		НоваяВертикальнаяГруппа = ПолучитьОписаниеВертикальнойГруппы(ГоризонтальнаяГруппа);

		ЗаголовокЭлемента = СокрЛП(ДобавляемаяГруппа.Значение);
		НоваяВертикальнаяГруппа.НаборСвойств.Заголовок = ЗаголовокЭлемента;
		НоваяВертикальнаяГруппа.НаборСвойств.ОтображатьЗаголовок = НЕ ПустаяСтрока(ЗаголовокЭлемента);
		
		ЗаполнитьКоординатыЭлементаПоТекстуВверх(НоваяВертикальнаяГруппа, ДобавляемаяГруппа);
		
		ТекущиеГруппы.Добавить(НоваяВертикальнаяГруппа);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПарсингДобавляемыхСтраниц(ПараметрыТекущейСтраницы, ТекущиеГруппы, ТекстГруппа)
	СтраницаРазделитель = Лексема("СтраницаРазделитель");
	
	Если НЕ ТекстНачинаетсяС(ТекстГруппа, СтраницаРазделитель) Тогда 
		Возврат Ложь;
	КонецЕсли;

	Страницы = ПараметрыТекущейСтраницы.Страницы;
	Родитель = ПараметрыТекущейСтраницы.Родитель;
	Если Страницы = Неопределено Тогда
		Страницы = ПолучитьОписаниеСтраниц(Родитель);
		Страницы.Уровень = ПараметрыТекущейСтраницы.Уровень;  
	КонецЕсли;     
	
	Содержимое = ВыделитьНачальныйКонечныйСимволы(ТекстГруппа, СтраницаРазделитель);
	Текст = Содержимое.Текст;
	
	НоваяСтраница = ПолучитьОписаниеСтраницы(Страницы); 
	НоваяСтраница.НаборСвойств.Заголовок = СокрЛП(Текст.Значение);     
	
	ЗаполнитьКоординатыЭлементаПоТекстуВверх(НоваяСтраница, ТекстГруппа);
	
	ТекущиеГруппы.Добавить(НоваяСтраница);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыТекущейСтраницы(ПараметрыВыполнения, ПрошлаяГруппа, ТекстГруппа) 
	СтраницаРазделитель = Лексема("СтраницаРазделитель");
	
	Результат = Новый Структура;
	Результат.Вставить("Родитель", ПрошлаяГруппа);
	Результат.Вставить("Уровень", 0);
	Результат.Вставить("Страницы", Неопределено);
	Результат.Вставить("ПустаяСтрока", Ложь);

	Если ПрошлаяГруппа.Тип <> "Страница" Тогда 
		Возврат Результат;
	КонецЕсли;

	Если ПустаяСтрока(ТекстГруппа.Значение) Тогда
		Результат.ПустаяСтрока = Истина;
		Возврат Результат;
	КонецЕсли;
		
	СтрУровень = ПолучитьУровеньПоОтступам(ТекстГруппа.Значение);
		
	Если НЕ ТекстНачинаетсяС(ТекстГруппа, СтраницаРазделитель) Тогда
		СтрУровень.Уровень = СтрУровень.Уровень - 1;
	КонецЕсли;

	Если СтрУровень.Уровень < 0 Тогда
		Результат.Родитель = ПараметрыВыполнения.Форма;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Уровень = СтрУровень.Уровень;
	
	НайденныйРодитель = ПолучитьСтраницуПоУровню(ПрошлаяГруппа, СтрУровень.Уровень);
	Если НайденныйРодитель = Неопределено Тогда
		Результат.Родитель = ПрошлаяГруппа;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Родитель = НайденныйРодитель;
	Результат.Страницы = НайденныйРодитель.Родитель;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеФормы()
	Результат = ПолучитьОписаниеЭлемента("Форма", Неопределено);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.Вставить("Элементы", Новый Массив);
	Результат.Вставить("ЭлементыПарсинг", Новый Массив);
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Функция ПолучитьОписаниеВертикальнойГруппы(ГоризонтальнаяГруппа = Неопределено)
	Результат = ПолучитьОписаниеЭлемента("ВертикальнаяГруппа", ГоризонтальнаяГруппа);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.НаборСвойств.Вставить("ОтображатьЗаголовок", Ложь);
	Результат.Вставить("Элементы", Новый Массив);
	Результат.Вставить("ЭлементыПарсинг", Новый Массив);
	
	Результат.Вставить("Текст", НовыйПустойТекст());
	
	Если ГоризонтальнаяГруппа <> Неопределено Тогда
		ГоризонтальнаяГруппа.Элементы.Добавить(Результат);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции  

&НаКлиенте
Функция ПолучитьОписаниеОднострочнойГруппы(ВертикальнаяГруппа)
	Результат = ПолучитьОписаниеЭлемента("ОднострочнаяГруппа", ВертикальнаяГруппа);
	
	Результат.Вставить("Элементы", Новый Массив);
	Результат.Вставить("ЭлементыПарсинг", Новый Массив);
	
	ВертикальнаяГруппа.ЭлементыПарсинг.Добавить(Результат);
	
	Возврат Результат;
КонецФункции  

&НаКлиенте
Функция ПолучитьОписаниеГоризонтальнойГруппы(ВертикальнаяГруппа)
	Результат = ПолучитьОписаниеЭлемента("ГоризонтальнаяГруппа", ВертикальнаяГруппа);
	Результат.Вставить("Элементы", Новый Массив);
	
	ВертикальнаяГруппа.ЭлементыПарсинг.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПарсингОчистка(Элемент)
	Если Элемент.Свойство("Родитель") Тогда
		Элемент.Удалить("Родитель");
	КонецЕсли;	
	
	Если Элемент.Свойство("ЭлементыПарсинг") Тогда
		Элемент.Удалить("ЭлементыПарсинг");
	КонецЕсли;	

	ОчищаемыеЭлементы = Новый Массив;
	ОчищаемыеЭлементы.Добавить("Элементы");
	ОчищаемыеЭлементы.Добавить("Строки");
	ОчищаемыеЭлементы.Добавить("Колонки");
	ОчищаемыеЭлементы.Добавить("Ячейки");

	Для Каждого ОчищаемыйЭлемент Из ОчищаемыеЭлементы Цикл
		Если НЕ Элемент.Свойство(ОчищаемыйЭлемент) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Подэлемент Из Элемент[ОчищаемыйЭлемент] Цикл
			ПарсингОчистка(Подэлемент);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПарсингСтрочныхЭлементов

&НаКлиенте
Функция ПарсингНабораСвойств(НаборСвойств, Текст) 
    Результат = Текст;
	
	СтрСвойства = ПолучитьГруппуСтроки(Текст, "{", "}", "СКонца");
	
	Если НЕ СтрСвойства.Найден Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = СтрСвойства.Текст;
	
	МассивСвойства = ПолучитьПодгруппыСтроки(СтрСвойства.Группа, ";");        

	Для Каждого Свойство Из МассивСвойства Цикл
		СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Свойство, "=");
		Если НЕ СтрКлючЗначение.Найден Тогда
			Продолжить;
		КонецЕсли;
		ИмяСвойства = СокрЛП(СтрКлючЗначение.Ключ.Значение);
		ЗначениеСвойства = СокрЛП(СтрКлючЗначение.Значение.Значение);
		НаборСвойств.Вставить(ИмяСвойства, ЗначениеСвойства);
	КонецЦикла;  
	
	Возврат Результат;
КонецФункции    

&НаКлиенте
Процедура ЗаполнитьНаборСвойств(ПараметрыВыполнения, Элемент)
	Для Каждого КлючЗначение Из ПараметрыВыполнения.НаборСвойств Цикл
		Элемент.НаборСвойств.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;	
	
	ПараметрыВыполнения.НаборСвойств = Новый Структура;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеЭлемента(Тип, Родитель)  
	Результат = Новый Структура;
	Результат.Вставить("Тип", Тип); 
	Результат.Вставить("УИД", Новый УникальныйИдентификатор);
	Результат.Вставить("Родитель", Родитель); 
	
	Результат.Вставить("НеизвестныеСвойства", Новый Массив);
	Результат.Вставить("НаборСвойств", Новый Структура);
	Результат.Вставить("ТипыСвойств", Новый Структура);
	Результат.Вставить("Координаты", Новый Соответствие);
	Результат.Вставить("Формат", Новый Структура("Результат,Длина", Новый Массив, 0));
	Результат.Вставить("ИмяРеквизита", "");
	Результат.Вставить("ИмяЭлемента", "");
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьТекстСКартинкой(Текст)
	Результат = Новый Структура("Текст,Картинка,ПоложениеКартинки", СокрЛП(Текст.Значение), Неопределено, "Лево");
	
	Если ТекстНачинаетсяС(Текст, "@")  Тогда
		Результат.ПоложениеКартинки = "Лево";
		
		ГруппаКартинка = ПолучитьГруппуСтроки(Текст, "@", " ");
		Если ГруппаКартинка.Найден Тогда
			Результат.Текст = СокрЛП(ГруппаКартинка.Текст.Значение);
			Результат.Картинка = СокрЛП(ГруппаКартинка.Группа.Значение);
		Иначе
			// Вся строка - картинка
			Результат.Текст = "";
			Результат.Картинка = СокрЛП(ГруппаКартинка.Текст.Значение);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	ГруппаКартинка = ПолучитьГруппуСтроки(Текст, "@", , "СКонца");
	Если НЕ ГруппаКартинка.Найден Тогда
		Возврат Результат;
	КонецЕсли;
	Результат.Текст = СокрЛП(ГруппаКартинка.Текст.Значение);
	Результат.Картинка = СокрЛП(ГруппаКартинка.Группа.Значение);
	Результат.ПоложениеКартинки = "Право";
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыВыполненияСтрочныхЭлементов(Родитель, Элементы)
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Родитель", Родитель);

	ПараметрыВыполнения.Вставить("МассивЭлементов", Элементы);
	ПараметрыВыполнения.Вставить("Индекс", 0);
	
	ПараметрыВыполнения.Вставить("НаборСвойств", Новый Структура);

	ПараметрыВыполнения.Вставить("ПолеВвода", Неопределено);
	
	ПараметрыВыполнения.Вставить("ТекущийЭлемент", Неопределено);
	ПараметрыВыполнения.Вставить("НачальныйИндексЭлемента", Неопределено);
	ПараметрыВыполнения.Вставить("КонечныйИндексЭлемента", Неопределено);
	
	Возврат ПараметрыВыполнения;
КонецФункции

&НаКлиенте
Процедура ПарсингСтрочныхЭлементов(ПараметрыВыполнения)
	Пока Истина Цикл 
	
		ПараметрыВыполнения.ТекущийЭлемент = Неопределено;
		
		ПарсингСтрочногоЭлемента(ПараметрыВыполнения); 

		ПараметрыВыполнения.КонечныйИндексЭлемента = ПараметрыВыполнения.Индекс - 1;
		
		УстановитьКоординатыСтрочногоЭлемента(ПараметрыВыполнения);
		
		Если ПараметрыВыполнения.Индекс > ПараметрыВыполнения.МассивЭлементов.ВГраница() Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры       

&НаКлиенте
Процедура УстановитьКоординатыСтрочногоЭлемента(ПараметрыВыполнения)
	Если ПараметрыВыполнения.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для ИндексТекст = ПараметрыВыполнения.НачальныйИндексЭлемента По ПараметрыВыполнения.КонечныйИндексЭлемента Цикл
		Текст = ПараметрыВыполнения.МассивЭлементов[ИндексТекст].Текст;
		ЗаполнитьКоординатыЭлементаПоТексту(
			ПараметрыВыполнения.ТекущийЭлемент, 
			Текст);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингСтрочногоЭлемента(ПараметрыВыполнения)
	ТекЭлемент = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ПарсингГоризонтальнойГруппы(ПараметрыВыполнения) Тогда
		Возврат;
	КонецЕсли;

	Если ПарсингОднострочнойГруппы(ПараметрыВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПарсингСтраниц(ПараметрыВыполнения) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыВыполнения.НачальныйИндексЭлемента = ПараметрыВыполнения.Индекс;
	
	Если ПарсингТаблицы(ПараметрыВыполнения) Тогда
		ПараметрыВыполнения.ПолеВвода = Неопределено;
		Возврат;
	КонецЕсли;
	
	ТекЭлемент = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	Текст = ТекЭлемент.Текст;
	
	ТекстБезСвойств = ПарсингСвойствСтрочногоЭлемента(Текст, ПараметрыВыполнения.НаборСвойств);

	Если ПарсингКоманднойПанели(ПараметрыВыполнения, ТекстБезСвойств) Тогда
		ПараметрыВыполнения.ПолеВвода = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ПарсингПоляВвода(ПараметрыВыполнения, ТекстБезСвойств) Тогда
		Возврат;
	КонецЕсли;

	Если ПарсингФлажкаЛевый(ПараметрыВыполнения, ТекстБезСвойств) Тогда
		ПараметрыВыполнения.ПолеВвода = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ПарсингФлажкаПравый(ПараметрыВыполнения, ТекстБезСвойств) Тогда
		ПараметрыВыполнения.ПолеВвода = Неопределено;
		Возврат;
	КонецЕсли;

	Если ПарсингНадписи(ПараметрыВыполнения, ТекстБезСвойств) Тогда
		ПараметрыВыполнения.ПолеВвода = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПерейтиНаСледующийЭлемент(ПараметрыВыполнения);
КонецПроцедуры    

&НаКлиенте
Функция ПарсингСвойствСтрочногоЭлемента(Текст, НаборСвойств)
	СвойствоГоризонтальноеПоложение = ПарсингПолучитьГоризонтальноеПоложение(Текст);
	Если СвойствоГоризонтальноеПоложение <> Неопределено Тогда
		НаборСвойств.Вставить("ГоризонтальноеПоложениеВГруппе", СвойствоГоризонтальноеПоложение);
	КонецЕсли;
	
	Возврат ПарсингНабораСвойств(НаборСвойств, Текст);
КонецФункции

&НаКлиенте
Функция ПарсингПолучитьГоризонтальноеПоложение(Текст)
	СтрРасположение = ВыделитьНачальныйКонечныйСимволы(Текст, "->", "<-");
	Текст = СтрРасположение.Текст;
	
	Если СтрРасположение.ЕстьНачальный И СтрРасположение.ЕстьКонечный Тогда
		Возврат "Центр";
	КонецЕсли;
	
	Если СтрРасположение.ЕстьНачальный Тогда
		Возврат "Право";
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

#Область ПарсингСтраниц

&НаКлиенте
Функция ПолучитьОписаниеСтраниц(ВертикальнаяГруппа)  
	Результат = ПолучитьОписаниеЭлемента("Страницы", ВертикальнаяГруппа);  
	Результат.Вставить("Элементы", Новый Массив);
	Результат.Вставить("Родитель", ВертикальнаяГруппа);
	Результат.Вставить("Уровень", 0);
	
	ВертикальнаяГруппа.ЭлементыПарсинг.Добавить(Результат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеСтрочногоЭлемента(Родитель)  
	Результат = ПолучитьОписаниеЭлемента("СтрочныйЭлемент", Родитель);  
	Результат.Вставить("Родитель", Родитель);
	Результат.Вставить("Текст", Неопределено);
	
	Родитель.ЭлементыПарсинг.Добавить(Результат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеСтраницы(Страницы)  
	Результат = ПолучитьОписаниеЭлемента("Страница", Страницы);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.Вставить("Родитель", Страницы);
	Результат.Вставить("Элементы", Новый Массив);
	Результат.Вставить("ЭлементыПарсинг", Новый Массив);
	Результат.Вставить("Текст", НовыйПустойТекст());
	
	Страницы.Элементы.Добавить(Результат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПарсингСтраниц(ПараметрыВыполнения) 
	Страницы = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	
	Если НЕ Страницы.Тип = "Страницы" Тогда
		 Возврат Ложь;
	КонецЕсли;
	
	Родитель = Страницы.Родитель;
	
	Родитель.Элементы.Добавить(Страницы);
	
	Для Каждого Страница Из Страницы.Элементы Цикл
		ПарсингСтраницы(Страница);
	КонецЦикла;

	ПерейтиНаСледующийЭлемент(ПараметрыВыполнения);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПарсингСтраницы(Страница) 
	ПараметрыВыполнения = ПолучитьПараметрыВыполненияСтрочныхЭлементов(Страница, Страница.ЭлементыПарсинг);
	ПарсингСтрочныхЭлементов(ПараметрыВыполнения);

	ПерейтиНаСледующийЭлемент(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Функция ПарсингВертикальнойГруппы(ВертикальнаяГруппа)    
	Если НЕ ВертикальнаяГруппа.Тип = "ВертикальнаяГруппа"
		И НЕ ВертикальнаяГруппа.Тип = "Форма" Тогда
		 Возврат Ложь;
	КонецЕсли;

	ПараметрыВыполнения = ПолучитьПараметрыВыполненияСтрочныхЭлементов(
		ВертикальнаяГруппа, 
		ВертикальнаяГруппа.ЭлементыПарсинг);
	ПарсингСтрочныхЭлементов(ПараметрыВыполнения);

	ПерейтиНаСледующийЭлемент(ПараметрыВыполнения);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПарсингОднострочнойГруппы(ПараметрыВыполнения)
	ОднострочнаяГруппа = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	Если НЕ ОднострочнаяГруппа.Тип = "ОднострочнаяГруппа" Тогда
		 Возврат Ложь;
	КонецЕсли;

	ВертикальнаяГруппа = ОднострочнаяГруппа.Родитель;
	ВертикальнаяГруппа.Элементы.Добавить(ОднострочнаяГруппа);
	
	ПараметрыВыполненияОднострочнаяГруппа = ПолучитьПараметрыВыполненияСтрочныхЭлементов(
		ОднострочнаяГруппа, 
		ОднострочнаяГруппа.ЭлементыПарсинг);
	ПарсингСтрочныхЭлементов(ПараметрыВыполненияОднострочнаяГруппа);
	
	ПерейтиНаСледующийЭлемент(ПараметрыВыполнения);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПарсингГоризонтальнойГруппы(ПараметрыВыполнения)         
	ГоризонтальнаяГруппа = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	
	Если НЕ ГоризонтальнаяГруппа.Тип = "ГоризонтальнаяГруппа" Тогда
		 Возврат Ложь;
	КонецЕсли;
	
	ВертикальнаяГруппа = ГоризонтальнаяГруппа.Родитель;
	ВертикальнаяГруппа.Элементы.Добавить(ГоризонтальнаяГруппа);
	
	Для Каждого ВертикальнаяГруппа Из ГоризонтальнаяГруппа.Элементы Цикл
		ПарсингВертикальнойГруппы(ВертикальнаяГруппа);
	КонецЦикла;

	ПерейтиНаСледующийЭлемент(ПараметрыВыполнения);
	
	Возврат Истина;
КонецФункции

#КонецОбласти 

#Область ПарсингКоманднойПанели

&НаКлиенте
Функция ПолучитьОписаниеКнопки(КоманднаяПанель)  
	Результат = ПолучитьОписаниеЭлемента("Кнопка", КоманднаяПанель);
	Результат.Вставить("Картинка", Неопределено);
	Результат.Вставить("КлючПоиска", "");
	Результат.Вставить("Элементы", Новый Массив);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.НаборСвойств.Вставить("ПоложениеКартинки", "Лево");     
	КоманднаяПанель.Элементы.Добавить(Результат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеГруппыКнопок()  
	Результат = ПолучитьОписаниеЭлемента("ГруппаКнопок", Неопределено);
	Результат.Вставить("Элементы", Новый Массив);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеКоманднойПанели(Родитель)  
	Результат = ПолучитьОписаниеЭлемента("КоманднаяПанель", Родитель); 
	Результат.НаборСвойств.Вставить("ГоризонтальноеПоложениеВГруппе", "Лево");
	Результат.Вставить("Элементы", Новый Массив);
	
	Родитель.Элементы.Добавить(Результат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПарсингКоманднойПанели(ПараметрыВыполнения, Текст)  
	ПозицияНачало = СтрНайтиСЭкранированием(Текст.Значение, Лексема("КоманднаяПанельНачало"), "СНачала");
	
	Если ПозицияНачало = 0 Тогда
		 Возврат Ложь;
	КонецЕсли; 
	 
	ТекстПоиск = ТекстСред(Текст, ПозицияНачало);
	
	Буфер = НовыйПустойТекст();	

	Пока Истина Цикл   
		ТекстДобавить(Буфер, Текст);
		
		Если СтрНайтиСЭкранированием(ТекстПоиск.Значение, Лексема("КоманднаяПанельКонец"), "СКонца") <> 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ ПерейтиНаСледующийЭлемент(ПараметрыВыполнения) Тогда
			Прервать;
		КонецЕсли;
		
		ТекЭлемент = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
		Текст = ТекЭлемент.Текст;
		ТекстПоиск = Текст;
	КонецЦикла;
	
	ПарсингКоманднойПанелиИзТекста(ПараметрыВыполнения, Буфер);    
	
	ПерейтиНаСледующийЭлемент(ПараметрыВыполнения);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПарсингКоманднойПанелиИзТекста(ПараметрыВыполнения, Знач Текст)
	Текст = ПарсингСвойствСтрочногоЭлемента(Текст, ПараметрыВыполнения.НаборСвойств);
	
	Содержимое = ВыделитьНачальныйКонечныйСимволы(
		Текст, 
		Лексема("КоманднаяПанельНачало"), 
		Лексема("КоманднаяПанельКонец"));

	Текст = Содержимое.Текст;   

	НоваяКоманднаяПанель = ПолучитьОписаниеКоманднойПанели(ПараметрыВыполнения.Родитель);
	ЗаполнитьНаборСвойств(ПараметрыВыполнения, НоваяКоманднаяПанель);
	
	ПараметрыВыполнения.ТекущийЭлемент = НоваяКоманднаяПанель;

	КоманднаяПанельИерархия = Новый Массив;
	
	МассивТекст = ТекстРазделить(Текст);
	Для Индекс = 0 По МассивТекст.ВГраница() Цикл
		ТекТекст = МассивТекст[Индекс];
		
		Если Индекс = 0 Тогда
			ПарсингКоманднойПанелиПерваяСтрока(ПараметрыВыполнения, НоваяКоманднаяПанель, ТекТекст);
			Продолжить;
		КонецЕсли;
		
		ПарсингМеню(
			ПараметрыВыполнения,
			НоваяКоманднаяПанель,
			КоманднаяПанельИерархия,
			ТекТекст);
	КонецЦикла;   
	ПарсингКоманднойПанелиДобавитьГруппыКнопок(НоваяКоманднаяПанель, НоваяКоманднаяПанель);
КонецПроцедуры

&НаКлиенте
Процедура ПарсингКоманднойПанелиПерваяСтрока(ПараметрыВыполнения, НоваяКоманднаяПанель, Текст)
	Кнопки = ПолучитьПодгруппыСтроки(Текст, Лексема("КоманднаяПанельРазделительКнопок"));
	Для Каждого ОписаниеКнопки Из Кнопки Цикл   
		ПарсингКнопкиКоманднойПанели(ПараметрыВыполнения, НоваяКоманднаяПанель, НоваяКоманднаяПанель, ОписаниеКнопки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингКоманднойПанелиДобавитьГруппыКнопок(НоваяКоманднаяПанель, Родитель)
	ТекНаборЭлементов = Новый Массив;  
	НовыеЭлементы = Новый Массив;
	
	ГруппыКнопок = Новый Массив;
	БылиРазделители =  Ложь;
	
	Для Каждого Элемент Из Родитель.Элементы Цикл  
		Если Элемент.Тип = "Меню" Тогда
			ТекНаборЭлементов.Добавить(Элемент); 
			
			ПарсингКоманднойПанелиДобавитьГруппыКнопок(НоваяКоманднаяПанель, Элемент);
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(Элемент.НаборСвойств.Заголовок) = Лексема("КоманднаяПанельРазделительМеню") Тогда
			ЭлементГруппаКнопок = ПарсингГруппыКнопок(НоваяКоманднаяПанель, ТекНаборЭлементов);
			ГруппыКнопок.Добавить(ЭлементГруппаКнопок);
			
			НовыеЭлементы.Добавить(ЭлементГруппаКнопок);
			ТекНаборЭлементов.Очистить();
			
			БылиРазделители = Истина;
			
			Продолжить;
		КонецЕсли;
		ТекНаборЭлементов.Добавить(Элемент); 
	КонецЦикла;	 
	
	Если БылиРазделители И ТекНаборЭлементов.Количество() > 0 Тогда
		ЭлементГруппаКнопок = ПарсингГруппыКнопок(НоваяКоманднаяПанель, ТекНаборЭлементов);
		ГруппыКнопок.Добавить(ЭлементГруппаКнопок);
		
		НовыеЭлементы.Добавить(ЭлементГруппаКнопок);
	Иначе
		Для Каждого ТекЭлемент Из ТекНаборЭлементов Цикл
			НовыеЭлементы.Добавить(ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Родитель.Элементы = НовыеЭлементы;
	
	Для Каждого ГруппаКнопок Из ГруппыКнопок Цикл
		ГруппаКнопок.Родитель = Родитель;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПарсингГруппыКнопок(НоваяКоманднаяПанель, МассивЭлементов)
	ЭлементГруппаКнопок = ПолучитьОписаниеГруппыКнопок();

	Для Каждого ТекЭлемент Из МассивЭлементов Цикл
		ЭлементГруппаКнопок.Элементы.Добавить(ТекЭлемент);
		ТекЭлемент.Родитель = ЭлементГруппаКнопок;
	КонецЦикла;
	
	Возврат ЭлементГруппаКнопок;
КонецФункции

&НаКлиенте
Процедура ПарсингМеню(ПараметрыВыполнения, КоманднаяПанельСМеню, Иерархия, Знач Текст) 
	СтрУровень = ВыделитьУровеньИзИерархическогоЭлемента(Текст);  

	Если СтрУровень.Уровень = 0 Тогда
		ТекЭлементМеню = ПолучитьКнопкуМеню(СтрУровень.Текст, КоманднаяПанельСМеню);
	Иначе
		ТекРодитель = Иерархия[СтрУровень.Уровень - 1];  
		
		Если ТекРодитель.Тип = "Кнопка" Тогда
			ТекРодитель.Тип = "Меню";
			ТекРодитель.НаборСвойств.Удалить("ПоложениеКартинки");
		КонецЕсли;
		
		ТекЭлементМеню = ПарсингКнопкиКоманднойПанели(
			ПараметрыВыполнения, 
			КоманднаяПанельСМеню, 
			ТекРодитель, 
			СтрУровень.Текст); 
			
		// Пустой текст в названии кнопки
		Если ТекЭлементМеню = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекИерархия = Новый Массив;
	
	Для СчРодители = 0 По СтрУровень.Уровень - 1 Цикл
		ТекИерархия.Добавить(Иерархия[СчРодители]);
	КонецЦикла;
	ТекИерархия.Добавить(ТекЭлементМеню);
	Иерархия = ТекИерархия;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуМеню(Меню, КоманднаяПанель)
	ТекстСКартинкой = ПолучитьТекстСКартинкой(Меню);
    КлючПоиска = ПолучитьКлючПоискаКнопки(ТекстСКартинкой);
	
	Возврат НайтиКнопкуКоманднойПанелиПоКлючу(КоманднаяПанель, КлючПоиска);
КонецФункции

&НаКлиенте
Функция ПолучитьКлючПоискаКнопки(ТекстСКартинкой)
	Если ПустаяСтрока(ТекстСКартинкой.Текст) Тогда
		Возврат "@" + НРег(СокрЛП(ТекстСКартинкой.Картинка));
	КонецЕсли;
	
	Возврат НРег(СокрЛП(ТекстСКартинкой.Текст));
КонецФункции

&НаКлиенте
Функция ПарсингКнопкиКоманднойПанели(ПараметрыВыполнения, ТекущаяКоманднаяПанель, Родитель, Знач Текст) 
	
	Если ПустаяСтрока(Текст.Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяКнопка = ПолучитьОписаниеКнопки(Родитель); 
	
    Текст = ПарсингНабораСвойств(НоваяКнопка.НаборСвойств, Текст); 

	ТекстСКартинкой = ПолучитьТекстСКартинкой(Текст);
	
	НоваяКнопка.НаборСвойств.Заголовок = ТекстСКартинкой.Текст;
	НоваяКнопка.НаборСвойств.ПоложениеКартинки = ТекстСКартинкой.ПоложениеКартинки;
	НоваяКнопка.Картинка = ТекстСКартинкой.Картинка; 
    НоваяКнопка.КлючПоиска = ПолучитьКлючПоискаКнопки(ТекстСКартинкой);

	Возврат НоваяКнопка;
КонецФункции

&НаКлиенте
Функция НайтиКнопкуКоманднойПанелиПоКлючу(Родитель, КлючПоиска)
	Для Каждого Элемент Из Родитель.Элементы Цикл
		Если Элемент.Тип <> "ГруппаКнопок" 
			И Элемент.КлючПоиска = КлючПоиска Тогда
			Возврат Элемент;
		КонецЕсли;    
		
		РезультатПоиска = НайтиКнопкуКоманднойПанелиПоКлючу(Элемент, КлючПоиска);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЦикла;    
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти 

#Область ПарсингФлажка

&НаКлиенте
Функция ПолучитьОписаниеФлажка(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("Флажок", Родитель);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.НаборСвойств.Вставить("ПоложениеЗаголовка", "Право");
	Результат.НаборСвойств.Вставить("ГоризонтальноеПоложениеВГруппе", "Лево");
	Результат.НаборСвойств.Вставить("ВидФлажка", "Авто");
	
	Результат.Вставить("Значение", Ложь);
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
	
КонецФункции 
 
&НаКлиенте
Функция ПарсингФлажкаЛевый(ПараметрыВыполнения, Знач Текст) 
	Если НЕ ТекстНачинаетсяС(Текст, "[") Тогда
		 Возврат Ложь;
	КонецЕсли;

	РезультатПарсинга = ПолучитьГруппуСтроки(Текст, "[", "]", "СНачала");
	ПараметрыПарсинга = ПараметрыПарсингаФлажка(РезультатПарсинга, "Право");
	
	ПарсингФлажкаОбщий(ПараметрыВыполнения, ПараметрыПарсинга); 
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПарсингФлажкаПравый(ПараметрыВыполнения, Знач Текст) 
	Если НЕ ТекстЗаканчиваетсяНа(Текст, "]") Тогда
		 Возврат Ложь;
	КонецЕсли;

	РезультатПарсинга = ПолучитьГруппуСтроки(Текст, "[", "]", "СКонца");
	ПараметрыПарсинга = ПараметрыПарсингаФлажка(РезультатПарсинга, "Лево");
	
	ПарсингФлажкаОбщий(ПараметрыВыполнения, ПараметрыПарсинга); 
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПараметрыПарсингаФлажка(РезультатПарсинга, ПоложениеЗаголовка)  
	Результат = Новый Структура("ПоложениеЗаголовка,Заголовок,Значение,ВидФлажка");
	
	Текст = РезультатПарсинга.Группа;
	
	Группы = ПолучитьПодгруппыСтроки(Текст, Лексема("ФлажокРазделительГрупп"));
	
	Если Группы.Количество() <= 1 Тогда
		Значение = НЕ ПустаяСтрока(РезультатПарсинга.Группа.Значение);
		Результат.ВидФлажка = "Авто";
	Иначе
		ГруппаВкл = Группы[1];
		Значение = НЕ ПустаяСтрока(ГруппаВкл.Значение);
		Результат.ВидФлажка = "Выключатель";
	КонецЕсли;
	
	Результат.ПоложениеЗаголовка = ПоложениеЗаголовка;
	Результат.Заголовок = РезультатПарсинга.Текст;
	Результат.Значение = Значение;
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Процедура ПарсингФлажкаОбщий(ПараметрыВыполнения, ПараметрыПарсинга)
	Родитель = ПараметрыВыполнения.Родитель;

	НовыйЭлемент = ПолучитьОписаниеФлажка(Родитель);
	ПараметрыВыполнения.ТекущийЭлемент = НовыйЭлемент;
	
	НовыйЭлемент.НаборСвойств.ПоложениеЗаголовка = ПараметрыПарсинга.ПоложениеЗаголовка;
	НовыйЭлемент.НаборСвойств.Заголовок = СокрЛП(ПараметрыПарсинга.Заголовок.Значение);
	НовыйЭлемент.НаборСвойств.ВидФлажка = ПараметрыПарсинга.ВидФлажка;
	
	НовыйЭлемент.Значение = ПараметрыПарсинга.Значение;
	ЗаполнитьНаборСвойств(ПараметрыВыполнения, НовыйЭлемент);
	
	ПерейтиНаСледующийЭлемент(ПараметрыВыполнения);
КонецПроцедуры

#КонецОбласти

 #Область ПарсингТаблицы

 &НаКлиенте
Функция ПарсингТаблицы(ПараметрыВыполнения) 
	СохраненныйИндекс = ПараметрыВыполнения.Индекс;
	ТекЭлемент = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
	Текст = ТекЭлемент.Текст;
	 
	Колонки = ПолучитьПодгруппыСтроки(Текст, Лексема("ТаблицаРазделитель"));
	
	Если Колонки.Количество() <= 1 Тогда
		Возврат Ложь;
	КонецЕсли;       
	
	ПредварительнаяТаблица = ПолучитьПредварительнуюТаблицу(ПараметрыВыполнения, Колонки);
	
	Родитель = ПараметрыВыполнения.Родитель;
	
	Таблица = ПолучитьОписаниеТаблицы(Родитель);

	ПараметрыВыполнения.ТекущийЭлемент = Таблица;
	
	ЗаполнитьНаборСвойств(ПараметрыВыполнения, Таблица);
	
	РазделыТаблицы = ПолучитьРазделыТаблицы(ПредварительнаяТаблица);
	
	Если РазделыТаблицы.РазделительЗаголовок = Неопределено Тогда
		ПараметрыВыполнения.Индекс = СохраненныйИндекс;
		Возврат Ложь;
	КонецЕсли;
	
	Таблица.Тип = ПолучитьТипТаблицы(РазделыТаблицы);
	
	Заголовки = СгруппироватьЗаголовкиТаблицы(Таблица, РазделыТаблицы);      
	Если Заголовки = Неопределено Тогда
		ПараметрыВыполнения.Индекс = СохраненныйИндекс;
		Возврат Ложь;
	КонецЕсли;
	
	Строки = СгруппироватьСтрокиТаблицы(РазделыТаблицы);     
	
	СоединитьСтрокиТаблицы(Таблица, Строки, Заголовки);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПолучитьТипТаблицы(РазделыТаблицы)
	Для Каждого Строка Из РазделыТаблицы.Строки Цикл
		Если Строка.Уровень > 0 Тогда
			Возврат "Дерево";
		КонецЕсли;
	КонецЦикла;
	
	Возврат "Таблица";
КонецФункции

&НаКлиенте
Процедура УдалитьПустыеГраничныеКолонки(Колонки, Удалены) 
	Если Колонки.Количество() > 0 Тогда
		Колонка = Колонки[Колонки.ВГраница()];
		Если ПустаяСтрока(Колонка.Значение) Тогда
			Колонки.Удалить(Колонки.ВГраница());
			Удалены = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Колонки.Количество() > 0 Тогда
		Колонка = Колонки[0];
		Если ПустаяСтрока(Колонка.Значение) Тогда
			Колонки.Удалить(0);	
			Удалены = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЭтоПустаяКолонка(Колонка)
	Возврат ПустаяСтрока(Колонка.Значение);
КонецФункции

&НаКлиенте
Функция ПарсингРазделителяЗаголовкаТаблицы(Колонки) 
	Результат = Новый Массив;
	Для Каждого ЭлементКолонка Из Колонки Цикл 
		Содержимое = ВыделитьНачальныйКонечныйСимволы(ЭлементКолонка, ":", ":");
		Текст = Содержимое.Текст;
		
		Если НЕ ЭтоРазделительТаблицы(Текст.Значение) Тогда
			Возврат Неопределено;
		КонецЕсли;                               
		
		Если Содержимое.ЕстьНачальный И Содержимое.ЕстьКонечный Тогда
			Результат.Добавить("Центр");
		ИначеЕсли Содержимое.ЕстьКонечный Тогда
			Результат.Добавить("Право");
		Иначе
			Результат.Добавить("Лево");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПредварительнуюТаблицу(ПараметрыВыполнения, Знач Колонки)
	УдаленыЛишниеКолонки = Ложь;
	УдалитьПустыеГраничныеКолонки(Колонки, УдаленыЛишниеКолонки);
	
	Результат = Новый Массив;
	
	Пока Истина Цикл
		Строка = Новый Структура("Колонки,Уровень,Строки", Новый Массив, 0, Новый Массив);
		
		Если Колонки.Количество() > 0 Тогда
			ПерваяКолонка = Колонки[0];		
			
			СтрУровень = ВыделитьУровеньИзИерархическогоЭлемента(ПерваяКолонка);  

			Колонки[0] = СтрУровень.Текст;
			
			Строка.Уровень = СтрУровень.Уровень;
		КонецЕсли;
		
		Строка.Колонки = Колонки;
		Результат.Добавить(Строка);
		
		Если НЕ ПерейтиНаСледующийЭлемент(ПараметрыВыполнения) Тогда
			Возврат Результат;
		КонецЕсли;
		
		ТекЭлемент = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
		Текст = ТекЭлемент.Текст;
		
		УдаленыЛишниеКолонки = Ложь;
		Колонки = ПолучитьПодгруппыСтроки(Текст, Лексема("ТаблицаРазделитель"));
		УдалитьПустыеГраничныеКолонки(Колонки, УдаленыЛишниеКолонки);
		Если Колонки.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ УдаленыЛишниеКолонки И Колонки.Количество() = 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции   

&НаКлиенте
Функция ПолучитьРазделыТаблицы(ПредварительнаяТаблица)
	Результат = Новый Структура("Заголовок,РазделительЗаголовок,Строки",
		Новый Массив,
		Неопределено,
		Новый Массив);	
		
	ЗаголовокЗаполнен = Ложь;
	Для Каждого Строка Из ПредварительнаяТаблица Цикл
		Разделитель = ПарсингРазделителяЗаголовкаТаблицы(Строка.Колонки);
		Если Разделитель <> Неопределено Тогда
			Результат.РазделительЗаголовок = Разделитель;
			ЗаголовокЗаполнен = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ЗаголовокЗаполнен Тогда
			Результат.Строки.Добавить(Строка);
			Продолжить;
		КонецЕсли;
		
		Результат.Заголовок.Добавить(Строка);
	КонецЦикла;
		
		
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СгруппироватьЗаголовкиТаблицы(Таблица, РазделыТаблицы)
	НаборЗаголовков = Новый Массив;
	
	ПрошлыйНаборКолонок = Неопределено;
	ТекущаяКолонка = Неопределено;
	ТекущаяРодитель = Неопределено;
	
	Для Каждого СтрЗаголовок Из РазделыТаблицы.Заголовок Цикл
		Колонки = СтрЗаголовок.Колонки;
		
		НаборКолонок = Новый Массив;
		
		Для Сч = 0 По Колонки.ВГраница() Цикл
			ЭлементКолонка = Колонки[Сч];
			
			КолонкаРодитель = Неопределено;
			Если ПрошлыйНаборКолонок <> Неопределено Тогда
				Если Сч > ПрошлыйНаборКолонок.ВГраница() Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				КолонкаРодитель = ПрошлыйНаборКолонок[Сч];
			КонецЕсли;
			
			Если ТекущаяРодитель <> КолонкаРодитель Тогда
				ТекущаяКолонка = Неопределено;
			КонецЕсли;  
			
			ТекущаяРодитель = КолонкаРодитель;
			
			Если ЭтоПустаяКолонка(ЭлементКолонка) Тогда
				Если ТекущаяКолонка = Неопределено Тогда
					НаборКолонок.Добавить(КолонкаРодитель);
				Иначе
					НаборКолонок.Добавить(ТекущаяКолонка);
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Если КолонкаРодитель = Неопределено Тогда
				КолонкаРодитель = Таблица;
			КонецЕсли;
			
			НовыйЭлемент = ПарсингКолонкиТаблицы(КолонкаРодитель, ЭлементКолонка);
			
			НаборКолонок.Добавить(НовыйЭлемент); 
			
			ТекущаяКолонка = НовыйЭлемент;
		КонецЦикла;		
		НаборЗаголовков.Добавить(НаборКолонок);
		ПрошлыйНаборКолонок = НаборКолонок;
	КонецЦикла;

	НаборЗаголовков = СвернутьМассивНаборовКолонок(НаборЗаголовков);
	Если НаборЗаголовков = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьГоризонтальноеПоложениеЗаголовков(НаборЗаголовков, РазделыТаблицы);

	Возврат НаборЗаголовков;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьГоризонтальноеПоложениеЗаголовков(НаборЗаголовков, РазделыТаблицы)
	Если НаборЗаголовков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сч = 0;
	Для Каждого Колонка Из НаборЗаголовков[НаборЗаголовков.ВГраница()] Цикл
		Если Сч > РазделыТаблицы.РазделительЗаголовок.ВГраница() Тогда
			Прервать;
		КонецЕсли;
		
		Колонка.НаборСвойств.ГоризонтальноеПоложение = РазделыТаблицы.РазделительЗаголовок[Сч];
		
		Сч = Сч + 1;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПарсингКолонкиТаблицы(КолонкаРодитель, ЭлементКолонка)
	НовыйЭлемент = ПолучитьОписаниеКолонкиТаблицы(КолонкаРодитель);
	Текст = ПарсингНабораСвойств(НовыйЭлемент.НаборСвойств, ЭлементКолонка);
	
	НовыйЭлемент.ЕстьЗначение = Истина;
	
	СтрНачальныйКонечный = ВыделитьНачальныйКонечныйСимволы(
		Текст, 
		Лексема("ТаблицаКолонкаГруппа"),
		Лексема("ТаблицаКолонкаГруппа"));
	
	Если СтрНачальныйКонечный.ЕстьНачальный 
		И СтрНачальныйКонечный.ЕстьКонечный Тогда
		НовыйЭлемент.Тип = "ГруппаКолонокТаблицы";
	КонецЕсли;
	
	НовыйЭлемент.НаборСвойств.Заголовок = СокрЛП(СтрНачальныйКонечный.Текст.Значение);
	Возврат НовыйЭлемент;

КонецФункции

&НаКлиенте
Функция СгруппироватьСтрокиТаблицы(РазделыТаблицы)
	Результат = Новый Массив;
	
	Иерархия = Новый Массив;
	Иерархия.Добавить(Результат);
	Для Каждого Строка Из РазделыТаблицы.Строки Цикл
		Если Строка.Уровень > Иерархия.ВГраница() Тогда
			Родитель = Иерархия[0];
		Иначе
			Родитель = Иерархия[Строка.Уровень];
		КонецЕсли;
		
		Родитель.Добавить(Строка);
		
		НоваяИерархия = Новый Массив;
		Для Сч = 0 По Строка.Уровень Цикл
			НоваяИерархия.Добавить(Иерархия[Сч]);
		КонецЦикла;
		НоваяИерархия.Добавить(Строка.Строки);
		Иерархия = НоваяИерархия;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СоединитьСтрокиТаблицы(ОписаниеРодитель, Строки, НаборЗаголовков) 
	ТекущаяСтрока = Неопределено;
	ИндексСтроки = 0;
	Для Каждого Строка Из Строки Цикл
		Если ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = ПолучитьОписаниеСтрокиТаблицы(ОписаниеРодитель);
		КонецЕсли;
		
		КолонкиЗаголовки = НаборЗаголовков[ИндексСтроки];
		
		Сч = 0;
		Для Каждого Колонка Из Строка.Колонки Цикл
			Если ПустаяСтрока(Колонка.Значение) Тогда
				Сч = Сч + 1;
				Продолжить;
			КонецЕсли;
			
			Если Сч > КолонкиЗаголовки.ВГраница() Тогда
				Сч = Сч + 1;
				Продолжить;
			КонецЕсли;
			
			КолонкаЗаголовка = КолонкиЗаголовки[Сч];
			
			ПарсингЯчейкиТаблицы(КолонкаЗаголовка, ТекущаяСтрока, Колонка);
			
			Сч = Сч + 1;
		КонецЦикла;
		
		СоединитьСтрокиТаблицы(ТекущаяСтрока, Строка.Строки, НаборЗаголовков);
		
		ИндексСтроки = ИндексСтроки + 1;    
		
		Если ИндексСтроки > НаборЗаголовков.ВГраница() Тогда
			ИндексСтроки = 0;
			ТекущаяСтрока = Неопределено;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ЭтоРазделительТаблицы(Знач Значение)
	Значение = СокрЛП(Значение);
	Возврат Значение <> "" И СтрЗаменить(Значение, "-", "") = "";
КонецФункции

&НаКлиенте
Функция ЭтоСтрокаРазделительТаблицы(Строка)
	Для Каждого Колонка Из Строка Цикл 
		Содержимое = ВыделитьНачальныйКонечныйСимволы(Колонка, ":", ":");
		Текст = Содержимое.Текст;
		
		Если НЕ ЭтоРазделительТаблицы(Текст.Значение) Тогда
			Возврат Ложь;
		КонецЕсли;                               
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ВыделитьУровеньИзИерархическогоЭлемента(Знач Текст)
	Результат = Новый Структура("Текст,Уровень", Текст, 0);
	
	Пока Истина Цикл
		СтрУровень = ВыделитьНачальныйКонечныйСимволы(Результат.Текст, ".", Неопределено);
		Если НЕ СтрУровень.ЕстьНачальный Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Уровень = Результат.Уровень + 1;
		Результат.Текст = СтрУровень.Текст;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуТаблицы(ПараметрыВыполнения, Знач Текст) 
	Результат = Новый Структура("СтрокаТаблицы,Уровень,Текст");
	
	СтрУровень = ВыделитьУровеньИзИерархическогоЭлемента(Текст);  
	
	Результат.Текст = СтрУровень.Текст;
	Результат.Уровень = СтрУровень.Уровень;
	
	Таблица = ПараметрыВыполнения.Таблица;

	Если СтрУровень.Уровень = 0 Тогда
		Результат.СтрокаТаблицы = ПолучитьОписаниеСтрокиТаблицы(Таблица);
	Иначе
		ТекРодитель = ПараметрыВыполнения.Иерархия[СтрУровень.Уровень - 1];
		Результат.СтрокаТаблицы = ПолучитьОписаниеСтрокиТаблицы(ТекРодитель);
	КонецЕсли;             
	
	Иерархия = Новый Массив;
	
	Для СчРодители = 0 По СтрУровень.Уровень - 1 Цикл
		Иерархия.Добавить(ПараметрыВыполнения.Иерархия[СчРодители]);
	КонецЦикла;
	Иерархия.Добавить(Результат.СтрокаТаблицы);
	ПараметрыВыполнения.Иерархия = Иерархия;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПарсингЯчейкиТаблицы(КолонкаТаблицы, СтрокаТаблицы, Текст)
	
	НоваяЯчейка = ПолучитьОписаниеЯчейкиТаблицы(СтрокаТаблицы);
	НоваяЯчейка.УИДКолонки = КолонкаТаблицы.УИД;
	
	Текст = ПарсингНабораСвойств(НоваяЯчейка.НаборСвойств, Текст);
	
	Если ПарсингФлажкаЯчейкиТаблицы(КолонкаТаблицы, НоваяЯчейка, Текст) Тогда
		Возврат;
	КонецЕсли;

	СтроковоеЗначение = СокрЛП(Текст.Значение);
	
	НоваяЯчейка.Значение = СтроковоеЗначение;  	
	
	Если НЕ ПустаяСтрока(СтроковоеЗначение) Тогда
		КолонкаТаблицы.ЕстьЗначение = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПарсингФлажкаЯчейкиТаблицы(КолонкаТаблицы, НоваяЯчейка, Текст)
	
	Если НЕ ТекстНачинаетсяС(Текст, "[") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	РезультатПарсинга = ПолучитьГруппуСтроки(Текст, "[", "]", "СНачала");
	Если НЕ РезультатПарсинга.Найден Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПарсинга = ПараметрыПарсингаФлажка(РезультатПарсинга, "Право");
	
	СтроковоеЗначение = СокрЛП(ПараметрыПарсинга.Заголовок.Значение);
	НоваяЯчейка.Значение = СтроковоеЗначение;
	НоваяЯчейка.ЕстьФлажок = Истина;
	НоваяЯчейка.ЗначениеФлажка = ПараметрыПарсинга.Значение;  	
	НоваяЯчейка.УИДКолонкиФлажок = КолонкаТаблицы.УИДФлажок;  	
	
	Если НЕ ПустаяСтрока(СтроковоеЗначение) Тогда
		КолонкаТаблицы.ЕстьЗначение = Истина;
	КонецЕсли;
	
	КолонкаТаблицы.ЕстьФлажок = Истина;
		
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция СвернутьМассивНаборовКолонок(МассивНаборовКолонок)
	Результат = Новый Массив;
	Если МассивНаборовКолонок.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	КоличествоКолонок = МассивНаборовКолонок[0].Количество();
	
	Результат = Новый Массив;

	ТекущийНабор = Новый Массив(КоличествоКолонок);

	ИндексНабора = МассивНаборовКолонок.ВГраница();
	Пока ИндексНабора >= 0 Цикл   
		НаборКолонок = МассивНаборовКолонок[ИндексНабора];
		ИндексНабора = ИндексНабора - 1;
		
		НовыйНабор = Новый Массив;
		
		Для ИндексКолонки = 0 По НаборКолонок.ВГраница() Цикл
			ТекущаяКолонка = НаборКолонок[ИндексКолонки];
			Если ТекущаяКолонка = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
			Если ТекущаяКолонка.Тип = "ГруппаКолонокТаблицы" Тогда
				ТекущаяКолонка = ТекущийНабор[ИндексКолонки];
			КонецЕсли;
			
			НовыйНабор.Добавить(ТекущаяКолонка);
			ТекущийНабор[ИндексКолонки] = ТекущаяКолонка;
		КонецЦикла;
		
		Результат.Вставить(0, НовыйНабор); 
	КонецЦикла;  
	
	УдалитьДублиИзМассиваНаборов(Результат);
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Процедура УдалитьДублиИзМассиваНаборов(МассивНаборовКолонок)
	ПрошлаяСтрока = Неопределено;    
	ИндексНабора = 0;
	Пока ИндексНабора <= МассивНаборовКолонок.ВГраница() Цикл
		ТекущаяСтрока = МассивНаборовКолонок[ИндексНабора];
		
		Если ПрошлаяСтрока <> Неопределено
			И СтрокиНабораРавны(ПрошлаяСтрока, ТекущаяСтрока) Тогда
			
			МассивНаборовКолонок.Удалить(ИндексНабора);
			Продолжить;
		КонецЕсли;
		
		ПрошлаяСтрока = ТекущаяСтрока;
		ИндексНабора = ИндексНабора + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокиНабораРавны(Набор1, Набор2)
	Для Индекс = 0 По Набор1.ВГраница() Цикл
		Если Набор1[Индекс] <> Набор2[Индекс] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции   

 #КонецОбласти

#Область ПарсингПоляВвода

&НаКлиенте
Функция ПолучитьОписаниеПоляВвода(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("ПолеВвода", Родитель);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	//Результат.НаборСвойств.Вставить("ПоложениеЗаголовка", "Лево");
	Результат.НаборСвойств.Вставить("ГоризонтальноеПоложениеВГруппе", "Лево");
	
	Результат.Вставить("Значение", "");
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
КонецФункции 
 
&НаКлиенте
Функция ПарсингПоляВвода(ПараметрыВыполнения, Знач Текст) 
	КлючЗначение = ПолучитьКлючЗначениеТекста(Текст, ":");
	
	Если НЕ КлючЗначение.Найден Тогда
		 Возврат Ложь;
	КонецЕсли;

	Родитель = ПараметрыВыполнения.Родитель;

	ЗаголовокЭлемента = СокрЛП(КлючЗначение.Ключ.Значение);
	Значение = КлючЗначение.Значение;
	КлючиСвойств = Неопределено;

	СвойстваПоляВвода = ПолучитьКлючЗначениеТекста(Значение, "__");
	Если СвойстваПоляВвода.Найден Тогда
		Значение = СвойстваПоляВвода.Ключ;
		КлючиСвойств = СокрЛП(СвойстваПоляВвода.Значение.Значение);
	КонецЕсли;   
	
	СтрокаЗначение = СокрЛП(Значение.Значение);
	
	НовыйЭлемент = ПолучитьОписаниеПоляВвода(Родитель);
	ПараметрыВыполнения.ТекущийЭлемент = НовыйЭлемент;
	
	НовыйЭлемент.НаборСвойств.Заголовок = ЗаголовокЭлемента;
	НовыйЭлемент.Значение = СокрЛП(Значение.Значение);       
	//Если ПустаяСтрока(СтрокаЗначение) Тогда
	//	НовыйЭлемент.НаборСвойств.ПоложениеЗаголовка = "Верх";
	//КонецЕсли;
	
	ЗаполнитьНаборСвойств(ПараметрыВыполнения, НовыйЭлемент);
	
	ПарсингПоляВводаМодификаторы(КлючиСвойств, НовыйЭлемент);
	
	Если НЕ ПерейтиНаСледующийЭлемент(ПараметрыВыполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Пока Истина Цикл  
		ТекЭлемент = ПолучитьТекущийЭлемент(ПараметрыВыполнения);
		Текст = ТекЭлемент.Текст;
		
		Если НЕ ЭтоМногострочноеПолеВвода(Текст.Значение) Тогда
			Прервать;
		КонецЕсли;     
		
		НовыйЭлемент.НаборСвойств.Вставить("МногострочныйРежим", Истина);
		
		Если НовыйЭлемент.НаборСвойств.Свойство("Высота") Тогда
			ТекВысота = НовыйЭлемент.НаборСвойств.Высота;
		Иначе 
			ТекВысота = 1;
		КонецЕсли;
		
		НовыйЭлемент.НаборСвойств.Вставить("Высота", ТекВысота + 1);

		Если НЕ ПерейтиНаСледующийЭлемент(ПараметрыВыполнения) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПарсингПоляВводаМодификаторы(Модификаторы, ЭлементДанных)
	Если Модификаторы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для СчКлюча = 1 По СтрДлина(Модификаторы) Цикл
		КлючСвойств = НРег(Сред(Модификаторы, СчКлюча, 1));
		Если КлючСвойств = "v" ИЛИ КлючСвойств = "с" Тогда
			ЭлементДанных.НаборСвойств.Вставить("КнопкаВыпадающегоСписка", Истина);
		ИначеЕсли КлючСвойств = "." ИЛИ КлючСвойств = "в" Тогда
			ЭлементДанных.НаборСвойств.Вставить("КнопкаВыбора", Истина);
		ИначеЕсли КлючСвойств = "х" ИЛИ КлючСвойств = "x" Тогда
			ЭлементДанных.НаборСвойств.Вставить("КнопкаОчистки", Истина);
		ИначеЕсли КлючСвойств = "^" или КлючСвойств = "д" Тогда
			ЭлементДанных.НаборСвойств.Вставить("КнопкаРегулирования", Истина);
		ИначеЕсли КлючСвойств = "о" ИЛИ КлючСвойств = "o" Тогда
			ЭлементДанных.НаборСвойств.Вставить("КнопкаОткрытия", Истина);
		Иначе 
			Продолжить;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
 
&НаКлиенте
Функция ЭтоМногострочноеПолеВвода(Знач Значение)
	Значение = СокрЛП(Значение);
	Возврат Значение <> "" И СтрЗаменить(Значение, "_", "") = "";
КонецФункции

#КонецОбласти   

#Область ПарсингНадписи

&НаКлиенте
Функция ПолучитьОписаниеНадписи(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("Надпись", Родитель);
	Результат.НаборСвойств.Вставить("Заголовок", "");
	Результат.НаборСвойств.Вставить("ГоризонтальноеПоложениеВГруппе", "Лево");
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
КонецФункции 
 
&НаКлиенте
Функция ПарсингНадписи(ПараметрыВыполнения, Знач Текст) 
	Если ПустаяСтрока(Текст.Значение) Тогда
		 Возврат Ложь;
	КонецЕсли;

	НовыйЭлемент = ПолучитьОписаниеНадписи(ПараметрыВыполнения.Родитель);
	ПараметрыВыполнения.ТекущийЭлемент = НовыйЭлемент;
	
	НовыйЭлемент.НаборСвойств.Заголовок = СокрЛП(Текст.Значение);
	ЗаполнитьНаборСвойств(ПараметрыВыполнения, НовыйЭлемент);

	ПерейтиНаСледующийЭлемент(ПараметрыВыполнения);
	
	Возврат Истина;
КонецФункции

#КонецОбласти   

#КонецОбласти   

#Область РаботаСТекстом

&НаКлиенте
Функция НовыйТекст(Значение, Верх, Лево)
	Результат = НовыйПустойТекст();
	Результат.Значение = Значение;
	
	Результат.Координаты.Добавить(НовыеКоординаты(Верх, Лево));
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция НовыйПустойТекст()
	Результат = Новый Структура("Значение,Координаты", "", Новый массив);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция НовыеКоординаты(Верх, Лево)
	Возврат Новый Структура("Верх,Лево", Верх, Лево);
КонецФункции

&НаКлиенте
Функция ТекстЛев(Текст, ЧислоСимволов)  
	СтрДоПосле = ТекстРазделитьПоИндексу(Текст, ЧислоСимволов + 1);
	
	Возврат СтрДоПосле.До;
КонецФункции

&НаКлиенте
Функция ТекстНачинаетсяС(Текст, СтрокаПоиска)
	Возврат СтрНачинаетсяС(СокрЛ(Текст.Значение), СтрокаПоиска);
КонецФункции

&НаКлиенте
Функция ТекстЗаканчиваетсяНа(Текст, СтрокаПоиска)
	Возврат СтрЗаканчиваетсяНа(СокрП(Текст.Значение), СтрокаПоиска);
КонецФункции

&НаКлиенте
Функция ТекстСред(Текст, НачальныйНомер, ЧислоСимволов = Неопределено)
	СтрДоПосле = ТекстРазделитьПоИндексу(Текст, НачальныйНомер);
	
	Если ЧислоСимволов = Неопределено Тогда
		Возврат СтрДоПосле.После;
	КонецЕсли;
	
	СтрДоПосле = ТекстРазделитьПоИндексу(СтрДоПосле.После, ЧислоСимволов + 1);

	Возврат СтрДоПосле.До;
КонецФункции  

&НаКлиенте
Функция ТекстРазделитьПоИндексу(Текст, Знач Индекс)
	ТекстДо = НовыйПустойТекст();
	ТекстПосле = НовыйПустойТекст();
	
	ТекстДоДобавлен = Ложь;
	МассивТекст = ТекстРазделить(Текст);
	Для Каждого ТекТекст Из МассивТекст Цикл
		Если ТекстДоДобавлен Тогда
			ТекстДобавить(ТекстПосле, ТекТекст);
			Продолжить;
		КонецЕсли;
		
		Длина = ТекстДлина(ТекТекст);
		Если Индекс > Длина Тогда
			Индекс = Индекс - Длина;
			ТекстДобавить(ТекстДо, ТекТекст);
			Продолжить;
		КонецЕсли;
		
		Если Индекс > 1 Тогда
			СтрокаДо = Лев(ТекТекст.Значение, Индекс - 1); 
			НовыйТекстДо = НовыйТекст(СтрокаДо, ТекТекст.Координаты[0].Верх, ТекТекст.Координаты[0].Лево);
			ТекстДобавить(ТекстДо, НовыйТекстДо);
		КонецЕсли;

		СтрокаПосле = Сред(ТекТекст.Значение, Индекс); 
		НовыйТекстПосле = НовыйТекст(СтрокаПосле, ТекТекст.Координаты[0].Верх, ТекТекст.Координаты[0].Лево + Индекс - 1);
		ТекстДобавить(ТекстПосле, НовыйТекстПосле);
		
		ТекстДоДобавлен = Истина;
	КонецЦикла;

	Возврат Новый Структура("До,После", ТекстДо, ТекстПосле);
КонецФункции

&НаКлиенте
Функция ТекстДлина(Текст)
	Возврат СтрДлина(Текст.Значение);
КонецФункции

&НаКлиенте
Процедура ТекстДобавить(Текст, ДобавляемыйТекст)
	Если Текст.Координаты.Количество() > 0 Тогда
		Текст.Значение = Текст.Значение + Символы.ПС;
	КонецЕсли;
	
	Текст.Значение = Текст.Значение + ДобавляемыйТекст.Значение;
	
	Для Каждого Координата Из ДобавляемыйТекст.Координаты Цикл
		Текст.Координаты.Добавить(Координата);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ТекстРазделить(Текст)
	Результат = Новый Массив;
	Значения = СтрРазделить(Текст.Значение, Символы.ПС);
	
	Для Сч = 0 По Значения.ВГраница() Цикл
		Значение = Значения[Сч];
		Координата = Текст.Координаты[Сч];  
		НовыйТекст = НовыйТекст(Значение, Координата.Верх, Координата.Лево);
		Результат.Добавить(НовыйТекст);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СтрНайтиСЭкранированием(Знач Строка, ПодстрокаПоиска, Направление = "СНачала")
	Строка = СтрЗаменить(Строка, Символы.ПС, "");
	НомерВхождения = 1;
	Пока Истина Цикл
		Позиция = СтрНайти(Строка, ПодстрокаПоиска, НаправлениеПоиска[Направление], , НомерВхождения);	
		НомерВхождения = НомерВхождения + 1;
		
		Если Направление = "СНачала" Тогда
			Подстрока = Лев(Строка, Позиция);
		Иначе
			Подстрока = Сред(Строка, Позиция);
		КонецЕсли;

		Если Позиция = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		Если СтрЧислоВхождений(Подстрока, """") % 2 <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(Подстрока, "'") % 2 <> 0 Тогда
			Продолжить;
		КонецЕсли;   
		
		Возврат Позиция;
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ПолучитьКлючЗначениеТекста(Знач Текст, Разделитель, Направление = "СНачала")
	Результат = Новый Структура("Значение,Ключ,Найден", Текст, "", Ложь);
	
	Позиция = СтрНайтиСЭкранированием(Текст.Значение, Разделитель, Направление);
	
	Если Позиция = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Результат.Найден = Истина;
	Результат.Ключ =  ТекстЛев(Текст, Позиция - 1);
	Результат.Значение = ТекстСред(Текст, Позиция + СтрДлина(Разделитель));
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПодгруппыСтроки(Знач Строка, Разделитель)
	Результат = Новый Массив;
	
	Пока Истина Цикл
		СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Строка, Разделитель);
		Если НЕ СтрКлючЗначение.Найден Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СтрКлючЗначение.Ключ);
		
		Строка = СтрКлючЗначение.Значение;
	КонецЦикла;

	Результат.Добавить(Строка);
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Функция ВыделитьНачальныйКонечныйСимволы(Текст, НачальныеСимволы = Неопределено, КонечныеСимволы = Неопределено)
	Результат = Новый Структура("Текст,ЕстьНачальный,ЕстьКонечный", Текст, Ложь, Ложь);
	
	ТекТекст = Текст;
	
	Если НачальныеСимволы <> Неопределено И ТекстНачинаетсяС(ТекТекст, НачальныеСимволы) Тогда  
		ГруппаСтроки = ПолучитьГруппуСтроки(ТекТекст, Неопределено, НачальныеСимволы, "СНачала");
		
		Если ГруппаСтроки.Найден Тогда
			Результат.ЕстьНачальный = Истина;
			ТекТекст = ГруппаСтроки.Текст;
		КонецЕсли;
	КонецЕсли;   
	
	Если КонечныеСимволы <> Неопределено И ТекстЗаканчиваетсяНа(ТекТекст, КонечныеСимволы) Тогда   
		ГруппаСтроки = ПолучитьГруппуСтроки(ТекТекст, КонечныеСимволы, Неопределено, "СКонца");
		
		Если ГруппаСтроки.Найден Тогда
			Результат.ЕстьКонечный = Истина;
			ТекТекст = ГруппаСтроки.Текст;			
		КонецЕсли;
	КонецЕсли;

	Результат.Текст = ТекТекст;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьГруппуСтроки(Текст, Открывающая, Закрывающая = Неопределено, Направление = "СНачала")
	Результат = Новый Структура("Текст,Группа,Найден", Текст, "", Ложь);

	Если Открывающая <> Неопределено И Направление = "СНачала" И НЕ ТекстНачинаетсяС(Текст, Открывающая) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Если Закрывающая <> Неопределено И Направление = "СКонца" И НЕ ТекстЗаканчиваетсяНа(Текст, Закрывающая) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Если Направление = "СНачала" Тогда    
		Если Открывающая <> Неопределено Тогда
			КЗСтроки = ПолучитьКлючЗначениеТекста(Результат.Текст, Открывающая, Направление);
			Результат.Текст = КЗСтроки.Значение;
		КонецЕсли;
		
		Разделитель = Закрывающая;

		ПолеГруппа = "Ключ";
		ПолеСтрока = "Значение";
	Иначе
		Если Закрывающая <> Неопределено Тогда
			КЗСтроки = ПолучитьКлючЗначениеТекста(Результат.Текст, Закрывающая, Направление);
			Результат.Текст = КЗСтроки.Ключ;
		КонецЕсли;
		
		Разделитель = Открывающая;
		
		ПолеГруппа = "Значение";
		ПолеСтрока = "Ключ";
	КонецЕсли;
	
	СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Результат.Текст, Разделитель, Направление);
	Если НЕ СтрКлючЗначение.Найден Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Найден = Истина;
	Результат.Текст = СтрКлючЗначение[ПолеСтрока];
	Результат.Группа = СтрКлючЗначение[ПолеГруппа];
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКоординатыЭлементаПоТексту(ОписаниеЭлемента, Текст)
	МассивТекст = ТекстРазделить(Текст);
	
	Для Каждого ЭлементТекст Из МассивТекст Цикл
		Координаты = ЭлементТекст.Координаты[0];
		ТекущийНаборКолонок = ОписаниеЭлемента.Координаты.Получить(Координаты.Верх);
		Если ТекущийНаборКолонок = Неопределено Тогда
			ТекущийНаборКолонок = Новый Массив;
			ОписаниеЭлемента.Координаты.Вставить(Координаты.Верх, ТекущийНаборКолонок);
		КонецЕсли;
		
		Интервал = Новый Структура("Лево,Право", Координаты.Лево, Координаты.Лево + СтрДлина(Текст.Значение));
		ТекущийНаборКолонок.Добавить(Интервал);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоординатыЭлементаПоТекстуВверх(ОписаниеЭлемента, Текст)
	 ЗаполнитьКоординатыЭлементаПоТексту(ОписаниеЭлемента, Текст);
	 
	 Если ОписаниеЭлемента.Свойство("Родитель") И ЗначениеЗаполнено(ОписаниеЭлемента.Родитель) Тогда
	 	ЗаполнитьКоординатыЭлементаПоТекстуВверх(ОписаниеЭлемента.Родитель, Текст);
	 КонецЕсли;
КонецПроцедуры


#КонецОбласти  

#КонецОбласти